{
  "questions": [
    {
      "type": "LONG",
      "statement": "What is MongoDB?",
      "explanation": "MongoDB is a cross-platform, document oriented database that provides, high performance, high availability, and easy scalability.Classified as a NoSQL database program, MongoDB uses JSON-like documents with schema.  \nMongoDB is written in C++  \n\nMongoDB is known to be used by the City of Chicago, Codecademy, Google Search, Foursquare, IBM, Orange S.A., The Gap, Inc., Uber, Coinbase, Sega, Barclays, HSBC, eBay, Cisco, Bosch and Urban Outfitters"
    },
    {
      "type": "LONG",
      "statement": "What are the difference between NoSQL and SQL?",
      "explanation": "| Parameter | SQL | NOSQL | | ------------------------- | -------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | | Definition | SQL databases are primarily called RDBMS or Relational Databases | NoSQL databases are primarily called as Non-relational or distributed database | | Query Language | Structured query language (SQL) | No declarative query language | | Type | SQL databases are table based databases | NoSQL databases can be document based, key-value pairs, graph databases | | Schema | SQL databases have a predefined schema | NoSQL databases use dynamic schema for unstructured data. | | Ability to scale | SQL databases are vertically scalable | NoSQL databases are horizontally scalable | | Examples | Oracle, Postgres, and MS-SQL. | MongoDB, Redis, Neo4j, Cassandra, Hbase. | | Best suited for | An ideal choice for the complex query intensive environment. | It is not good fit complex queries. | | Hierarchical data storage | SQL databases are not suitable for hierarchical data storage. | More suitable for the hierarchical data store as it supports key-value pair method | | Variations | One type with minor variations | Many different types which include key-value stores, document databases, and graph databases | | Consistency | It should be configured for strong consistency. | It depends on DBMS as some offers strong consistency like MongoDB, whereas others offer only offers eventual consistency, like Cassandra. | | Hardware | Specialized DB hardware (Oracle Exadata, etc.) | Commodity hardware | | Network | Highly available network (Infiniband, Fabric Path, etc.) | Commodity network (Ethernet, etc.) | | Best features | Cross-platform support, Secure and free | Easy to use, High performance, and Flexible tool. | | Top Companies Using | Hootsuite, CircleCI, Gauges | Airbnb, Uber, Kickstarter | | ACID vs. BASE Mode | ACID( Atomicity, Consistency, Isolation, and Durability) is a standard for RDBMS | Base ( Basically Available, Soft state, Eventually Consistent) is a model of many NoSQL systems | | Average salary | ₹ 5,58,704 per year | ₹ 6,04,959 per year |"
    },
    {
      "type": "LONG",
      "statement": "How to establish MongoDB database connection in a node application?",
      "explanation": "**Database Connection** Create a file ./config/database.js under the project root.\n\nDatabase Connection\n\nNext, we will add code that connects to the database.\n\nin database.js file\n\n    const mongoose = require('mongoose');\n    const server = '127.0.0.1:27017'; // REPLACE WITH YOUR DB SERVER\n    const database = 'fcc-Mail';      // REPLACE WITH YOUR DB NAME\n    \n     mongoose.connect(`mongodb://${server}/${database}`)\n       .then(() => {\n         console.log('Database connection successful')\n       })\n       .catch(err => {\n         console.error('Database connection error')\n       })\n    \n    module.exports = { mongoose }\n    \n\n**MongoDB Atlas** sign up to mongosb atlas and it will help you make a connection by url, having a secret key and password"
    },
    {
      "type": "LONG",
      "statement": "What are virtual property in mongoose?",
      "explanation": "A virtual property is not persisted to the database. We can add it to our schema as a helper to get and set values.but it wont store in database\n\n     userSchema.virtual('fullName').get(function() {\n     return this.firstName + ' ' + this.lastName\n     })\n    \n     userSchema.virtual('fullName').set(function(name) {\n     let str = name.split(' ')\n    \n     this.firstName = str[0]\n     this.lastName = str[1]\n     })\n    \n     const user = new User()\n     user.fullName = 'Thomas Anderson'\n     console.log(user.toJSON())  // Output model fields as JSON\n     console.log()\n     console.log(user.fullName)  // Output the full name\n     //The code above will output the following:\n    \n     { _id: 5a7a4248550ebb9fafd898cf,\n       firstName: 'Thomas',\n       lastName: 'Anderson' }\n     //Thomas Anderson"
    },
    {
      "type": "LONG",
      "statement": "How can we add or create our own instance methods in mongoose?",
      "explanation": "We can create custom helper methods on the schema and access them via the model instance. These methods will have access to the model object and they can be used quite creatively\n\n    userSchema.methods.details = function() {\n    return this.username + ' - ' +  this.email\n    }\n    //This method will be accessible via a model instance:\n    const user = new User({\n    username: 'user2',\n    email: 'user2@gmail.com'\n    })"
    },
    {
      "type": "LONG",
      "statement": "How can we add or create our own static methods in mongoose?",
      "explanation": "Similar to instance methods, we can create static methods on the schema. Let’s create a method to retrieve all users in the database:\n\n    userSchema.statics.getUsers = function() {\n    return new Promise((resolve, reject) => {\n      this.find((err, docs) => {\n        if(err) {\n          console.error(err)\n          return reject(err)\n        }\n        resolve(docs)\n          })\n        })\n      }"
    },
    {
      "type": "LONG",
      "statement": "What are the mongoose middlewares?",
      "explanation": "Middleware are functions that run at specific stages of a pipeline. Mongoose supports middleware for the following operations:  \n\nAggregate  \nDocument  \nModel  \nQuery"
    },
    {
      "type": "LONG",
      "statement": "How to query data using mongoose?",
      "explanation": "Mongoose has a very rich API that handles many complex operations supported by MongoDB. Consider a query where we can incrementally build query components.  \n\nIn this example, we are going to:  \n\nFind all users  \nSkip the first 100 records  \nLimit the results to 10 records  \nSort the results by the firstName field  \nSelect the firstName  \nExecute that query  \n\n    User.find()                   // find all users\n          .skip(100)                // skip the first 100 items\n          .limit(10)                // limit to 10 items\n          .sort({firstName: 1}      // sort ascending by firstName\n          .select({firstName: true} // select firstName only\n          .exec()                   // execute the query\n          .then(docs => {\n             console.log(docs)\n           })\n          .catch(err => {\n             console.error(err)\n           })"
    },
    {
      "type": "LONG",
      "statement": "What is Population in mongoose?",
      "explanation": "Population is the process of automatically replacing the specified paths in the document with document(s) from other collection(s). We may populate a single document, multiple documents, plain object, multiple plain objects, or all objects returned from a query."
    },
    {
      "type": "LONG",
      "statement": "What is Datamasking?",
      "explanation": "Data masking is a method of creating a structurally similar but inauthentic version of an organization's data that can be used for purposes such as software testing and user training. The purpose is to protect the actual data while having a functional substitute for occasions when the real data is not required.  \nyou can simply use **$project** to hide the mobile field  \nOr perhaps you have an extra field in your document to indicate whether the information is public or not, i.e. given documents"
    },
    {
      "type": "LONG",
      "statement": "What is hashing and explain how it works?",
      "explanation": "Hashing is the process of converting an input of any length into a fixed size string of text, using a mathematical function. When the user provides a input it will be converted to a value of fixed length by a hashing function and the resulting value will be called as hashed text, and it should be always unique for different value"
    },
    {
      "type": "LONG",
      "statement": "What are salts and why are they so important?",
      "explanation": "It's a unique value that can be added to the end of the password to create a different hash value. This adds a layer of security to the hashing process  \nThey are so important as they prevent **brute force attacks**(Trying all possible combintaion of password) and also against **rainbow table**(a table containing all common hashed text and their respective passwords)"
    },
    {
      "type": "LONG",
      "statement": "What are pepper and why are they so important?",
      "explanation": "A pepper is a secret added to an input such as a password prior to being hashed with a cryptographic hash function  \nA pepper performs a comparable role to a salt, but while a salt is not secret (merely unique) and can be stored alongside the hashed output  \nA pepper is secret and must not be stored with the output. The hash and salt are usually stored in a database, but a pepper must be stored separately (e.g. in a configuration file) to prevent it from being obtained by the attacker in case of a database breach.  \nWhere the salt only has to be long enough to be unique, a pepper has to be secure to remain secret (at least 112 bits is recommended by NIST), otherwise an attacker only needs one known entry to crack the pepper.  \nFinally, the pepper must be generated anew for every application it is deployed in, otherwise a breach of one application would result in lowered security of another application."
    },
    {
      "type": "LONG",
      "statement": "What are JWT?",
      "explanation": "JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object  \nsome scenarios where JSON Web Tokens are useful:  \n**Authorization**: This is the most common scenario for using JWT. Once the user is logged in, each subsequent request will include the JWT, allowing the user to access routes, services, and resources that are permitted with that token. Single Sign On is a feature that widely uses JWT nowadays, because of its small overhead and its ability to be easily used across different domains.  \n\n**Information Exchange**: JSON Web Tokens are a good way of securely transmitting information between parties. Because JWTs can be signed—for example, using public/private key pairs—you can be sure the senders are who they say they are. Additionally, as the signature is calculated using the header and the payload, you can also verify that the content hasn't been tampered with."
    },
    {
      "type": "LONG",
      "statement": "What are different authentication methods?",
      "explanation": "Use **API keys** if you expect developers to build internal applications that don’t need to access more than a single user’s data.  \nUse **OAuth** access tokens if you want users to easily provide authorization to applications without needing to share private data or dig through developer documentation.  \nUse **session cookies**, here server is responsible for creating a session for the particular user when the user log's in, after that the id of the session is stored in a cookie on the user browser. For every request sent by the user, the cookie will be sent too, where the server can compare the session id from the cookie with the session information stored on the server so the user identity is verified."
    },
    {
      "type": "LONG",
      "statement": "What are disadvantages of using session based authentication?",
      "explanation": "**Compromised Secret Key** : The best and the worst thing about JWT is that it relies on just one Key. Consider that the Key is leaked by a careless or a rogue developer/administrator, the whole system is compromised!  \n**Cannot manage client from the server**  \n**Cannot push Messages to clients**  \n**Crypto-algo can be deprecated**  \n**Data Overhead** : The size of the JWT token will be more than that of a normal Session token  \nComplicated to understand: JWT uses cryptographic Signature algorithms to verify the data and get the user-id from the token. Understanding the Signing Algo in itself requires basics of cryptography."
    },
    {
      "type": "LONG",
      "statement": "What are disadvantages of using jwt based authentication?",
      "explanation": "**Session based authentication**:  \nBecause the sessions are stored in the server’s memory, scaling becomes an issue when there is a huge number of users using the system at once.  \nCookies normally work on a single domain or subdomains and they are normally disabled by browser if they work cross-domain (3rd party cookies). It poses issues when APIs are served from a different domain to mobile and web devices."
    }
  ]
}
