{"questions":[{"statement":"\\`console.log()\\` is always executed synchronously","explanation":"While it is up to the hosting environment how they want to implement \\`console\\`, it is often asynchronous because blocking I/O takes a lot of time.","type":"TF","correct":false},{"statement":"What will be logged to the console when the following code is executed: \\`\\`\\`js var data = ajax( \"https://google.com\" ); console.log( data ); \\`\\`\\`","explanation":"Because \\`ajax\\` is asynchronous, \\`data\\` will not yet be defined when it is logged to the console.","type":"MCQ","options":[{"text":"The html for google.com","correct":false},{"text":"\\`undefined\\`","correct":true}]},{"statement":"Until ES6, JavaScript itself has actually never had any direct notion of asynchrony built into it.","explanation":"What you typically think of asynchrony is often the Web APIs, not the JavaScript engine.","type":"TF","correct":true},{"statement":"What data structure best explains the event loop?","explanation":"The event loop is FIFO, or first-in-first-out, which is similar to that of a queue.","type":"MCQ","options":[{"text":"stack","correct":false},{"text":"queue","correct":true},{"text":"binary tree","correct":false},{"text":"graph","correct":false}]},{"statement":"What statement about \\`setTimeout(callbackFn, 1000)\\` below is the most accurate.","explanation":"Once the timer is up, the callback will get added to the event loop. If the event loop has 20 items, then the callback will execute once those 20 items are executed.","type":"MCQ","options":[{"text":"\\`callbackFn\\` will be executed once 1000ms has elapsed.","correct":false},{"text":"\\`callbackFn\\` will be executed in at least 1000ms.","correct":true},{"text":"\\`callbackFn\\` will be executed in at most 1000ms.","correct":false}]},{"statement":"What is \"callback hell\" all about?","explanation":"But the brittle nature of manually hardcoded callbacks (even with hardcoded error handling) is often far less graceful. Once you end up specifying (aka pre-planning) all the various eventualities/paths, the code becomes so convoluted that it's hard to ever maintain or update it. \\*\\*That\\*\\* is what \"callback hell\" is all about! The nesting/indentation are basically a side show, a red herring.","type":"MCQ","options":[{"text":"When you have several nested callbacks, and your code gets extremely indented","correct":false},{"text":"Manually hardcoding callbacks makes your code so convoluted that it's hard to ever maintain or update it.","correct":true},{"text":"Writing many lines of code within one file","correct":false},{"text":"Making so many ajax calls that your page takes forever to load","correct":false}]},{"statement":"What is troubling about the code below: \\`\\`\\`js analytics.trackPurchase( purchaseData, function(){ chargeCreditCard(); displayThankyouPage(); } ); \\`\\`\\`","explanation":"This library could run this critical callback 1 time or 0 times or many times.","type":"MCQ","options":[{"text":"You are trusting this analytics library to ensure that critical functions get executed","correct":true},{"text":"You are using analytics to track a purchase","correct":false},{"text":"The callback is an anonymous function","correct":false},{"text":"The functions are named poorly","correct":false}]},{"statement":"What scenario below is not a potential problem that needs to be handled when using callbacks:","explanation":"Once the callback is run, any issue in your code is not the fault of the callback.","type":"MCQ","options":[{"text":"Call the callback too late (or never)","correct":false},{"text":"Call the callback too few or too many times","correct":false},{"text":"Fail to pass along any necessary environment/parameters to your callback","correct":false},{"text":"Once the callback is run, fail to execute the rest of your code","correct":true}]},{"statement":"What is the difference between \\`fn()\\` and \\`setTimeout(fn, 0)\\`?","explanation":"\\`setTimeout\\` is handled by the web API, and once the timer is up, it pushes the callback onto the event loop.","type":"MCQ","options":[{"text":"The first option will be executed right away, and the second will first be added to the event loop.","correct":true},{"text":"Practically, there is no difference","correct":false},{"text":"When \\`fn\\` is called on the second option, it will be called with an \\`event\\` argument","correct":false},{"text":"The second option is more performant","correct":false}]},{"statement":"What will be logged to the console when the following code is executed: \\`\\`\\`js var a = 1 setTimeout(() => console.log(a), 0) for (let i = 0; i < 1000; i++) { } a++ \\`\\`\\`","explanation":"The callback gets pushed onto the event loop immediately, but it doesn't run until the call stack is empty which occurs after the for loop and after \\`a++\\` is executed.","type":"MCQ","options":[{"text":"\\`1\\`","correct":false},{"text":"\\`2\\`","correct":true},{"text":"\\`undefined\\`","correct":false},{"text":"\\`ReferenceError\\`","correct":false}]},{"statement":"How do Promises uninvert the \\*inversion of control\\*?","explanation":"Promises allow you to remain in control when you make a request to a third party library.","type":"MCQ","options":[{"text":"With Promises, we can expect it to return us a capability to know when its task finishes. Then, our code can decide what to do next.","correct":true},{"text":"They require you to send two callback functions: one for success and one for error case.","correct":false},{"text":"They break asynchrony and coerce the functions into synchronous functions","correct":false},{"text":"You promise to fulfill the request by calling the callback function","correct":false}]},{"statement":"What will be logged to the console when the following code is executed: \\`\\`\\`js let prom1 = new Promise((resolve, reject) => { setTimeout(() => resolve(1), 1000) }) let prom2 = new Promise((resolve, reject) => { setTimeout(() => resolve(2), 500) }) Promise.all(\\[prom1, prom2\\]).then(function onComplete(results) { const sum = results.reduce((acc, val) => { return acc + val }, 0); console.log(sum) }) \\`\\`\\`","explanation":"\\`Promise.all()\\` creates a single promise that resolves when all of the input promises resolve. In the example above, \\`onComplete\\` won't run until \\`prom1\\` and \\`prom2\\` have resolved.","type":"MCQ","options":[{"text":"\\`undefined\\`","correct":false},{"text":"\\`1\\`","correct":false},{"text":"\\`2\\`","correct":false},{"text":"\\`3\\`","correct":true}]},{"statement":"What will be logged to the console when the following code is executed: \\`\\`\\`js let promArr = \\[\\]; for (let i = 0; i < 10; i++) { promArr.push( new Promise((resolve, reject) => { setTimeout(() => resolve(1), 1000); }) ); } promArr.push( new Promise((resolve, reject) => { setTimeout(() => reject('uh oh'), 1500); }) ); Promise.all(promArr) .then(function onComplete(results) { const sum = results.reduce((acc, val) => { return acc + val; }, 0); console.log(sum); }) .catch(err => console.log(err)); \\`\\`\\`","explanation":"If one promise rejects in \\`Promise.all\\`, then they all fail. Even though 10 of the promises passed to \\`Promise.all\\` resolved, we don't have access to the resolved data if one fails.","type":"MCQ","options":[{"text":"\\`10\\`","correct":false},{"text":"\\`\"uh oh\"\\`","correct":true},{"text":"\\`10 \"uh oh\"\\`","correct":false},{"text":"\\`undefined\\`","correct":false}]},{"statement":"What will be logged to the console when the following code is executed: \\`\\`\\`js let prom1 = new Promise((resolve, reject) => { setTimeout(() => resolve(1), 1000) }) let prom2 = new Promise((resolve, reject) => { setTimeout(() => resolve(2), 500) }) Promise.race(\\[prom1, prom2\\]).then(function onComplete(results) { console.log(results) }) \\`\\`\\`","explanation":"With \\`Promise.race()\\`, as soon as the first promise resolves, the resolved value is sent to \\`onComplete\\`. Because \\`prom2\\`s timer was for less time than \\`prom1\\`, \\`prom2\\` won the race.","type":"MCQ","options":[{"text":"\\`1\\`","correct":false},{"text":"\\`2\\`","correct":true},{"text":"\\`\\[1, 2\\]\\`","correct":false},{"text":"\\`\\[2, 1\\]\\`","correct":false}]},{"statement":"What will be logged to the console when the following code is executed: \\`\\`\\`js const prom1 = Promise.resolve(1); const prom2 = Promise.reject('uh oh 2'); const prom3 = Promise.reject('uh oh 3'); Promise.all(\\[prom1, prom2, prom3\\]) .then(results => console.log(results)) .catch(err => console.log(err)); \\`\\`\\`","explanation":"The error that gets sent to \\`Promise.all.catch()\\` is the rejected value of the first promise to reject. In this case that would be \\`prom2\\`.","type":"MCQ","options":[{"text":"\\`\"uh oh 2\"\\`","correct":true},{"text":"\\`\"uh oh 3\"\\`","correct":false},{"text":"\\`\"uh oh 2\"\\` \\`\"uh oh 3\"\\`","correct":false},{"text":"\\`\\[\"uh oh 2\", \"uh oh 3\"\\]\\`","correct":false}]},{"statement":"What will be logged to the console when the following code is executed: \\`\\`\\`js var x = 1; function\\* foo() { x++; yield; x++; } var bar = foo() bar.next() console.log(x) bar.next() console.log(x) \\`\\`\\`","explanation":"The first time \\`bar.next\\` is called \\`foo\\` is run until \\`yield\\`. The second time, \\`bar.next\\` is called, \\`foo\\` is run until completion.","type":"MCQ","options":[{"text":"\\`2\\` \\`3\\`","correct":true},{"text":"\\`1\\` \\`2\\`","correct":false},{"text":"\\`1\\` \\`1\\`","correct":false},{"text":"\\`3\\` \\`3\\`","correct":false}]},{"statement":"What will be logged to the console when the following code is executed: \\`\\`\\`js function\\* foo(x) { var y = x \\* (yield \"Hello\"); return y; } var it = foo(6); var res = it.next(); res = it.next(7); console.log(res.value); \\`\\`\\`","explanation":"The first \\`it.next()\\` starts \\`foo\\`, and the second one replaces \\`\"Hello\"\\` with \\`7\\`, thus \\`y\\` is \\`42\\`.","type":"MCQ","options":[{"text":"\\`NaN\\`","correct":false},{"text":"\\`42\\`","correct":true},{"text":"\\`42 \"Hello\"\\`","correct":false},{"text":"\\`TypeError\\`","correct":false}]},{"statement":"What will be logged to the console when the following code is executed: \\`\\`\\`js function\\* foo() { var x = yield; var y = yield x; return x + y; } var it1 = foo(); var it2 = foo(); var val1 = 3; var val2 = 5; it1.next(); it2.next(); val1 = it1.next(val1).value; val2 = it2.next(val2).value; let returnVal1 = it1.next(val2).value; console.log(returnVal1); \\`\\`\\`","explanation":"The answer ends up being \\`x\\` of \\`it1\\` plus \\`x\\` of \\`it2\\` which is just \\`val1\\` + \\`val2\\`.","type":"MCQ","options":[{"text":"\\`3\\`","correct":false},{"text":"\\`5\\`","correct":false},{"text":"\\`8\\`","correct":true},{"text":"\\`undefined\\`","correct":false}]},{"statement":"What will be logged to the console when the following code is executed: \\`\\`\\`js function\\* foo() { let x = 1; while (true) { yield x; x += 1; } } let sumNextVar = 0; for (let nextVar of foo()) { if (nextVar > 3) { break; } sumNextVar += nextVar; } console.log(sumNextVar); \\`\\`\\`","explanation":"\\`for..of\\` will keep calling \\`next()\\` until the function returns. Because we have an infinte loop in \\`foo\\`, we need to manually stop our \\`for..of\\` loop, otherwise it will not stop.","type":"MCQ","options":[{"text":"\\`6\\`","correct":true},{"text":"\\`1\\`","correct":false},{"text":"\\`TypeError\\`","correct":false},{"text":"\\`undefined\\`","correct":false}]},{"statement":"What will be logged to the console when the following code is executed: \\`\\`\\`js function foo(x, y) { return new Promise((resolve, reject) => { setTimeout(() => resolve(y + 1), x); }); } function\\* main() { var num = yield foo(500, 1); console.log(num); } var it = main(); var p = it.next().value; p.then(num => { it.next(num); }); \\`\\`\\`","explanation":"\\`it.next().value\\` starts \\`main\\` and gets the value from \\`foo(500, 1)\\` which is a promise. We then resolve the promise, and then continue running \\`main\\`.","type":"MCQ","options":[{"text":"\\`1\\`","correct":false},{"text":"\\`2\\`","correct":true},{"text":"\\`ReferenceError\\`","correct":false},{"text":"\\`undefined\\`","correct":false}]},{"statement":"Why do we care about asynchrony? Why not make everything synchronous?","explanation":"Our code would be very slow if all of our requests were blocking.","type":"MCQ","options":[{"text":"That would make our code less readable","correct":false},{"text":"For performance reasons","correct":true},{"text":"It would not be possible to make everything synchronous","correct":false},{"text":"JavaScript is moving towards removing asynchrony","correct":false}]},{"statement":"What is a web worker?","explanation":"An environment like your browser can easily provide multiple instances of the JavaScript engine, each on its own thread, and let you run a different program in each thread. Each of those separate threaded pieces of your program is called a \"(Web) Worker.\" This type of parallelism is called \"task parallelism,\" as the emphasis is on splitting up chunks of your program to run in parallel.","type":"MCQ","options":[{"text":"It is a function that is required in order to make PWAs","correct":false},{"text":"A separate instance of the JavaScript engine allowing task parallelism","correct":true},{"text":"A continuous and open connection with a server","correct":false},{"text":"An ES7 feature that allows functions to not have run-to-completion behavior","correct":false}]},{"statement":"How do workers share scope or resources with each other or the main program?","explanation":"Workers do not share any scope or resources with each other or the main program -- that would bring all the nightmares of threaded programming to the forefront -- but instead have a basic event messaging mechanism connecting them called the \\`postMessage\\` API.","type":"MCQ","options":[{"text":"Via the \\`postMessage\\` API","correct":true},{"text":"Via the global scope","correct":false},{"text":"Via closures","correct":false},{"text":"Via lexical scoping","correct":false}]},{"statement":"What is \\*\\*not\\*\\* a common use for a web worker?","explanation":"Web workers do not have access to the DOM","type":"MCQ","options":[{"text":"Processing intensive math calculations","correct":false},{"text":"Sorting large data sets","correct":false},{"text":"High-traffic network communications","correct":false},{"text":"DOM diffing algorithm","correct":true}]},{"statement":"Shared Workers allow multiple instances of an app to share the same web worker","explanation":"If your site or app allows for loading multiple tabs of the same page (a common feature), you may very well want to reduce the resource usage of their system by preventing duplicate dedicated Workers and using a Shared Worker.","type":"TF","correct":true},{"statement":"All performance optimizations matter and should be seriously evaluated","explanation":"There is no point in chasing after small performance optimizations if you don't know have any reason to believe that it is causing your app to be slow.","type":"TF","correct":false},{"statement":"The code below is a valid way to test performance: \\`\\`\\`js var start = (new Date()).getTime(); // do some operation var end = (new Date()).getTime(); console.log( \"Duration:\", (end - start) ); \\`\\`\\`","explanation":"There are many things wrong with this, but one of the main reasons is that this is only one run, one data point and is not statistically significant.","type":"TF","correct":false},{"statement":"Which of the following will not potentially affect your performance test?","explanation":"Almost everything you can imagine can potentially affect your performance tests. Especially if your question isn't just \"is x faster than y\" but if the question includes \"is it a big enough difference for me to care\". Maybe x is consistently faster than y, but maybe it is so close that no one can tell the difference.","type":"MCQ","options":[{"text":"The amount of battery left on a smartphone that is running the test in Chrome","correct":false},{"text":"Using polyfills","correct":false},{"text":"Running the test one time vs many times","correct":false},{"text":"The time of day that your tests are run","correct":true}]},{"statement":"What is the difference between jsPerf and Benchmark.js?","explanation":"jsPerf uses the Benchmark.js library to run statistically accurate and reliable tests, and makes the test on an openly available URL that you can pass around to others. Each time a test is run, the results are collected and persisted with the test, and the cumulative test results are graphed on the page for anyone to see.","type":"MCQ","options":[{"text":"Benchmark.js is lower level and gives a statistical analysis of the test. jsPerf uses Benchmark.js to test in a browser.","correct":true},{"text":"They are two libraries that do more or less the same thing","correct":false},{"text":"jsPerf is compatible with ES6+ and Benchmark.js is not","correct":false}]},{"statement":"The browser will always execute your code as you wrote it","explanation":"Browser JavaScript engines have come up with \"engine optimizations\" which speed up the execution of your code. They might execute your code differently from the way you wrote it if their way is faster \\*\\*and\\*\\* results in the same output as your way. This is one of the reasons why it is not directly obvious how to analytically compare two pieces of code. Especially when you consider that browsers are constantly updating and improving their engines.","type":"TF","correct":false}]}