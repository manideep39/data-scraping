{"questions":[{"statement":"When \\`this\\` is used in a function, it refers to that function itself.","explanation":"\\`this\\` can refer to many different elements depending on how the function is called.","type":"TF","correct":false},{"statement":"When \\`this\\` is used in a function, it refers to that function's scope.","explanation":"\\`this\\` can refer to many different elements depending on how the function is called.","type":"TF","correct":false},{"statement":"Why is \\`this\\` helpful?","explanation":"The more complex your usage pattern is, the more clearly you'll see that passing context around as an explicit parameter is often messier than passing around a \\`this\\` context.","type":"MCQ","options":[{"text":"\\`this\\` mechanism provides an elegant way of implicitly \"passing along\" an object reference, leading to clean API design and easy re-use.","correct":true},{"text":"It is generally regarded as bad practice and should not be used","correct":false},{"text":"It allows you to do things in JavaScript that you can't do without it","correct":false},{"text":"It helps filter out less experienced JavaScript developers","correct":false}]},{"statement":"What is logged to the console in the code below: \\`\\`\\`js function foo() { var a = 2; this.bar(); } function bar() { var a = 1 console.log( this.a ); } foo(); \\`\\`\\`","explanation":"In both uses of the keyword \\`this\\`, it refers to the global object. Because there is no \\`a\\` in the global object, it is undefined.","type":"MCQ","options":[{"text":"\\`undefined\\`","correct":true},{"text":"\\`null\\`","correct":false},{"text":"\\`1\\`","correct":false},{"text":"\\`2\\`","correct":false}]},{"statement":"\\`this\\` is actually a binding that is made when a function is invoked","explanation":"Because \\`this\\` changes depending on HOW the function was called, its value is unknown at the time the function is defined. It is not like lexical scope which is determined at function definition.","type":"TF","correct":true},{"statement":"\\_\\_\\_\\_ a function is called matters the most when determining the value of \\`this\\`.","explanation":"While knowing where the function is called is helpful, the most important part is the HOW. Was it called with \\`call\\` or \\`apply\\`? Or with the \\`new\\` keyword? Was it called via an object? Or was it called regularly?","type":"MCQ","options":[{"text":"HOW","correct":true},{"text":"WHY","correct":false},{"text":"WHEN","correct":false},{"text":"WHAT","correct":false}]},{"statement":"What is a \\*\\*call-site\\*\\*?","explanation":"The call-site is simply where a function is called.","type":"MCQ","options":[{"text":"The location in code where a function is executed","correct":true},{"text":"The location in code where a function is declared","correct":false},{"text":"The location of the server that serves your content","correct":false},{"text":"The location of your code in memory","correct":false}]},{"statement":"What is logged to the console when the following code is executed: \\`\\`\\`js 'use strict' function foo() { var a = 'pony' console.log( this.a ); } var a = 'rocket ship'; foo(); \\`\\`\\`","explanation":"When not in strict mode, default binding rules are valid which means \\`this\\` would be the global object, and the answer would be 'rocket ship'. However, since we are in strict mode, default binding rules do not apply, so \\`this\\` is undefined. Accessing a property of \\`undefined\\` results TypeError.","type":"MCQ","options":[{"text":"undefined","correct":false},{"text":"TypeError","correct":true},{"text":"pony","correct":false},{"text":"rocket ship","correct":false}]},{"statement":"What is logged to the console when the following code is executed: \\`\\`\\`js 'use strict' function printName() { console.log( this.name ); } var person = { name: 'Ralphie', printName: printName }; person.printName(); let name = 'Joanna' \\`\\`\\`","explanation":"\\`person\\` has a key \\`printName\\` with a value of \\`printName\\` which refers to the function \\`printName\\`. When \\`person.printName()\\` is executed, the function reference that is stored in \\`person.printName\\` (\\`printName\\`) is executed within the \\`person\\` context, thus the implicit binding rules say that \\`this\\` is \\`person\\`.","type":"MCQ","options":[{"text":"\\`undefined\\`","correct":false},{"text":"\\`null\\`","correct":false},{"text":"\\`\"Joanna\"\\`","correct":false},{"text":"\\`\"Ralphie\"\\`","correct":true}]},{"statement":"What is logged to the console when the following code is executed: \\`\\`\\`js var firstName = 'Joanna'; function printFirstName() { console.log(this.firstName); } var person = { firstName: 'Ralphie', printfirstName: printFirstName(), }; \\`\\`\\`","explanation":"This one is a bit tricky. When \\`printFirstName()\\` is executed, the call-site actually does not have a context object because the call-site does not use the \\`person\\` context to reference the function. The default binding rule is therefore used to explain why the \\`this\\` falls back to the global object where there is a \\`var\\` with \\`firstName\\` of \\`\"Joanna\"\\`.","type":"MCQ","options":[{"text":"\\`undefined\\`","correct":false},{"text":"\\`null\\`","correct":false},{"text":"\\`\"Joanna\"\\`","correct":true},{"text":"\\`\"Ralphie\"\\`","correct":false}]},{"statement":"What is \\`typeof \\[\\]\\`?","explanation":"Arrays are also a form of objects, with extra behavior. The organization of contents in arrays is slightly more structured than for general objects.","type":"MCQ","options":[{"text":"\\`\"array\"\\`","correct":false},{"text":"\\`\"object\"\\`","correct":true},{"text":"\\`SyntaxError\\`","correct":false},{"text":"\\`NaN\\`","correct":false}]},{"statement":"What is \\`typeof function () {}\\`?","explanation":"Functions are technically callable objects, thus they are a type of an object. \\`typeof function () {}\\` will return \"function\".","type":"MCQ","options":[{"text":"\\`\"function\"\\`","correct":true},{"text":"\\`\"object\"\\`","correct":false},{"text":"\\`\"array\"\\`","correct":false},{"text":"\\`\"undefined\"\\`","correct":false}]},{"statement":"What is \\`String\\` in JavaScript?","explanation":"strings in JavaScript are immutable and have no properties/methods. When you run \\`str.length\\` or \\`str.charAt(3)\\`, \\`str\\` is coerced into the object \\`String\\` which has properties \\`length\\` and method \\`charAt\\`.","type":"MCQ","options":[{"text":"A class for constructing strings","correct":false},{"text":"One of the 5 simple primitive types in JavaScript","correct":false},{"text":"A callable object that has many properties/methods","correct":true},{"text":"None of the above","correct":false}]},{"statement":"Where is the value \\`2\\` stored in \\`var obj = {a: 2}\\`?","explanation":"Values in key-value pairs are not actually stored in the object. The object stores the key and a reference to the value. Exactly how/where it is stored is dependent on the engine implementation.","type":"MCQ","options":[{"text":"in \\`obj\\`","correct":false},{"text":"in \\`obj.a\\`","correct":false},{"text":"somewhere else that depends on the implementation","correct":true},{"text":"in \\`window\\`","correct":false}]},{"statement":"In objects, property names are always strings","explanation":"If you use any other value besides a string (primitive) as the property, it will first be converted to a string. This even includes numbers, which are commonly used as array indexes, so be careful not to confuse the use of numbers between objects and arrays.","type":"TF","correct":true},{"statement":"JavaScript classes work like Ruby's and Python's dynamic classes and unlike Java's and C++'s static classes.","explanation":"JavaScript ES6 classes are objects, which allows us to add and remove fields and methods at runtime.","type":"TF","correct":true},{"statement":"Which of the following is true about classes in JavaScript?","explanation":"By default, inheritance in JavaScript works by linking two classes (objects) together, not by copying one over to another. Class copy behavior can be emulated using the mixin pattern (both explicit and implicit), but this usually leads to ugly and brittle syntax like explicit pseudo-polymorphism (\\`OtherObj.methodName.call(this, ...)\\`), which often results in harder to understand and maintain code.","type":"MCQ","options":[{"text":"By default, when a child class inherits from a parent class, the child has a copy of the parent's behaviors.","correct":false},{"text":"By default, changing the parent's behaviors does not change the child's behaviors.","correct":false},{"text":"It's not possible to inherit behaviors in JavaScript because classes are an abstraction over objects.","correct":false},{"text":"In a child class, we can store copies of the parent's behaviors if we explicitly program them in.","correct":true}]},{"statement":"JavaScript does not provide a native mechanism for \"multiple inheritance\".","explanation":"Multiple-inheritance means that each parent class contributes definitions to the child class. JavaScript does not provide a native mechanism for \"multiple inheritance\". Many see this is a good thing, because the complexity savings more than make up for the \"reduced\" functionality. But this doesn't stop developers from trying to fake it in various ways.","type":"TF","correct":true},{"statement":"What is the main difference between an explicit mixin and an implicit mixin?","explanation":"Implicit mixin is when there isn't an explicit mixin function that copies all of the properties from the parent to the child. Rather, it is when the parent method is called with the \\`this\\` bound to the child's \\`this\\`","type":"MCQ","options":[{"text":"Explicit mixins are native to JavaScript while implicit mixins are not.","correct":false},{"text":"Explicit mixin is when the properties of the parent are copied over to the child.","correct":true},{"text":"Explicit mixins are recommended.","correct":false},{"text":"Explicit mixins are not native to Javascript while implicit mixins are.","correct":false}]},{"statement":"What is a similarity between explicit and implicit mixins?","explanation":"Implicit mixins always require absolutely referring to the parent, and explicit mixins require absolutely referring to the parent when shadowing is desired.","type":"MCQ","options":[{"text":"They are both native to JavaScript","correct":false},{"text":"They are both recommended","correct":false},{"text":"With either, you cannot always avoid absolutely (as opposed to relatively) referring to the parent","correct":true},{"text":"None of the above","correct":false}]},{"statement":"What will be logged to the console when the following code is executed: \\`\\`\\`js 'use strict' var anotherObject = { a: 2 }; var myObject = Object.create( anotherObject ); var a = 3; console.log(myObject.a); \\`\\`\\`","explanation":"\\`var myObject = Object.create( anotherObject );\\` links \\`myObject\\` with \\`anotherObject\\` via the prototype chain. If a key does not exist in \\`myObject\\`, it follows its prototype chain and looks for the key in \\`anotherObject\\`.","type":"MCQ","options":[{"text":"undefined","correct":false},{"text":"null","correct":false},{"text":"2","correct":true},{"text":"3","correct":false}]},{"statement":"A \\`for..in\\` loop only iterates over the specified object","explanation":"It also iterates over all enumerable properties in its prototype chain.","type":"TF","correct":false},{"statement":"What is logged to the console when the following code is executed: \\`\\`\\`js var anotherObject = { a: 2 }; var myObject = Object.create( anotherObject ); myObject.a++; console.log(anotherObject.a, myObject.a) \\`\\`\\`","explanation":"Though it may appear that \\`myObject.a++\\` should (via delegation) look-up and just increment the \\`anotherObject.a\\` property itself in place, instead the \\`++\\` operation corresponds to \\`myObject.a = myObject.a + 1\\`. The result is \\`\\[\\[Get\\]\\]\\` looking up a property via \\`\\[\\[Prototype\\]\\]\\` to get the current value \\`2\\` from \\`anotherObject.a\\`, incrementing the value by one, then \\`\\[\\[Put\\]\\]\\` assigning the \\`3\\` value to a new shadowed property \\`a\\` on \\`myObject\\`.","type":"MCQ","options":[{"text":"3 2","correct":false},{"text":"3 3","correct":false},{"text":"2 3","correct":true},{"text":"2 2","correct":false}]},{"statement":"It is better to think about object oriented programming in JavaScript as Object Links than Classes","explanation":"JavaScript simply does not have classes. ES6 classes are syntactic sugar on top of what are simply just objects.","type":"TF","correct":true},{"statement":"What will be logged to the console when the following code is executed: \\`\\`\\`js var Dog = { speak: function () { console.log(\"Bark\"); }, sleep: function () { console.log('sleeping...') } }; var Cat = Object.create(Dog); Cat.speak = function () { console.log(\"Meow\") }; Cat.speak() Cat.sleep() \\`\\`\\`","explanation":"\\`Cat\\` has a property \\`speak\\`, but it does not have a property \\`sleep\\`. Because \\`Cat\\` was linked to \\`Dog\\` via \\`Object.create()\\`, and \\`Dog\\` has a property \\`sleep\\`, \\`Dog\\`s \\`sleep\\` property was called.","type":"MCQ","options":[{"text":"\\`undefined\\` \\`ReferenceError\\`","correct":false},{"text":"\\`\"Meow\"\\` \\`\"sleeping...\"\\`","correct":true},{"text":"\\`\"Bark\"\\` \\`\"sleeping...\"\\`","correct":false},{"text":"\\`\"Meow\"\\` \\`ReferenceError\\`","correct":false}]},{"statement":"What is the main fundamental concept of Delegation-Oriented Design in comparison to the traditional Object-Oriented Design?","explanation":"Fundamentally, the prototype chain does not have a concept of \"copying\" or \"parent creating child\". All it does is chain objects together.","type":"MCQ","options":[{"text":"There is no idea of parent and child, just object linkages","correct":true},{"text":"Delegation-Oriented Design involves explicit and implicit mixins","correct":false},{"text":"It bridges the gap with the help of ES6 classes","correct":false},{"text":"Functions are delegated as objects","correct":false}]},{"statement":"In OLOO design, shadowing is a helpful tool used to make API design more robust","explanation":"Having name collisions creates awkward/brittle syntax to disambiguate references (see Chapter 4), and we want to avoid that if we can.","type":"TF","correct":false},{"statement":"In general, with \\`\\[\\[Prototype\\]\\]\\` delegation involved, you want state to be on the delegators, not on the delegate","explanation":"In OOD, it is easy to relatively access the state of the parent. In OLOO, this is not the case. There is no easy way to specifically access state relatively, so it makes sense to hold state on the delegators.","type":"TF","correct":true},{"statement":"If you make B linked to A, and then try to link A to B, you will get an error.","explanation":"You cannot create a cycle where two or more objects are mutually delegated (bi-directionally) to each other.","type":"TF","correct":true},{"statement":"Which statement below best describes why OLOO is a better mental model than OOD in JavaScript","explanation":"With OLOO there are just objects linked to each other, without needing all the cruft and confusion of things that look (but don't behave!) like classes, with constructors and prototypes and \\`new\\` calls. Ask yourself: if I can get the same functionality with OLOO style code as I do with \"class\" style code, but OLOO is simpler and has less things to think about, isn't OLOO better?","type":"MCQ","options":[{"text":"There are no real classes in JavaScript, so true OOD is not possible. The language naturally lends itself to OLOO given its focus on objects.","correct":true},{"text":"OLOO is a cleaner design than OOD in general","correct":false},{"text":"ES6 is not supported by all browsers","correct":false},{"text":"It's not a better mental model because OOD and OLOO are the same thing","correct":false}]}]}