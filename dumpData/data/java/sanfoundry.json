{
  "questions": [
    {
      "type": "MCQ",
      "statement": "What is the range of short data type in Java?",
      "explanation": "Short occupies 16 bits in memory. Its range is from -32768 to 32767.",
      "options": [
        { "text": "-128 to 127", "correct": false },
        { "text": "-32768 to 32767", "correct": true },
        { "text": "-2147483648 to 2147483647", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the range of byte data type in Java?",
      "explanation": "Byte occupies 8 bits in memory. Its range is from -128 to 127.",
      "options": [
        { "text": "-128 to 127", "correct": true },
        { "text": "-32768 to 32767", "correct": false },
        { "text": "-2147483648 to 2147483647", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following are legal lines of Java code?\n\n   1. int w = (int)888.8;\n   2. byte x = (byte)100L;\n   3. long y = (byte)100;\n   4. byte z = (byte)100L;",
      "explanation": "Statements (1), (2), (3), and (4) are correct. (1) is correct because when a floating-point number (a double in this case) is cast to an int, it simply loses the digits after the decimal. (2) and (4) are correct because a long can be cast into a byte. If the long is over 127, it loses its most significant (leftmost) bits. (3) actually works, even though a cast is not necessary, because a long can store a byte.",
      "options": [
        { "text": "1 and 2", "correct": false },
        { "text": "2 and 3", "correct": false },
        { "text": "3 and 4", "correct": false },
        { "text": "All statements are correct", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "An expression involving byte, int, and literal numbers is promoted to which of these?",
      "explanation": "An expression involving bytes, ints, shorts, literal numbers, the entire expression is promoted to int before any calculation is done.",
      "options": [
        { "text": "int", "correct": true },
        { "text": "long", "correct": false },
        { "text": "byte", "correct": false },
        { "text": "float", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these literals can be contained in float data type variable?",
      "explanation": "Range of float data type is -(3.4e38) To +(3.4e38)",
      "options": [
        { "text": "-1.7e+308", "correct": false },
        { "text": "-3.4e+038", "correct": true },
        { "text": "+1.7e+308", "correct": false },
        { "text": "-3.4e+050", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which data type value is returned by all transcendental math functions?",
      "explanation": "None.",
      "options": [
        { "text": "int", "correct": false },
        { "text": "float", "correct": false },
        { "text": "double", "correct": true },
        { "text": "long", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class average {\n        public static void main(String args[])\n        {\n            double num[] = {5.5, 10.1, 11, 12.8, 56.9, 2.5};\n            double result;\n            result = 0;\n            for (int i = 0; i < 6; ++i) \n                result = result + num[i];\n\t    System.out.print(result/6);\n \n        } \n    }",
      "explanation": "None.\noutput:\n$ javac average.java\n$ java average\n16.46666666666667\n",
      "options": [
        { "text": "16.34", "correct": false },
        { "text": "16.566666644", "correct": false },
        { "text": "16.46666666666667", "correct": true },
        { "text": "16.46666666666666", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java statement?\n\nclass output {\n        public static void main(String args[]) \n        {\n            double a, b,c;\n            a = 3.0/0;\n            b = 0/4.0;\n            c=0/0.0;\n \n\t    System.out.println(a);\n            System.out.println(b);\n            System.out.println(c);\n        } \n    }\n",
      "explanation": " For floating point literals, we have constant value to represent (10/0.0) infinity either positive or negative and also have NaN (not a number for undefined like 0/0.0), but for the integral type, we don’t have any constant that’s why we get an arithmetic exception.",
      "options": [
        { "text": "Infinity", "correct": false },
        { "text": "0.0", "correct": false },
        { "text": "NaN", "correct": false },
        { "text": "all of the mentioned", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class increment {\n        public static void main(String args[]) \n        {        \n             int g = 3;\n             System.out.print(++g * 8);\n        } \n    }\n",
      "explanation": "Operator ++ has more preference than *, thus g becomes 4 and when multiplied by 8 gives 32.\noutput:\n$ javac increment.java\n$ java increment\n32\n",
      "options": [
        { "text": "25", "correct": false },
        { "text": "24", "correct": false },
        { "text": "32", "correct": true },
        { "text": "33", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java code?\n\n    class area {\n        public static void main(String args[]) \n        {    \n             double r, pi, a;\n             r = 9.8;\n             pi = 3.14;\n             a = pi * r * r;\n             System.out.println(a);\n        } \n    }\n",
      "explanation": "None.\noutput:\n$ javac area.java\n$ java area\n301.5656\n",
      "options": [
        { "text": "301.5656", "correct": true },
        { "text": "301", "correct": false },
        { "text": "301.56", "correct": false },
        { "text": "301.56560000", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the numerical range of a char data type in Java?",
      "explanation": " Char occupies 16-bit in memory, so it supports 216 i:e from 0 to 65535.",
      "options": [
        { "text": "-128 to 127", "correct": false },
        { "text": "0 to 256", "correct": false },
        { "text": "0 to 32767", "correct": false },
        { "text": "0 to 65535", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these coding types is used for data type characters in Java?",
      "explanation": " Unicode defines fully international character set that can represent all the characters found in all human languages. Its range is from 0 to 65536.",
      "options": [
        { "text": "ASCII", "correct": false },
        { "text": "ISO-LATIN-1", "correct": false },
        { "text": "UNICODE", "correct": true },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these values can a boolean variable contain?",
      "explanation": " Boolean variable can contain only one of two possible values, true and false.",
      "options": [
        { "text": "True & False", "correct": true },
        { "text": "0 & 1", "correct": false },
        { "text": "Any integer value", "correct": false },
        { "text": "true", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these occupy first  0 to 127 in Unicode character set used for characters in Java?",
      "explanation": " First 0 to 127 character set in Unicode are same as those of ISO-LATIN-1 and ASCII.",
      "options": [
        { "text": "ASCII", "correct": false },
        { "text": "ISO-LATIN-1", "correct": false },
        { "text": "None of the mentioned", "correct": false },
        { "text": "ASCII and ISO-LATIN1", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which one is a valid declaration of a boolean?",
      "explanation": " Boolean can only be assigned true or false literals.",
      "options": [
        { "text": "boolean b1 = 1;", "correct": false },
        { "text": "boolean b2 = ‘false’;", "correct": false },
        { "text": "boolean b3 = false;", "correct": true },
        { "text": "boolean b4 = ‘true’", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n  class array_output {\n        public static void main(String args[]) \n        {    \n            char array_variable [] = new char[10];\n\t    for (int i = 0; i < 10; ++i) {\n                array_variable[i] = 'i';\n                System.out.print(array_variable[i] + \"\" );\n                i++;\n            }\n        } \n    }",
      "explanation": " None.\noutput:\n$ javac array_output.java\n$ java array_output\ni i i i i\n",
      "options": [
        { "text": "i i i i i", "correct": true },
        { "text": "0 1 2 3 4", "correct": false },
        { "text": "i j k l m", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class mainclass {\n        public static void main(String args[]) \n        {\n            char a = 'A';\n            a++;\n\t    System.out.print((int)a);\n        } \n    }",
      "explanation": "ASCII value of ‘A’ is 65, on using ++ operator character value increments by one.\noutput:\n$ javac mainclass.java\n$ java mainclass\n66\n",
      "options": [
        { "text": "66", "correct": true },
        { "text": "67", "correct": false },
        { "text": "65", "correct": false },
        { "text": "64", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class mainclass {\n        public static void main(String args[]) \n        {\n            boolean var1 = true;\n\t    boolean var2 = false;\n\t    if (var1)\n\t        System.out.println(var1);\n\t    else\n\t        System.out.println(var2);\n       } \n    }",
      "explanation": "None.\noutput:\n$ javac mainclass.java\n$ java mainclass\ntrue\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "true", "correct": true },
        { "text": "false", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class booloperators {\n        public static void main(String args[]) \n        {\n            boolean var1 = true;\n\t    boolean var2 = false;\n\t    System.out.println((var1 & var2));\n        } \n    }",
      "explanation": " boolean ‘&’ operator always returns true or false. var1 is defined true and var2 is defined false hence their ‘&’ operator result is false.\noutput:\n$ javac booloperators.java\n$ java booloperators\nfalse\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "true", "correct": false },
        { "text": "false", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java code?\n\n    class asciicodes {\n        public static void main(String args[]) \n        {\n            char var1 = 'A';\n\t    char var2 = 'a';\n\t    System.out.println((int)var1 + \" \" + (int)var2);\n        } \n    }",
      "explanation": "ASCII code for ‘A’ is 65 and for ‘a’ is 97.\noutput:\n$ javac asciicodes.java\n$ java asciicodes\n65 97\n",
      "options": [
        { "text": "162", "correct": false },
        { "text": "65 97", "correct": true },
        { "text": "67 95", "correct": false },
        { "text": "66 98", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the order of variables in Enum?",
      "explanation": "The compareTo() method is implemented to order the variable in ascending order.",
      "options": [
        { "text": "Ascending order", "correct": true },
        { "text": "Descending order", "correct": false },
        { "text": "Random order", "correct": false },
        { "text": "Depends on the order() method", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Can we create an instance of Enum outside of Enum itself?",
      "explanation": "Enum does not have a public constructor.",
      "options": [
        { "text": "True", "correct": false },
        { "text": "False", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    enum Season \n    {\n        WINTER, SPRING, SUMMER, FALL\n    };\n    System.out.println(Season.WINTER.ordinal());\n",
      "explanation": "ordinal() method provides number to the variables defined in Enum.",
      "options": [
        { "text": "0", "correct": true },
        { "text": "1", "correct": false },
        { "text": "2", "correct": false },
        { "text": "3", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "If we try to add Enum constants to a TreeSet, what sorting order will it use?",
      "explanation": "Tree Set will sort the values in the order in which Enum constants are declared.",
      "options": [
        {
          "text": "Sorted in the order of declaration of Enums",
          "correct": true
        },
        { "text": "Sorted in alphabetical order of Enums", "correct": false },
        { "text": "Sorted based on order() method", "correct": false },
        {
          "text": "Sorted in descending order of names of Enums",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code snippet?\n\nclass A\n{\n \n}\n \nenum Enums extends A\n{\n    ABC, BCD, CDE, DEF;\n}\n",
      "explanation": "Enum types cannot extend class.",
      "options": [
        { "text": "Runtime Error", "correct": false },
        { "text": "Compilation Error", "correct": true },
        { "text": "It runs successfully", "correct": false },
        { "text": "EnumNotDefined Exception", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code snippet?\n\n enum Levels \n{\n    private TOP,\n \n    public MEDIUM,\n \n    protected BOTTOM;\n}\n",
      "explanation": "Enum cannot have any modifiers. They are public, static and final by default.",
      "options": [
        { "text": "Runtime Error", "correct": false },
        { "text": "EnumNotDefined Exception", "correct": false },
        { "text": "It runs successfully", "correct": false },
        { "text": "Compilation Error", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code snippet?\n\nenum Enums\n{\n    A, B, C;\n \n    private Enums()\n    {\n        System.out.println(10);\n    }\n}\n \npublic class MainClass\n{\n    public static void main(String[] args)\n    {\n        Enum en = Enums.B;\n    }\n}\n",
      "explanation": "The constructor of Enums is called which prints 10.",
      "options": [
        { "text": "\n   10\n   10\n   10\n", "correct": true },
        { "text": "Compilation Error", "correct": false },
        { "text": "\n   10\n   10\n", "correct": false },
        { "text": "Runtime Exception", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which method returns the elements of Enum class?",
      "explanation": "getEnumConstants() returns the elements of this enum class or null if this Class object does not represent an enum type.",
      "options": [
        { "text": "getEnums()", "correct": false },
        { "text": "getEnumConstants()", "correct": true },
        { "text": "getEnumList()", "correct": false },
        { "text": "getEnum()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which class does all the Enums extend?",
      "explanation": "All enums implicitly extend java.lang.Enum. Since Java does not support multiple inheritance, an enum cannot extend anything else.",
      "options": [
        { "text": "Object", "correct": false },
        { "text": "Enums", "correct": false },
        { "text": "Enum", "correct": true },
        { "text": "EnumClass", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " Are enums are type-safe?",
      "explanation": "Enums are type-safe as they have own name-space.",
      "options": [
        { "text": "True", "correct": true },
        { "text": "False", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is the advantage of BigDecimal over double?",
      "explanation": "BigDecimal has unnatural syntax, needs more memory and creates a great amount of garbage. But it has a high precision which is useful for some calculations like money.",
      "options": [
        { "text": "Syntax", "correct": false },
        { "text": "Memory usage", "correct": false },
        { "text": "Garbage creation", "correct": false },
        { "text": "Precision", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the below data type doesn’t support overloaded methods for +,-,* and /?",
      "explanation": "int, float, double provide overloaded methods for +,-,* and /. BigDecimal does not provide these overloaded methods.",
      "options": [
        { "text": "int", "correct": false },
        { "text": "float", "correct": false },
        { "text": "double", "correct": false },
        { "text": "BigDecimal", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code snippet?\n\n   double a = 0.02;\n   double b = 0.03;\n   double c = b - a;\n   System.out.println(c);\n \n   BigDecimal _a = new BigDecimal(\"0.02\");\n   BigDecimal _b = new BigDecimal(\"0.03\");\n   BigDecimal _c = b.subtract(_a);\n   System.out.println(_c);\n",
      "explanation": "BigDecimal provides more precision as compared to double. Double is faster in terms of performance as compared to BigDecimal.",
      "options": [
        { "text": "\n   0.009999999999999998\n   0.01", "correct": true },
        { "text": "\n   0.01\n   0.009999999999999998", "correct": false },
        { "text": "\n   0.01\n   0.01", "correct": false },
        {
          "text": "\n   0.009999999999999998\n   0.009999999999999998",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the base of BigDecimal data type?",
      "explanation": "A BigDecimal is n*10^scale where n is an arbitrary large signed integer. Scale can be thought of as the number of digits to move the decimal point to left or right.",
      "options": [
        { "text": "Base 2", "correct": false },
        { "text": "Base 8", "correct": false },
        { "text": "Base 10", "correct": true },
        { "text": "Base e", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the limitation of toString() method of BigDecimal?",
      "explanation": "toString() of BigDecimal uses scientific notation to represent numbers known as canonical representation. We must use toPlainString() to avoid scientific notation.",
      "options": [
        { "text": "There is no limitation", "correct": false },
        { "text": "toString returns null", "correct": false },
        {
          "text": "toString returns the number in expanded form",
          "correct": false
        },
        { "text": "toString uses scientific notation", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is not provided by BigDecimal?",
      "explanation": "toBigInteger() converts BigDecimal to a BigInteger.toBigIntegerExact() converts this BigDecimal to a BigInteger by checking for lost information.",
      "options": [
        { "text": "scale manipulation", "correct": false },
        { "text": "+ operator", "correct": true },
        { "text": "rounding", "correct": false },
        { "text": "hashing", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "BigDecimal is a part of which package?",
      "explanation": "BigDecimal is a part of java.math. This package provides various classes for storing numbers and mathematical operations.",
      "options": [
        { "text": "java.lang", "correct": false },
        { "text": "java.math", "correct": true },
        { "text": "java.util", "correct": false },
        { "text": "java.io", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is BigDecimal.ONE?",
      "explanation": "BigDecimal.ONE is a static variable of BigDecimal class with value 1 on scale 0.",
      "options": [
        { "text": "wrong statement", "correct": false },
        { "text": "custom defined statement", "correct": false },
        {
          "text": "static variable with value 1 on scale 10",
          "correct": false
        },
        { "text": "static variable with value 1 on scale 0", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which class is a library of functions to perform arithmetic operations of BigInteger and BigDecimal?",
      "explanation": "MathContext class is a library of functions to perform arithmetic operations of BigInteger and BigDecimal.",
      "options": [
        { "text": "MathContext", "correct": true },
        { "text": "MathLib", "correct": false },
        { "text": "BigLib", "correct": false },
        { "text": "BigContext", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java code snippet?\n\npublic class AddDemo \n{\n\tpublic static void main(String args[]) \n        {\n\t\tBigDecimal b = new BigDecimal(\"23.43\");\n\t\tBigDecimal br = new BigDecimal(\"24\");\n\t\tBigDecimal bres = b.add(new BigDecimal(\"450.23\"));\n\t\tSystem.out.println(\"Add: \"+bres);\n \n\t\tMathContext mc = new MathContext(2, RoundingMode.DOWN);\n\t\tBigDecimal bdecMath = b.add(new BigDecimal(\"450.23\"), mc);\n\t\tSystem.out.println(\"Add using MathContext: \"+bdecMath);\n\t}\n}",
      "explanation": "add() adds the two numbers, MathContext provides library for carrying out various arithmetic operations.",
      "options": [
        { "text": "Compilation failure", "correct": false },
        {
          "text": "\nAdd: 473.66\nAdd using MathContext: 4.7E+2",
          "correct": true
        },
        {
          "text": "\nAdd 4.7E+2\nAdd using MathContext: 473.66",
          "correct": false
        },
        { "text": "Runtime exception", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "How to format date from one form to another?",
      "explanation": "SimpleDateFormat can be used as\nDate now = new Date();\nSimpleDateFormat sdf = new SimpleDateFormat (\"yyyy-mm-dd'T'hh:MM:ss\");\nString nowStr = sdf.format(now);\nSystem.out.println(\"Current Date: \" + );",
      "options": [
        { "text": "SimpleDateFormat", "correct": true },
        { "text": "DateFormat", "correct": false },
        { "text": "SimpleFormat", "correct": false },
        { "text": "DateConverter", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "How to convert Date object to String?",
      "explanation": "SimpleDateFormat takes a string containing pattern. sdf.format converts the Date object to String.",
      "options": [
        {
          "text": "SimpleDateFormat sdf = new SimpleDateFormat('yyyy-mm-dd');\nsdf.parse(new Date());",
          "correct": false
        },
        {
          "text": "SimpleDateFormat sdf = new SimpleDateFormat('yyyy-mm-dd');\nsdf.format(new Date());",
          "correct": true
        },
        {
          "text": "SimpleDateFormat sdf = new SimpleDateFormat('yyyy-mm-dd');\nnew Date().parse();",
          "correct": false
        },
        {
          "text": "SimpleDateFormat sdf = new SimpleDateFormat('yyyy-mm-dd');\nnew Date().format();",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "How to convert a String to a Date object?",
      "explanation": "SimpleDateFormat takes a string containing pattern. sdf.parse converts the String to Date object.",
      "options": [
        {
          "text": "\nSimpleDateFormat sdf = new SimpleDateFormat('yyyy-mm-dd');\nsdf.parse(new Date());",
          "correct": true
        },
        {
          "text": "\nSimpleDateFormat sdf = new SimpleDateFormat('yyyy-mm-dd');\nsdf.format(new Date());",
          "correct": false
        },
        {
          "text": "\nSimpleDateFormat sdf = new SimpleDateFormat'yyyy-mm-dd');\nnew Date().parse();",
          "correct": false
        },
        {
          "text": "\nSimpleDateFormat sdf = new SimpleDateFormat('yyyy-mm-dd');\nnew Date().format();",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Is SimpleDateFormat thread safe?",
      "explanation": "SimpleDateFormat is not thread safe. In the multithreaded environment, we need to manage threads explicitly.",
      "options": [
        { "text": "True", "correct": false },
        { "text": "False", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "How to identify if a timezone is eligible for DayLight Saving?",
      "explanation": "public abstract boolean useDaylightTime() is provided in TimeZone class.",
      "options": [
        { "text": "useDaylightTime() of Time class", "correct": false },
        { "text": "useDaylightTime() of Date class", "correct": false },
        { "text": "useDaylightTime() of TimeZone class", "correct": true },
        { "text": "useDaylightTime() of DateTime class", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the replacement of joda time library in java 8?",
      "explanation": "In java 8, we are asked to migrate to java.time (JSR-310) which is a core part of the JDK which replaces joda library project.",
      "options": [
        { "text": "java.time (JSR-310)", "correct": true },
        { "text": "java.date (JSR-310)", "correct": false },
        { "text": "java.joda", "correct": false },
        { "text": "java.jodaTime", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "How is Date stored in database?",
      "explanation": "java.sql.Date is the datatype of Date stored in database.",
      "options": [
        { "text": "java.sql.Date", "correct": true },
        { "text": "java.util.Date", "correct": false },
        { "text": "java.sql.DateTime", "correct": false },
        { "text": "java.util.DateTime", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What does LocalTime represent?",
      "explanation": "LocalTime of joda library represents time without date.",
      "options": [
        { "text": "Date without time", "correct": false },
        { "text": "Time without Date", "correct": true },
        { "text": "Date and Time", "correct": false },
        { "text": "Date and Time with timezone", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "How to get difference between two dates?",
      "explanation": "Java 8 provides a method called between which provides Duration between two times.",
      "options": [
        {
          "text": "long diffInMilli = java.time.Duration.between(dateTime1, dateTime2).toMillis();",
          "correct": true
        },
        {
          "text": "long diffInMilli = java.time.difference(dateTime1, dateTime2).toMillis();",
          "correct": false
        },
        {
          "text": "Date diffInMilli = java.time.Duration.between(dateTime1, dateTime2).toMillis();",
          "correct": false
        },
        {
          "text": "Time diffInMilli = java.time.Duration.between(dateTime1, dateTime2).toMillis();",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " How to get UTC time?",
      "explanation": "In java 8, Instant.now() provides current time in UTC/GMT.",
      "options": [
        { "text": "Time.getUTC();", "correct": false },
        { "text": "Date.getUTC();", "correct": false },
        { "text": "Instant.now();", "correct": true },
        { "text": "TimeZone.getUTC();", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is long data type literal?",
      "explanation": "Data type long literals are appended by an upper or lowercase L. 0x99fffL is hexadecimal long literal.",
      "options": [
        { "text": "0x99fffL", "correct": true },
        { "text": "ABCDEFG", "correct": false },
        { "text": "0x99fffa", "correct": false },
        { "text": "99671246", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these can be returned by the operator &?",
      "explanation": " We can use binary ampersand operator on integers/chars (and it returns an integer) or on booleans (and it returns a boolean).",
      "options": [
        { "text": "Integer", "correct": false },
        { "text": "Boolean", "correct": false },
        { "text": "Character", "correct": false },
        { "text": "Integer or Boolean", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Literals in java must be appended by which of these?",
      "explanation": "Data type long literals are appended by an upper or lowercase L.",
      "options": [
        { "text": "L", "correct": false },
        { "text": "l", "correct": false },
        { "text": "D", "correct": false },
        { "text": "L and I", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Literal can be of which of these data types?",
      "explanation": "None",
      "options": [
        { "text": "integer", "correct": false },
        { "text": "float", "correct": false },
        { "text": "boolean", "correct": false },
        { "text": "all of the mentioned", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these can not be used for a variable name in Java?",
      "explanation": "Keywords are specially reserved words which can not be used for naming a user defined variable, example: class, int, for etc.",
      "options": [
        { "text": "identifier", "correct": false },
        { "text": "keyword", "correct": true },
        { "text": "identifier & keyword", "correct": false },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class evaluate \n    {\n        public static void main(String args[]) \n        {\n            int a[] = {1,2,3,4,5};\n\t    int d[] = a;\n\t    int sum = 0;\n\t    for (int j = 0; j < 3; ++j)\n                sum += (a[j] * d[j + 1]) + (a[j + 1] * d[j]);\n\t    System.out.println(sum);\n        } \n    }\n",
      "explanation": "None.\noutput:\n$ javac evaluate.java\n$ java evaluate\n40\n",
      "options": [
        { "text": "38", "correct": false },
        { "text": "39", "correct": false },
        { "text": "40", "correct": true },
        { "text": "41", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class array_output \n    {\n        public static void main(String args[]) \n        {\n       \t    int array_variable [] = new int[10];\n\t    for (int i = 0; i < 10; ++i) {\n                array_variable[i] = i/2;\n                array_variable[i]++;\n                System.out.print(array_variable[i] + \" \");\n                i++;\n            }\n \n        } \n    }\n",
      "explanation": "When an array is declared using new operator then all of its elements are initialized to 0 automatically. for loop body is executed 5 times as whenever controls comes in the loop i value is incremented twice, first by i++ in body of loop then by ++i in increment condition of for loop.\noutput:\n$ javac array_output.java\n$ java array_output\n1 2 3 4 5\n",
      "options": [
        { "text": "0 2 4 6 8", "correct": false },
        { "text": "1 2 3 4 5", "correct": true },
        { "text": "0 1 2 3 4 5 6 7 8 9", "correct": false },
        { "text": "1 2 3 4 5 6 7 8 9 10", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class variable_scope \n    {\n        public static void main(String args[]) \n        {\n            int x;\n            x = 5;\n            {\n\t        int y = 6;\n\t        System.out.print(x + \" \" + y);\n            }\n            System.out.println(x + \" \" + y);\n        } \n    }\n",
      "explanation": "Second print statement doesn’t have access to y , scope y was limited to the block defined after initialization of x.\noutput:\n$ javac variable_scope.java\nException in thread \"main\" java.lang.Error: Unresolved compilation problem: y cannot be resolved to a variable\n",
      "options": [
        { "text": "5 6 5 6", "correct": false },
        { "text": "5 6 5", "correct": false },
        { "text": "Runtime error", "correct": false },
        { "text": "Compilation error", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is an incorrect string literal?",
      "explanation": "All string literals must begin and end in the same line.",
      "options": [
        { "text": "“Hello World”", "correct": false },
        { "text": "“Hello\\nWorld”", "correct": false },
        { "text": "“\\”Hello World\\””", "correct": false },
        { "text": "\n\"Hello\nworld\"\n", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class dynamic_initialization \n    {\n        public static void main(String args[]) \n        {\n            double a, b;\n            a = 3.0;\n            b = 4.0;\n\t    double c = Math.sqrt(a * a + b * b);\n\t    System.out.println(c);\n        } \n    }\n",
      "explanation": "Variable c has been dynamically initialized to square root of a * a + b * b, during run time.\noutput:\n$ javac dynamic_initialization.java\n$ java dynamic_initialization\n5.0\n",
      "options": [
        { "text": "5.0", "correct": true },
        { "text": "25.0", "correct": false },
        { "text": "7.0", "correct": false },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is necessary condition for automatic type conversion in Java?",
      "explanation": "None.",
      "options": [
        {
          "text": "The destination type is smaller than source type",
          "correct": false
        },
        {
          "text": "The destination type is larger than source type",
          "correct": true
        },
        {
          "text": "The destination type can be larger or smaller than source type",
          "correct": false
        },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the prototype of the default constructor of this Java class?\n\n    public class prototype { }\n",
      "explanation": "None.",
      "options": [
        { "text": "prototype( )", "correct": false },
        { "text": "prototype(void)", "correct": false },
        { "text": "public prototype(void)", "correct": false },
        { "text": "public prototype( )", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the error in the following Java code?\n\n    byte b = 50;\n    b = b * 50;\n",
      "explanation": "While evaluating an expression containing int,  bytes or shorts, the whole expression is converted to int then evaluated and the result is also of type int.",
      "options": [
        {
          "text": "b cannot contain value 100, limited by its range",
          "correct": false
        },
        {
          "text": "* operator has converted b * 50 into int, which can not be converted to byte without casting",
          "correct": true
        },
        { "text": "b cannot contain value 50", "correct": false },
        { "text": "No error in this code", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "If an expression contains double, int, float, long, then the whole expression will be promoted into which of these data types?",
      "explanation": "If any operand is double the result of an expression is double.",
      "options": [
        { "text": "long", "correct": false },
        { "text": "int", "correct": false },
        { "text": "double", "correct": true },
        { "text": "float", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is Truncation is Java?",
      "explanation": "None.",
      "options": [
        {
          "text": "Floating-point value assigned to an integer type",
          "correct": true
        },
        { "text": "Integer value assigned to floating type", "correct": false },
        {
          "text": "Floating-point value assigned to an Floating type",
          "correct": false
        },
        { "text": "Integer value assigned to floating type", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class char_increment \n    {\n        public static void main(String args[]) \n        {\n            char c1 = 'D';\n            char c2 = 84;\n            c2++;\n            c1++;\n            System.out.println(c1 + \" \"  + c2);\n        } \n    }\n",
      "explanation": "Operator ++ increments the value of character by 1. c1 and c2 are given values D and 84, when we use ++ operator their values increments by 1, c1 and c2 becomes E and U respectively.\noutput:\n$ javac char_increment.java\n$ java char_increment\nE U\n",
      "options": [
        { "text": "E U", "correct": true },
        { "text": "U E", "correct": false },
        { "text": "V E", "correct": false },
        { "text": "U F", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class conversion \n    {\n        public static void main(String args[]) \n        {\n            double a = 295.04;\n            int  b = 300;\n            byte c = (byte) a;\n            byte d = (byte) b;\n            System.out.println(c + \" \"  + d);\n        } \n    }\n",
      "explanation": "Type casting a larger variable into a smaller variable results in modulo of larger variable by range of smaller variable. b contains 300 which is larger than byte’s range i:e -128 to 127 hence d contains 300 modulo 256 i:e 44.\noutput:\n$ javac conversion.java\n$ java conversion\n39 44\n",
      "options": [
        { "text": "38 43", "correct": false },
        { "text": "39 44", "correct": true },
        { "text": "295 300", "correct": false },
        { "text": "295.04 300", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class A \n    {\n        final public int calculate(int a, int b) { return 1; } \n    } \n    class B extends A \n    { \n        public int calculate(int a, int b) { return 2; } \n    } \n     public class output \n     {\n        public static void main(String args[]) \n        { \n            B object = new B(); \n            System.out.print(\"b is \" + b.calculate(0, 1));  \n        } \n    }\n\n",
      "explanation": "The code does not compile because the method calculate() in class A is final and so cannot be overridden by method of class b.",
      "options": [
        { "text": "b is : 2", "correct": false },
        { "text": "b is : 1", "correct": false },
        { "text": "Compilation Error", "correct": true },
        { "text": "An exception is thrown at runtime", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program, if we run as “java main_arguments 1 2 3”?\n\n    class main_arguments \n    {\n        public static void main(String [] args) \n        {\n            String [][] argument = new String[2][2];\n            int x;\n            argument[0] = args;\n            x = argument[0].length;\n            for (int y = 0; y < x; y++) \n                System.out.print(\" \" + argument[0][y]);              \n        }\n    }\n",
      "explanation": " In argument[0] = args;, the reference variable arg[0], which was referring to an array with two elements, is reassigned to an array (args) with three elements.\nOutput:\n$ javac main_arguments.java\n$ java main_arguments\n1 2 3\n",
      "options": [
        { "text": "1 1", "correct": false },
        { "text": "1 0", "correct": false },
        { "text": "1 0 3", "correct": false },
        { "text": "1 2 3", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class c \n    {    \n        public void main( String[] args ) \n        {  \n            System.out.println( \"Hello\" + args[0] ); \n        } \n    }\n",
      "explanation": "A runtime error will occur owning to the main method of the code fragment not being declared static.\nOutput:\n$ javac c.java\nException in thread \"main\" java.lang.NoSuchMethodError: main\n",
      "options": [
        { "text": "Hello c", "correct": false },
        { "text": "Hello", "correct": false },
        { "text": "Hello world", "correct": false },
        { "text": "Runtime Error", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these operators is used to allocate memory to array variable in Java?",
      "explanation": "Operator new allocates a block of memory specified by the size of an array, and gives the reference of memory allocated to the array variable.",
      "options": [
        { "text": "malloc", "correct": false },
        { "text": "alloc", "correct": false },
        { "text": "new", "correct": true },
        { "text": "new malloc", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is an incorrect array declaration?",
      "explanation": "Operator new must be succeeded by array type and array size.",
      "options": [
        { "text": "int arr[] = new int[5] ", "correct": false },
        { "text": "int [] arr = new int[5] ", "correct": false },
        { "text": "int arr[] = new int[5] ", "correct": false },
        { "text": "int arr[] = int [5] new", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    int arr[] = new int [5];\n    System.out.print(arr);\n",
      "explanation": " If we trying to print any reference variable internally, toString() will be called which is implemented to return the String in following form:,\nclassname@hashcode in hexadecimal form",
      "options": [
        { "text": "0", "correct": false },
        { "text": "value stored in arr[0] ", "correct": false },
        { "text": "00000", "correct": false },
        { "text": "Class name@ hashcode in hexadecimal form", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is an incorrect Statement?",
      "explanation": "Array can be initialized using both new and comma separated expressions surrounded by curly braces example : int arr[5] = new int[5]; and int arr[] = { 0, 1, 2, 3, 4};",
      "options": [
        {
          "text": "It is necessary to use new operator to initialize an array",
          "correct": true
        },
        {
          "text": "Array can be initialized using comma separated expressions surrounded by curly braces",
          "correct": false
        },
        {
          "text": "Array can be initialized when they are declared",
          "correct": false
        },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is necessary to specify at time of array initialization?",
      "explanation": "None.",
      "options": [
        { "text": "Row", "correct": true },
        { "text": "Column", "correct": false },
        { "text": "Both Row and Column", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class array_output \n    {\n        public static void main(String args[]) \n        {\n            int array_variable [] = new int[10];\n\t    for (int i = 0; i < 10; ++i) \n            {\n                array_variable[i] = i;\n                System.out.print(array_variable[i] + \" \");\n                i++;\n            }\n        } \n    }\n",
      "explanation": "When an array is declared using new operator then all of its elements are initialized to 0 automatically. for loop body is executed 5 times as whenever controls comes in the loop i value is incremented twice, first by i++ in body of loop then by ++i in increment condition of for loop.\noutput:\n$ javac array_output.java\n$ java array_output\n0 2 4 6 8\n",
      "options": [
        { "text": "0 2 4 6 8", "correct": true },
        { "text": "1 3 5 7 9", "correct": false },
        { "text": "0 1 2 3 4 5 6 7 8 9", "correct": false },
        { "text": "1 2 3 4 5 6 7 8 9 10", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class multidimention_array \n    {\n        public static void main(String args[])\n        {\n            int arr[][] = new int[3][];\n            arr[0] = new int[1];\n            arr[1] = new int[2];\n            arr[2] = new int[3];               \n\t    int sum = 0;\n\t    for (int i = 0; i < 3; ++i) \n\t        for (int j = 0; j < i + 1; ++j)\n                    arr[i][j] = j + 1;\n\t    for (int i = 0; i < 3; ++i) \n\t        for (int j = 0; j < i + 1; ++j)\n                    sum + = arr[i][j];\n\t    System.out.print(sum); \t\n        } \n    }\n",
      "explanation": "arr[][] is a 2D array, array has been allotted memory in parts. 1st row contains 1 element, 2nd row contains 2 elements and 3rd row contains 3 elements. each element of array is given i + j value in loop. sum contains addition of all the elements of the array.\noutput:\n$ javac multidimention_array.java\n$ java multidimention_array\n10\n",
      "options": [
        { "text": "11", "correct": false },
        { "text": "10", "correct": true },
        { "text": "13", "correct": false },
        { "text": "14", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class evaluate \n    {\n        public static void main(String args[]) \n            {\n\t        int arr[] = new int[] {0 , 1, 2, 3, 4, 5, 6, 7, 8, 9};\n\t        int n = 6;\n                n = arr[arr[n] / 2];\n\t        System.out.println(arr[n] / 2);\n            } \n    }\n",
      "explanation": "Array arr contains 10 elements. n contains 6 thus in next line n is given value 3 printing arr[3]/2 i:e 3/2 = 1 because of int Value, by int values there is no rest. If this values would be float the result would be 1.5.\noutput:\n$ javac evaluate.java\n$ java evaluate\n1\n",
      "options": [
        { "text": "3", "correct": false },
        { "text": "0", "correct": false },
        { "text": "6", "correct": false },
        { "text": "1", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class array_output \n    {\n        public static void main(String args[]) \n        {\n            char array_variable [] = new char[10];\n\t    for (int i = 0; i < 10; ++i) \n            {\n                array_variable[i] = 'i';\n                System.out.print(array_variable[i] + \"\");\n            }\n        } \n    }\n",
      "explanation": "None.\noutput:\n$ javac array_output.java\n$ java array_output\ni i i i i i i i i i\n",
      "options": [
        { "text": "1 2 3 4 5 6 7 8 9 10", "correct": false },
        { "text": "0 1 2 3 4 5 6 7 8 9 10", "correct": false },
        { "text": "i j k l m n o p q r", "correct": false },
        { "text": "i i i i i i i i i i", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java code?\n\n    class array_output \n    {\n        public static void main(String args[]) \n        {\n            int array_variable[][] = {{ 1, 2, 3}, { 4 , 5, 6}, { 7, 8, 9}};\n            int sum = 0;\n            for (int i = 0; i < 3; ++i)\n                for (int j = 0; j <  3 ; ++j)\n                    sum = sum + array_variable[i][j];\n            System.out.print(sum / 5);\n        } \n    }\n",
      "explanation": "None.\noutput:\n$ javac array_output.java\n$ java array_output\n9\n",
      "options": [
        { "text": "8", "correct": false },
        { "text": "9", "correct": true },
        { "text": "10", "correct": false },
        { "text": "11", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the type of variable ‘b’ and ‘d’ in the following Java snippet?\n\nint a[], b;\nint []c, d;\n",
      "explanation": " If [] is declared after variable it is applicable only to one variable. If [] is declared before variable it is applicable to all the variables.",
      "options": [
        { "text": "‘b’ and ‘d’ are int", "correct": false },
        { "text": "‘b’ and ‘d’ are arrays of type int", "correct": false },
        { "text": "‘b’ is int variable; ‘d’ is int array", "correct": true },
        { "text": "‘d’ is int variable; ‘b’ is int array", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is an incorrect array declaration?",
      "explanation": "Operator new must be succeeded by array type and array size. The order is important and determines the type of variable.",
      "options": [
        { "text": "int arr[] = new int[5] ;", "correct": false },
        { "text": "int [] arr = new int[5] ;", "correct": false },
        { "text": "\nint arr[];\narr = new int[5];\n", "correct": false },
        { "text": "int arr[] = int [5] new;", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\nint arr[] = new int [5];\nSystem.out.print(arr);\n",
      "explanation": "arr is an array variable, it is pointing to array of integers. Printing arr will print garbage value. It is not same as printing arr[0].",
      "options": [
        { "text": "0", "correct": false },
        { "text": "value stored in arr[0].", "correct": false },
        { "text": "00000", "correct": false },
        { "text": "Garbage value", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code snippet?\n\nObject[] names = new String[3];\nnames[0] = new Integer(0);\n",
      "explanation": "ArrayIndexOutOfBoundsException comes when code tries to access an invalid index for a given array. ArrayStoreException comes when you have stored an element of type other than the type of array.",
      "options": [
        { "text": "ArrayIndexOutOfBoundsException", "correct": false },
        { "text": "ArrayStoreException", "correct": true },
        { "text": "Compilation Error", "correct": false },
        { "text": "Code runs successfully", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Generics does not work with?",
      "explanation": "Generics gives the flexibility to strongly typecast collections. Generics is applicable to Set, List and Tree. It is not applicable to Array.",
      "options": [
        { "text": "Set", "correct": false },
        { "text": "List", "correct": false },
        { "text": "Tree", "correct": false },
        { "text": "Array", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "How to sort an array?",
      "explanation": "Arrays class contains various methods for manipulating arrays (such as sorting and searching). Array is not a valid class.",
      "options": [
        { "text": "Array.sort()", "correct": false },
        { "text": "Arrays.sort()", "correct": true },
        { "text": "Collection.sort()", "correct": false },
        { "text": "System.sort()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "How to copy contents of array?",
      "explanation": "Arrays class contains various methods for manipulating arrays (such as sorting and searching). Array is not a valid class.",
      "options": [
        { "text": "System.arrayCopy()", "correct": true },
        { "text": "Array.copy()", "correct": false },
        { "text": "Arrays.copy()", "correct": false },
        { "text": "Collection.copy()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Can you make an array volatile?",
      "explanation": "You can only make variable pointing to array volatile. If an array is changed by replacing individual elements then guarantee provided by volatile variable will not be held.",
      "options": [
        { "text": "True", "correct": true },
        { "text": "False", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Where is an array stored in memory?",
      "explanation": " Array is stored in heap space. Whenever an object is created, it’s always stored in the Heap space and stack memory contains the reference to it.",
      "options": [
        { "text": "heap space", "correct": true },
        { "text": "stack space", "correct": false },
        { "text": "heap space and stack space", "correct": false },
        { "text": "first generation memory", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " An array elements are always stored in ________ memory locations.",
      "explanation": " Array elements are stored in contiguous memory. Linked List is stored in random memory locations.",
      "options": [
        { "text": "Sequential", "correct": true },
        { "text": "Random", "correct": false },
        { "text": "Sequential and Random", "correct": false },
        { "text": "Binary search", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following can be operands of arithmetic operators?",
      "explanation": "The operand of arithmetic operators can be any of numeric or character type, But not boolean.",
      "options": [
        { "text": "Numeric", "correct": false },
        { "text": "Boolean", "correct": false },
        { "text": "Characters", "correct": false },
        { "text": "Both Numeric & Characters", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Modulus operator, %, can be applied to which of these?",
      "explanation": "Modulus operator can be applied to both integers and floating point numbers.",
      "options": [
        { "text": "Integers", "correct": false },
        { "text": "Floating – point numbers", "correct": false },
        {
          "text": "Both Integers and floating – point numbers",
          "correct": true
        },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "With x = 0, which of the following are legal lines of Java code for changing the value of x to 1?\n\n   1. x++;\n   2. x = x + 1;\n   3. x += 1;\n   4. x =+ 1;\n",
      "explanation": "Operator ++ increases value of variable by 1. x = x + 1 can also be written in shorthand form as x += 1. Also x =+ 1 will set the value of x to 1.",
      "options": [
        { "text": "1, 2 & 3", "correct": false },
        { "text": "1 & 4", "correct": false },
        { "text": "1, 2, 3 & 4", "correct": true },
        { "text": "3 & 2", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Decrement operator, −−, decreases the value of variable by what number?",
      "explanation": "None.",
      "options": [
        { "text": "1", "correct": true },
        { "text": "2", "correct": false },
        { "text": "3", "correct": false },
        { "text": "4", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these statements are incorrect?",
      "explanation": "None.",
      "options": [
        {
          "text": "Assignment operators are more efficiently implemented by Java run-time system than their equivalent long forms",
          "correct": false
        },
        {
          "text": "Assignment operators run faster than their equivalent long forms",
          "correct": false
        },
        {
          "text": "Assignment operators can be used only with numeric and character data type",
          "correct": false
        },
        { "text": "None of the mentioned", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class increment \n    {\n        public static void main(String args[])\n        {\n            double var1 = 1 + 5; \n            double var2 = var1 / 4;\n            int var3 = 1 + 5;\n            int var4 = var3 / 4;\n            System.out.print(var2 + \" \" + var4);\n \n        } \n    }\n",
      "explanation": "None\noutput:\n$ javac increment.java\n$ java increment\n1.5 1\n",
      "options": [
        { "text": "1 1", "correct": false },
        { "text": "0 1", "correct": false },
        { "text": "1.5 1", "correct": true },
        { "text": "1.5 1.0", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Modulus \n    {\n        public static void main(String args[]) \n        {    \n             double a = 25.64;\n             int  b = 25;\n             a = a % 10;\n             b = b % 10;\n             System.out.println(a + \" \"  + b);\n        } \n    }\n",
      "explanation": "Modulus operator returns the remainder of a division operation on the operand. a = a % 10 returns 25.64 % 10 i:e 5.640000000000001. Similarly b = b % 10 returns 5.\noutput:\n$ javac Modulus.java\n$ java Modulus\n5.640000000000001 5\n",
      "options": [
        { "text": "5.640000000000001 5", "correct": true },
        { "text": "5.640000000000001 5.0", "correct": false },
        { "text": "5 5", "correct": false },
        { "text": "5 5.640000000000001", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class increment \n    {\n        public static void main(String args[]) \n        {        \n             int g = 3;\n             System.out.print(++g * 8);\n        } \n    }\n",
      "explanation": "Operator ++ has more preference than *, thus g becomes 4 and when multiplied by 8 gives 32.\noutput:\n$ javac increment.java\n$ java increment\n32\n",
      "options": [
        { "text": "25", "correct": false },
        { "text": "24", "correct": false },
        { "text": "32", "correct": true },
        { "text": "33", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Can 8 byte long data type be automatically type cast to 4 byte float data type?",
      "explanation": "Both data types have different memory representation that’s why 8-byte integral data type can be stored to 4-byte floating point data type.",
      "options": [
        { "text": "True", "correct": true },
        { "text": "False", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {    \n             int a = 1;\n             int b = 2;\n             int c;\n             int d;\n             c = ++b;\n             d = a++;\n             c++;\n             b++;\n             ++a;\n             System.out.println(a + \" \" + b + \" \" + c);\n        } \n    }\n",
      "explanation": "None.\noutput:\n$ javac Output.java\n$ java Output\n3 4 4\n",
      "options": [
        { "text": "3 2 4", "correct": false },
        { "text": "3 2 3", "correct": false },
        { "text": "2 3 4", "correct": false },
        { "text": "3 4 4", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is not a bitwise operator?",
      "explanation": "<= is a relational operator.",
      "options": [
        { "text": "&", "correct": false },
        { "text": "&=", "correct": false },
        { "text": "|=", "correct": false },
        { "text": "<=", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which operator is used to invert all the digits in a binary representation of a number?",
      "explanation": "Unary not operator, ~, inverts all of the bits of its operand in binary representation.",
      "options": [
        { "text": "~", "correct": true },
        { "text": "<<<", "correct": false },
        { "text": ">>>", "correct": false },
        { "text": "^", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "On applying Left shift operator, <<, on integer bits are lost one they are shifted past which position bit?",
      "explanation": "The left shift operator shifts all of the bits in a value to the left specified number of times. For each shift left, the high order bit is shifted out and lost, zero is brought in from the right. When a left shift is applied to an integer operand, bits are lost once they are shifted past the bit position 31.",
      "options": [
        { "text": "1", "correct": false },
        { "text": "32", "correct": false },
        { "text": "33", "correct": false },
        { "text": "31", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which right shift operator preserves the sign of the value?",
      "explanation": "None.",
      "options": [
        { "text": "<<", "correct": false },
        { "text": ">>", "correct": true },
        { "text": "<<=", "correct": false },
        { "text": ">>=", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these statements are incorrect?",
      "explanation": "The right shift operator automatically fills the higher order bit with its previous contents each time a shift occurs. This also preserves the sign of the value.",
      "options": [
        {
          "text": "The left shift operator, <<, shifts all of the bits in a value to the left specified number of times",
          "correct": false
        },
        {
          "text": "The right shift operator, >>, shifts all of the bits in a value to the right specified number of times",
          "correct": false
        },
        {
          "text": "The left shift operator can be used as an alternative to multiplying by 2",
          "correct": false
        },
        {
          "text": "The right shift operator automatically fills the higher order bits with 0",
          "correct": true
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class bitwise_operator \n    {\n        public static void main(String args[])\n        {\n            int var1 = 42;\n            int var2 = ~var1;\n            System.out.print(var1 + \" \" + var2);     \t\n        } \n    }\n",
      "explanation": "Unary not operator, ~, inverts all of the bits of its operand. 42 in binary is 00101010 in using ~ operator on var1 and assigning it to var2 we get inverted value of 42 i:e 11010101 which is -43 in decimal.\noutput:\n$ javac bitwise_operator.java\n$ java bitwise_operator\n42 -43\n",
      "options": [
        { "text": "42 42", "correct": false },
        { "text": "43 43", "correct": false },
        { "text": "42 -43", "correct": true },
        { "text": "42 43", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class bitwise_operator \n    {\n        public static void main(String args[]) \n        {    \n             int a = 3;\n             int b = 6;\n \t     int c = a | b;\n             int d = a & b;             \n             System.out.println(c + \" \"  + d);\n        } \n    }\n",
      "explanation": "And operator produces 1 bit if both operand are 1. Or operator produces 1 bit if any bit of the two operands in 1.\noutput:\n$ javac bitwise_operator.java\n$ java bitwise_operator\n7 2\n",
      "options": [
        { "text": "7 2", "correct": true },
        { "text": "7 7", "correct": false },
        { "text": "7 5", "correct": false },
        { "text": "5 2", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class leftshift_operator \n    {\n        public static void main(String args[]) \n        {        \n             byte x = 64;\n             int i;\n             byte y; \n             i = x << 2;\n             y = (byte) (x << 2)\n             System.out.print(i + \" \" + y);\n        } \n    }\n",
      "explanation": "None.\noutput:\n$ javac leftshift_operator.java\n$ java leftshift_operator\n256 0\n",
      "options": [
        { "text": "0 64", "correct": false },
        { "text": "64 0", "correct": false },
        { "text": "0 256", "correct": false },
        { "text": "256 0", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class rightshift_operator \n    {\n        public static void main(String args[]) \n        {    \n             int x; \n             x = 10;\n             x = x >> 1;\n             System.out.println(x);\n        } \n    }\n",
      "explanation": "Right shift operator, >>, devides the value by 2.\noutput:\n$ javac rightshift_operator.java\n$ java rightshift_operator\n5\n",
      "options": [
        { "text": "10", "correct": false },
        { "text": "5", "correct": true },
        { "text": "2", "correct": false },
        { "text": "20", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {    \n             int a = 1;\n             int b = 2;\n             int c = 3;\n             a |= 4;\n             b >>= 1;\n             c <<= 1;\n             a ^= c;\n             System.out.println(a + \" \" + b + \" \" + c);\n        } \n    }\n",
      "explanation": "None.\noutput:\n$ javac Output.java\n$ java Output\n3 1 6\n",
      "options": [
        { "text": "3 1 6", "correct": true },
        { "text": "2 2 3", "correct": false },
        { "text": "2 3 4", "correct": false },
        { "text": "3 3 6", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the output of relational operators?",
      "explanation": "None.",
      "options": [
        { "text": "Integer", "correct": false },
        { "text": "Boolean", "correct": true },
        { "text": "Characters", "correct": false },
        { "text": "Double", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is returned by “greater than”, “less than” and “equal to”  operators?",
      "explanation": "All relational operators return a boolean value ie. true and false.",
      "options": [
        { "text": "Integers", "correct": false },
        { "text": "Floating – point numbers", "correct": false },
        { "text": "Boolean", "correct": true },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following operators can operate on a boolean variable?\n\n   1. &&\n   2. ==\n   3. ?:\n   4. +=\n",
      "explanation": "Operator Short circuit AND, &&, equal to, == , ternary if-then-else, ?:, are boolean logical operators. += is an arithmetic operator it can operate only on numeric values.",
      "options": [
        { "text": "3 & 2", "correct": false },
        { "text": "1 & 4", "correct": false },
        { "text": "1, 2 & 4", "correct": false },
        { "text": "1, 2 & 3", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these operators can skip evaluating right hand operand?",
      "explanation": "Operator short circuit and, &&, and short circuit or, ||, skip evaluating right hand operand when output can be determined by left operand alone.",
      "options": [
        { "text": "!", "correct": false },
        { "text": "|", "correct": false },
        { "text": "&", "correct": false },
        { "text": "&&", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these statements is correct?",
      "explanation": "True and false are keywords, they are non numeric values which do not relate to zero or non zero numbers. true and false are boolean values.",
      "options": [
        {
          "text": "true and false are numeric values 1 and 0",
          "correct": false
        },
        {
          "text": "true and false are numeric values 0 and 1",
          "correct": false
        },
        {
          "text": "true is any non zero value and false is 0",
          "correct": false
        },
        { "text": "true and false are non numeric values", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class Relational_operator \n    {\n        public static void main(String args[])\n        {\n            int var1 = 5; \n            int var2 = 6;\n            System.out.print(var1 > var2);\n        } \n    }\n",
      "explanation": "Operator > returns a boolean value. 5 is not greater than 6 therefore false is returned.\noutput:\n$ javac Relational_operator.java\n$ java Relational_operator\nfalse\n",
      "options": [
        { "text": "1", "correct": false },
        { "text": "0", "correct": false },
        { "text": "true", "correct": false },
        { "text": "false", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class bool_operator \n    {\n        public static void main(String args[]) \n        {    \n             boolean a = true;\n             boolean b = !true;\n             boolean c = a | b;\n \t     boolean d = a & b;\n             boolean e = d ? b : c;\n             System.out.println(d + \" \" + e);\n        } \n    }\n",
      "explanation": "Operator | returns true if any one operand is true, thus ‘c = true | false’ is true. Operator & returns a true if both of the operand is true thus d is false. Ternary operator ?: assigns left of ‘:’ if condition is true and right hand of ‘:’ if condition is false. d is false thus e = d ? b : c , assigns c to e , e contains true.\noutput:\n$ javac bool_operator.java\n$ java bool_operator\nfalse true\n",
      "options": [
        { "text": "false false", "correct": false },
        { "text": "true ture", "correct": false },
        { "text": "true false", "correct": false },
        { "text": "false true", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class ternary_operator \n    {\n        public static void main(String args[]) \n        {        \n             int x = 3;\n             int y = ~ x;\n             int z;\n             z = x > y ? x : y;\n             System.out.print(z);\n        } \n    }\n",
      "explanation": "None.\noutput:\n$ javac ternary_operator.java\n$ java ternary_operator\n3\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "3", "correct": true },
        { "text": "-4", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {    \n             int x , y = 1;\n             x = 10;\n             if (x != 10 && x / 0 == 0)\n                 System.out.println(y);\n             else\n                 System.out.println(++y);\n        } \n    }\n",
      "explanation": "Operator short circuit and, &&, skips evaluating right hand operand if left hand operand is false thus division by zero in if condition does not give an error.\noutput:\n$ javac Output.java\n$ java Output\n2\n",
      "options": [
        { "text": "1", "correct": false },
        { "text": "2", "correct": true },
        {
          "text": "Runtime error owing to division by zero in if condition",
          "correct": false
        },
        { "text": "Unpredictable behavior of program", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java code?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {    \n             boolean a = true;\n             boolean b = false;\n             boolean c = a ^ b;\n             System.out.println(!c);\n        } \n    }\n",
      "explanation": " None.\noutput:\n$ javac Output.java\n$ java Output\nfalse\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "false", "correct": true },
        { "text": "true", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these have highest precedence?",
      "explanation": "Order of precedence is (highest to lowest) a -> b -> c -> d.",
      "options": [
        { "text": "()", "correct": true },
        { "text": "++", "correct": false },
        { "text": "*", "correct": false },
        { "text": ">>", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What should be expression1 evaluate to in using ternary operator as in this line?\n\n expression1 ?  expression2  :  expression3\n",
      "explanation": "The controlling condition of ternary operator must evaluate to boolean.",
      "options": [
        { "text": "Integer", "correct": false },
        { "text": "Floating – point numbers", "correct": false },
        { "text": "Boolean", "correct": true },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the value stored in x in the following lines of Java code?\n\n   int x, y, z;\n    x = 0;\n    y = 1;\n    x = y = z = 8;\n",
      "explanation": "None.",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "9", "correct": false },
        { "text": "8", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the order of precedence (highest to lowest) of following operators?\n\n    1. &    \n    2. ^\n    3. ?:\n",
      "explanation": "None.",
      "options": [
        { "text": "1 -> 2 -> 3", "correct": true },
        { "text": "2 -> 1 -> 3", "correct": false },
        { "text": "3 -> 2 -> 1", "correct": false },
        { "text": "2 -> 3 -> 1", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these statements are incorrect?",
      "explanation": "Division operator, /, has equal precedence as of multiplication operator. In expression involving multiplication and division evaluation of expression will begin from the right side when no brackets are used.",
      "options": [
        { "text": "Equal to operator has least precedence", "correct": false },
        { "text": "Brackets () have highest precedence", "correct": false },
        {
          "text": "Division operator, /, has higher precedence than multiplication operator",
          "correct": true
        },
        {
          "text": "Addition operator, +, and subtraction operator have equal precedence",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class operators \n    {\n        public static void main(String args[])\n        {\n            int var1 = 5; \n            int var2 = 6;\n            int var3;\n            var3 = ++ var2 * var1 / var2 + var2;\n            System.out.print(var3);\n        } \n    }\n",
      "explanation": "Operator ++ has the highest precedence than / , * and +. var2 is incremented to 7 and then used in expression, var3 = 7 * 5 / 7 + 7, gives 12.\noutput:\n$ javac operators.java\n$ java operators\n12\n",
      "options": [
        { "text": "10", "correct": false },
        { "text": "11", "correct": false },
        { "text": "12", "correct": true },
        { "text": "56", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class operators \n    {\n        public static void main(String args[]) \n        {    \n             int x = 8;\n             System.out.println(++x * 3 + \" \" + x);\n        } \n    }\n",
      "explanation": "Operator ++ has higher precedence than multiplication operator, *, x is incremented to 9 than multiplied with 3 giving 27.\noutput:\n$ javac operators.java\n$ java operators\n27 9\n",
      "options": [
        { "text": "24 8", "correct": false },
        { "text": "24 9", "correct": false },
        { "text": "27 8", "correct": false },
        { "text": "27 9", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\nclass Output \n{\n        public static void main(String args[]) \n        {    \n             int x=y=z=20;\n \n        } \n}\n",
      "explanation": "None.",
      "options": [
        { "text": "compile and runs fine", "correct": false },
        { "text": "20", "correct": false },
        { "text": "run time error", "correct": false },
        { "text": "compile time error", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these lines of Java code will give better performance?\n\n   1. a | 4 + c >> b & 7; \n   2. (a | ((( 4 * c ) >> b ) & 7 ))\n",
      "explanation": "Parentheses do not degrade the performance of the program. Adding parentheses to reduce ambiguity does not negatively affect your system.",
      "options": [
        {
          "text": "1 will give better performance as it has no parentheses",
          "correct": false
        },
        {
          "text": "2 will give better performance as it has parentheses",
          "correct": false
        },
        { "text": "Both 1 & 2 will give equal performance", "correct": true },
        { "text": "Dependent on the computer system", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\nclass Output \n{\n        public static void main(String args[]) \n        {    \n             int a,b,c,d;\n             a=b=c=d=20\n            a+=b-=c*=d/=20\n           System.out.println(a+\" \"+b+\" \"+c+\" \"+d);\n \n        } \n}\n",
      "explanation": " Expression will evaluate from right to left.\noutput:\n$ javac Output.java\n$ java Output\n20 0 20 1\n",
      "options": [
        { "text": "compile time error", "correct": false },
        { "text": "runtime error", "correct": false },
        { "text": "a=20 b=0 c=20 d=1", "correct": true },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these selection statements test only for equality?",
      "explanation": "Switch statements checks for equality between the controlling variable and its constant cases.",
      "options": [
        { "text": "if", "correct": false },
        { "text": "switch", "correct": true },
        { "text": "if & switch", "correct": false },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these are selection statements in Java?",
      "explanation": "Continue and break are jump statements, and for is a looping statement.",
      "options": [
        { "text": "if()", "correct": true },
        { "text": "for()", "correct": false },
        { "text": "continue", "correct": false },
        { "text": "break", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following loops will execute the body of loop even when condition controlling the loop is initially false?",
      "explanation": "None.",
      "options": [
        { "text": "do-while", "correct": true },
        { "text": "while", "correct": false },
        { "text": "for", "correct": false },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these jump statements can skip processing the remainder of the code in its body for a particular iteration?",
      "explanation": "None.",
      "options": [
        { "text": "break", "correct": false },
        { "text": "return", "correct": false },
        { "text": "exit", "correct": false },
        { "text": "continue", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of this statement is incorrect?",
      "explanation": "No two case constants in the same switch can have identical values.",
      "options": [
        {
          "text": "switch statement is more efficient than a set of nested ifs",
          "correct": false
        },
        {
          "text": "two case constants in the same switch can have identical values",
          "correct": true
        },
        {
          "text": "switch statement can only test for equality, whereas if statement can evaluate any type of boolean expression",
          "correct": false
        },
        {
          "text": "it is possible to create a nested switch statements",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class selection_statements \n    {\n        public static void main(String args[])\n        {\n            int var1 = 5; \n            int var2 = 6;\n            if ((var2 = 1) == var1)\n                System.out.print(var2);\n            else \n                System.out.print(++var2);\n        } \n    }\n\n",
      "explanation": " var2 is initialised to 1. The conditional statement returns false and the else part gets executed.\noutput:\n$ javac selection_statements.java\n$ java selection_statements\n2\n",
      "options": [
        { "text": "1", "correct": false },
        { "text": "2", "correct": true },
        { "text": "3", "correct": false },
        { "text": "4", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class comma_operator \n    {\n        public static void main(String args[]) \n        {    \n             int sum = 0;\n             for (int i = 0, j = 0; i < 5 & j < 5; ++i, j = i + 1)\n                 sum += i;\n \t     System.out.println(sum);\n        } \n    }\n",
      "explanation": "  Using comma operator, we can include more than one statement in the initialization and iteration portion of the for loop. Therefore both ++i and j = i + 1 is executed i gets the value – 0,1,2,3,4 & j gets the values -0,1,2,3,4,5.\noutput:\n$ javac comma_operator.java\n$ java comma_operator\n6\n",
      "options": [
        { "text": "5", "correct": false },
        { "text": "6", "correct": true },
        { "text": "14", "correct": false },
        { "text": "compilation error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class jump_statments \n    {\n        public static void main(String args[]) \n        {        \n             int x = 2;\n             int y = 0;\n             for ( ; y < 10; ++y) \n             {\n                 if (y % x == 0) \n                     continue;  \n                 else if (y == 8)\n                      break;\n                 else\n                    System.out.print(y + \" \");\n             }\n        } \n    }\n",
      "explanation": "Whenever y is divisible by x remainder body of loop is skipped by continue statement, therefore if condition y == 8 is never true as when y is 8, remainder body of loop is skipped by continue statements of first if. Control comes to print statement only in cases when y is odd.\noutput:\n$ javac jump_statments.java\n$ java jump_statments\n1 3 5 7 9\n",
      "options": [
        { "text": "1 3 5 7", "correct": false },
        { "text": "2 4 6 8", "correct": false },
        { "text": "1 3 5 7 9", "correct": true },
        { "text": "1 2 3 4 5 6 7 8 9", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\nclass Output \n{\n        public static void main(String args[]) \n        {    \n           final int a=10,b=20;\n          while(a<b)\n          {\n \n          System.out.println(\"Hello\");\n          }\n          System.out.println(\"World\");\n \n        } \n}\n",
      "explanation": "Every final variable is compile time constant.",
      "options": [
        { "text": "Hello", "correct": false },
        { "text": "run time error", "correct": false },
        { "text": "Hello world", "correct": false },
        { "text": "compile time error", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {    \n             int a = 5;\n             int b = 10;\n             first: \n             {\n                second: \n                {\n                   third: \n                   { \n                       if (a ==  b >> 1)\n                           break second;\n                   }\n                   System.out.println(a);\n                }\n                System.out.println(b);\n             }\n        } \n    }\n",
      "explanation": " b >> 1 in if returns 5 which is equal to a i:e 5, therefore body of if is executed and block second is exited. Control goes to end of the block second executing the last print statement, printing 10.\noutput:\n$ javac Output.java\n$ java Output\n10\n",
      "options": [
        { "text": "5 10", "correct": false },
        { "text": "10 5", "correct": false },
        { "text": "5", "correct": false },
        { "text": "10", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What would be the output of the following code snippet if variable a=10?\n\nif(a<=0)\n{\n   if(a==0)\n   {\n     System.out.println(\"1 \");\n   }\n   else \n   { \n      System.out.println(\"2 \");\n   }\n}\nSystem.out.println(\"3 \");\n",
      "explanation": "Since the first if condition is not met, control would not go inside if statement and hence only statement after the entire if block will be executed.",
      "options": [
        { "text": "1 2", "correct": false },
        { "text": "2 3", "correct": false },
        { "text": "1 3", "correct": false },
        { "text": "3", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "The while loop repeats a set of code while the condition is not met?",
      "explanation": "While loop repeats a set of code only until the condition is met.",
      "options": [
        { "text": "True", "correct": false },
        { "text": "False", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is true about a break?",
      "explanation": "Break halts the execution and forces the control out of the loop.",
      "options": [
        {
          "text": "Break stops the execution of entire program",
          "correct": false
        },
        {
          "text": "Break halts the execution and forces the control out of the loop",
          "correct": true
        },
        {
          "text": "Break forces the control out of the loop and starts the execution of next iteration",
          "correct": false
        },
        {
          "text": "Break halts the execution of the loop for certain time frame",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is true about do statement?",
      "explanation": "Do statement checks the condition at the end of the loop. Hence, code gets executed at least once.",
      "options": [
        {
          "text": "do statement executes the code of a loop at least once",
          "correct": true
        },
        {
          "text": "do statement does not get execute if condition is not matched in the first iteration",
          "correct": false
        },
        {
          "text": "do statement checks the condition at the beginning of the loop",
          "correct": false
        },
        {
          "text": "do statement executes the code more than once always",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is used with the switch statement?",
      "explanation": "Break is used with a switch statement to shift control out of switch.",
      "options": [
        { "text": "Continue", "correct": false },
        { "text": "Exit", "correct": false },
        { "text": "break", "correct": true },
        { "text": "do", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the valid data type for variable “a” to print “Hello World”?\n\nswitch(a)\n{\n   System.out.println(\"Hello World\");\n}\n",
      "explanation": "The switch condition would only meet if variable “a” is of type byte or char.",
      "options": [
        { "text": "int and float", "correct": false },
        { "text": "byte and short", "correct": false },
        { "text": "char and long", "correct": false },
        { "text": "byte and char", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is not a decision making statement?",
      "explanation": "do-while is an iteration statement. Others are decision making statements.",
      "options": [
        { "text": "if", "correct": false },
        { "text": "if-else", "correct": false },
        { "text": "switch", "correct": false },
        { "text": "do-while", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is not a valid jump statement?",
      "explanation": "break, continue and return transfer control to another part of the program and returns back to caller after execution. However, goto is marked as not used in Java.",
      "options": [
        { "text": "break", "correct": false },
        { "text": "goto", "correct": true },
        { "text": "continue", "correct": false },
        { "text": "return", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "From where break statement causes an exit?",
      "explanation": "The break statement causes an exit from innermost loop or switch.",
      "options": [
        { "text": "Only from innermost loop", "correct": false },
        { "text": "Terminates a program", "correct": false },
        { "text": "Only from innermost switch", "correct": false },
        { "text": "From innermost loops or switches", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " Which of the following is not a valid flow control statement?",
      "explanation": "exit() is not a flow control statement in Java. exit() terminates the currently running JVM.",
      "options": [
        { "text": "exit()", "correct": true },
        { "text": "break", "correct": false },
        { "text": "continue", "correct": false },
        { "text": "return", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is not OOPS concept in Java?",
      "explanation": "There are 4 OOPS concepts in Java. Inheritance, Encapsulation, Polymorphism and Abstraction.",
      "options": [
        { "text": "Inheritance", "correct": false },
        { "text": "Encapsulation", "correct": false },
        { "text": "Polymorphism", "correct": false },
        { "text": "Compilation", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is a type of polymorphism in Java?",
      "explanation": "There are two types of polymorphism in Java. Compile time polymorphism (overloading) and runtime polymorphism (overriding).",
      "options": [
        { "text": "Compile time polymorphism", "correct": true },
        { "text": "Execution time polymorphism", "correct": false },
        { "text": "Multiple polymorphism", "correct": false },
        { "text": "Multilevel polymorphism", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "When does method overloading is determined?",
      "explanation": "Overloading is determined at compile time. Hence, it is also known as compile time polymorphism.",
      "options": [
        { "text": "At run time", "correct": false },
        { "text": "At compile time", "correct": true },
        { "text": "At coding time", "correct": false },
        { "text": "At execution time", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "When Overloading does not occur?",
      "explanation": "Overloading occurs when more than one method with same name but different constructor and also when same signature but different number of parameters and/or parameter type.",
      "options": [
        {
          "text": "More than one method with same name but different method signature and different number or type of parameters",
          "correct": false
        },
        {
          "text": "More than one method with same name, same signature but different number of signature",
          "correct": false
        },
        {
          "text": "More than one method with same name, same signature, same number of parameters but different type",
          "correct": false
        },
        {
          "text": "More than one method with same name, same number of parameters and type but different signature",
          "correct": true
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which concept of Java is a way of converting real world objects in terms of class?",
      "explanation": "Abstraction is the concept of defining real world objects in terms of classes or interfaces.",
      "options": [
        { "text": "Polymorphism", "correct": false },
        { "text": "Encapsulation", "correct": false },
        { "text": "Abstraction", "correct": true },
        { "text": "Inheritance", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which concept of Java is achieved by combining methods and attribute into a class?",
      "explanation": "Encapsulation is implemented by combining methods and attribute into a class. The class acts like a container of encapsulating properties.",
      "options": [
        { "text": "Encapsulation", "correct": true },
        { "text": "Inheritance", "correct": false },
        { "text": "Polymorphism", "correct": false },
        { "text": "Abstraction", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is it called if an object has its own lifecycle and there is no owner?",
      "explanation": "It is a relationship where all objects have their own lifecycle and there is no owner. This occurs where many to many relationships are available, instead of one to one or one to many.",
      "options": [
        { "text": "Aggregation", "correct": false },
        { "text": "Composition", "correct": false },
        { "text": "Encapsulation", "correct": false },
        { "text": "Association", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is it called where child object gets killed if parent object is killed?",
      "explanation": "Composition occurs when child object gets killed if parent object gets killed. Aggregation is also known as strong Aggregation.",
      "options": [
        { "text": "Aggregation", "correct": false },
        { "text": "Composition", "correct": true },
        { "text": "Encapsulation", "correct": false },
        { "text": "Association", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is it called where object has its own lifecycle and child object cannot belong to another parent object?",
      "explanation": "Aggregation occurs when objects have their own life cycle and child object can associate with only one parent object.",
      "options": [
        { "text": "Aggregation", "correct": true },
        { "text": "Composition", "correct": false },
        { "text": "Encapsulation", "correct": false },
        { "text": "Association", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " Method overriding is combination of inheritance and polymorphism?",
      "explanation": "In order for method overriding, method with same signature in both superclass and subclass is required with same signature. That satisfies both concepts inheritance and polymorphism.",
      "options": [
        { "text": "True", "correct": true },
        { "text": "false", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which component is used to compile, debug and execute java program?",
      "explanation": "JDK is a core component of Java Environment and provides all the tools, executables and binaries required to compile, debug and execute a Java Program.",
      "options": [
        { "text": "JVM", "correct": false },
        { "text": "JDK", "correct": true },
        { "text": "JIT", "correct": false },
        { "text": "JRE", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which component is responsible for converting bytecode into machine specific code?",
      "explanation": "JVM is responsible to converting bytecode to the machine specific code. JVM is also platform dependent and provides core java functions like garbage collection, memory management, security etc.",
      "options": [
        { "text": "JVM", "correct": true },
        { "text": "JDK", "correct": false },
        { "text": "JIT", "correct": false },
        { "text": "JRE", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which component is responsible to run java program?",
      "explanation": "JRE is the implementation of JVM, it provides platform to execute java programs.",
      "options": [
        { "text": "JVM", "correct": false },
        { "text": "JDK", "correct": false },
        { "text": "JIT", "correct": false },
        { "text": "JRE", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which component is responsible to optimize bytecode to machine code?",
      "explanation": "JIT optimizes bytecode to machine specific language code by compiling similar bytecodes at the same time. This reduces overall time taken for compilation of bytecode to machine specific language.",
      "options": [
        { "text": "JVM", "correct": false },
        { "text": "JDK", "correct": false },
        { "text": "JIT", "correct": true },
        { "text": "JRE", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which statement is true about java?",
      "explanation": "Java is called ‘Platform Independent Language’ as it primarily works on the principle of ‘compile once, run everywhere’.",
      "options": [
        {
          "text": "Platform independent programming language",
          "correct": true
        },
        { "text": "Platform dependent programming language", "correct": false },
        { "text": "Code dependent programming language", "correct": false },
        { "text": "Sequence dependent programming language", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the below is invalid identifier with the main method?",
      "explanation": "main method cannot be private as it is invoked by external method. Other identifier are valid with main method.",
      "options": [
        { "text": "public", "correct": false },
        { "text": "static", "correct": false },
        { "text": "private", "correct": true },
        { "text": "final", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the extension of java code files?",
      "explanation": "Java files have .java extension.",
      "options": [
        { "text": ".class", "correct": false },
        { "text": ".java", "correct": true },
        { "text": ".txt", "correct": false },
        { "text": ".js", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the extension of compiled java classes?",
      "explanation": "The compiled java files have .class extension.",
      "options": [
        { "text": ".class", "correct": true },
        { "text": ".java", "correct": false },
        { "text": ".txt", "correct": false },
        { "text": ".js", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "How can we identify whether a compilation unit is class or interface from a .class file?",
      "explanation": "The Java source file contains a header that declares the type of class or interface, its visibility with respect to other classes, its name and any superclass it may extend, or interface it implements.",
      "options": [
        { "text": "Java source file header", "correct": true },
        { "text": "Extension of compilation unit", "correct": false },
        {
          "text": "We cannot differentiate between class and interface",
          "correct": false
        },
        {
          "text": "The class or interface name should be postfixed with unit type",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What is use of interpreter?",
      "explanation": "Interpreters read high level language (interprets it) and execute the program. Interpreters are normally not passing through byte-code and jit compilation.",
      "options": [
        {
          "text": "They convert bytecode to machine language code",
          "correct": false
        },
        {
          "text": "They read high level code and execute them",
          "correct": true
        },
        {
          "text": "They are intermediated between JIT and JVM",
          "correct": false
        },
        { "text": "It is a synonym for JIT", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the stored in the object obj in following lines of Java code?\n\n   box obj;\n",
      "explanation": "Memory is allocated to an object using new operator.  box obj; just declares a reference to object, no memory is allocated to it hence it points to NULL.",
      "options": [
        {
          "text": "Memory address of allocated memory of object",
          "correct": false
        },
        { "text": "NULL", "correct": true },
        { "text": "Any arbitrary pointer", "correct": false },
        { "text": "Garbage", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these keywords is used to make a class?",
      "explanation": "None.",
      "options": [
        { "text": "class", "correct": true },
        { "text": "struct", "correct": false },
        { "text": "int", "correct": false },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is a valid declaration of an object of class Box?",
      "explanation": "None.",
      "options": [
        { "text": "Box obj = new Box();", "correct": true },
        { "text": "Box obj = new Box;", "correct": false },
        { "text": "obj = new Box();", "correct": false },
        { "text": "new Box obj;", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these operators is used to allocate memory for an object?",
      "explanation": "Operator new dynamically allocates memory for an object and returns a reference to it. This reference is address in memory of the object allocated by new.",
      "options": [
        { "text": "malloc", "correct": false },
        { "text": "alloc", "correct": false },
        { "text": "new", "correct": true },
        { "text": "give", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these statement is incorrect?",
      "explanation": "Every class does not need to have a main() method, there can be only one main() method which is made public.",
      "options": [
        { "text": "Every class must contain a main() method", "correct": true },
        {
          "text": "Applets do not require a main() method at all",
          "correct": false
        },
        {
          "text": "There can be only one main() method in a program",
          "correct": false
        },
        { "text": "main() method must be made public", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class main_class \n    {\n        public static void main(String args[])\n        {\n            int x = 9;\n            if (x == 9) \n            { \n                int x = 8;\n                System.out.println(x);\n            }\n        } \n    }\n",
      "explanation": "Two variables with the same name can’t be created in a class.\noutput:\n$ javac main_class.java\nException in thread \"main\" java.lang.Error: Unresolved compilation problem: \n\t Duplicate local variable x\n",
      "options": [
        { "text": "9", "correct": false },
        { "text": "8", "correct": false },
        { "text": "Compilation error", "correct": true },
        { "text": "Runtime error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following statements is correct?",
      "explanation": "None.",
      "options": [
        {
          "text": "Public method is accessible to all other classes in the hierarchy",
          "correct": true
        },
        {
          "text": "Public method is accessible only to subclasses of its parent class",
          "correct": false
        },
        {
          "text": "Public method can only be called by object of its class",
          "correct": false
        },
        {
          "text": "Public method can be accessed by calling object of the public class",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class box \n    {\n        int width;\n        int height;\n        int length;\n    } \n    class mainclass \n    {\n        public static void main(String args[]) \n        {        \n             box obj = new box();\n             obj.width = 10;\n             obj.height = 2;\n             obj.length = 10;\n             int y = obj.width * obj.height * obj.length; \n             System.out.print(y);\n        } \n    }\n",
      "explanation": "None.\noutput:\n$ javac mainclass.java\n$ java mainclass\n200\n",
      "options": [
        { "text": "12", "correct": false },
        { "text": "200", "correct": true },
        { "text": "400", "correct": false },
        { "text": "100", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class box \n    {\n        int width;\n        int height;\n        int length;\n    } \n    class mainclass \n    {\n        public static void main(String args[]) \n        {        \n            box obj1 = new box();\n            box obj2 = new box();\n            obj1.height = 1;\n            obj1.length = 2;\n            obj1.width = 1;\n            obj2 = obj1;\n            System.out.println(obj2.height);\n        } \n    }\n",
      "explanation": "When we assign an object to another object of same type, all the elements of right side object gets copied to object on left side of equal to, =, operator.\noutput:\n$ javac mainclass.java\n$ java mainclass\n1\n",
      "options": [
        { "text": "1", "correct": true },
        { "text": "2", "correct": false },
        { "text": "Runtime error", "correct": false },
        { "text": "Garbage value", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n   class box \n   {\n        int width;\n        int height;\n        int length;\n   } \n    class mainclass \n    {\n        public static void main(String args[]) \n        {        \n            box obj = new box();\n            System.out.println(obj);\n        } \n    }\n",
      "explanation": "When we print object internally toString() will be called to return string into this format classname@hashcode in hexadecimal form.\noutput:\n$ javac mainclass.java\n$ java mainclass\nbox@130671e\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "Runtime error", "correct": false },
        { "text": "classname@hashcode in hexadecimal form", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the return type of a method that does not return any value?",
      "explanation": "Return type of a method must be made void if it is not returning any value.",
      "options": [
        { "text": "int", "correct": false },
        { "text": "float", "correct": false },
        { "text": "void", "correct": true },
        { "text": "double", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the process of defining more than one method in a class differentiated by method signature?",
      "explanation": "Function overloading is a process of defining more than one method in a class with same name differentiated by function signature i:e return type or parameters type and number. Example –  int volume(int length, int width) & int volume(int length , int width , int height) can be used to calculate volume.",
      "options": [
        { "text": "Function overriding", "correct": false },
        { "text": "Function overloading", "correct": true },
        { "text": "Function doubling", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is a method having same name as that of it’s class?",
      "explanation": "A constructor is a method that initializes an object immediately upon creation. It has the same name as that of class in which it resides.",
      "options": [
        { "text": "finalize", "correct": false },
        { "text": "delete", "correct": false },
        { "text": "class", "correct": false },
        { "text": "constructor", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which method can be defined only once in a program?",
      "explanation": "main() method can be defined only once in a program. Program execution begins from the main() method by java runtime system.",
      "options": [
        { "text": "main method", "correct": true },
        { "text": "finalize method", "correct": false },
        { "text": "static method", "correct": false },
        { "text": "private method", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of this statement is incorrect?",
      "explanation": "All object of class share a single copy of methods defined in a class, Methods are allotted memory only once. All the objects of the class have access to methods of that class are allotted memory only for the variables not for the methods.",
      "options": [
        {
          "text": "All object of a class are allotted memory for the all the variables defined in the class",
          "correct": false
        },
        {
          "text": "If a function is defined public it can be accessed by object of other class by inheritation",
          "correct": false
        },
        { "text": "main() method must be made public", "correct": false },
        {
          "text": "All object of a class are allotted memory for the methods defined in the class",
          "correct": true
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class box \n    {\n        int width;\n        int height;\n        int length;\n        int volume;\n        void volume(int height, int length, int width) \n        {\n             volume = width*height*length;\n        } \n    }    \n    class Prameterized_method\n    {\n        public static void main(String args[])\n        {\n            box obj = new box();\n            obj.height = 1;\n            obj.length = 5;\n            obj.width = 5;\n            obj.volume(3,2,1);\n            System.out.println(obj.volume);        \n        } \n     }\n",
      "explanation": " None.\noutput:\n$ Prameterized_method.java\n$ Prameterized_method\n6\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "6", "correct": true },
        { "text": "25", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class equality \n    {\n        int x;\n        int y;\n        boolean isequal()\n        {\n            return(x == y);  \n        } \n    }    \n    class Output \n    {\n        public static void main(String args[])\n        {\n            equality obj = new equality();\n            obj.x = 5;\n            obj.y = 5;\n            System.out.println(obj.isequal());\n        } \n    }\n",
      "explanation": "None.\noutput:\n$ javac Output.java\n$ java Output \ntrue\n",
      "options": [
        { "text": "false", "correct": false },
        { "text": "true", "correct": true },
        { "text": "0", "correct": false },
        { "text": "1", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class box \n    {\n        int width;\n        int height;\n        int length;\n        int volume;\n        void volume() \n        {\n             volume = width*height*length;\n        } \n    }    \n    class Output \n    { \n        public static void main(String args[])\n        {\n            box obj = new box();\n            obj.height = 1;\n            obj.length = 5;\n            obj.width = 5;\n            obj.volume();\n            System.out.println(obj.volume);        \n        } \n    }\n",
      "explanation": "None.\noutput:\n$ javac Output.java\n$ java Output\n25\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "25", "correct": true },
        { "text": "26", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "In the following Java code, which call to sum() method is appropriate?\n\nclass Output \n{\n \n        public static int sum(int ...x)\n        {\n             return; \n        }\n        static void main(String args[]) \n        {    \n             sum(10);\n             sum(10,20);\n             sum(10,20,30);\n             sum(10,20,30,40);\n        } \n}\n",
      "explanation": "sum is a variable argument method and hence it can take any number as an argument.",
      "options": [
        { "text": "only sum(10)", "correct": false },
        { "text": "only sum(10,20)", "correct": false },
        { "text": "only sum(10) & sum(10,20)", "correct": false },
        { "text": "all of the mentioned", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class area \n    {\n        int width;\n        int length;\n        int volume;\n        area() \n        {\n           width=5;\n           length=6;\n        }\n        void volume() \n        {\n             volume = width*length*height;\n        } \n    }    \n    class cons_method \n    {\n        public static void main(String args[])\n        {\n            area obj = new area();\n            obj.volume();\n            System.out.println(obj.volume);        \n        } \n    }\n",
      "explanation": "Variable height is not defined.\noutput:\n$ javac cons_method.java\n$ java cons_method\nerror: cannot find symbol height\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "30", "correct": false },
        { "text": "error", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the return type of Constructors?",
      "explanation": "Constructors does not have any return type, not even void.",
      "options": [
        { "text": "int", "correct": false },
        { "text": "float", "correct": false },
        { "text": "void", "correct": false },
        { "text": "none of the mentioned", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which keyword is used by the method to refer to the object that invoked it?",
      "explanation": "this keyword can be used inside any method to refer to the current object. this is always a reference to the object on which the method was invoked.",
      "options": [
        { "text": "import", "correct": false },
        { "text": "catch", "correct": false },
        { "text": "abstract", "correct": false },
        { "text": "this", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is a method having same name as that of its class?",
      "explanation": "A constructor is a method that initializes an object immediately upon creation. It has the same name as that of class in which it resides.",
      "options": [
        { "text": "finalize", "correct": false },
        { "text": "delete", "correct": false },
        { "text": "class", "correct": false },
        { "text": "constructor", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which operator is used by Java run time implementations to free the memory of an object when it is no longer needed?",
      "explanation": "Java handles deallocation of memory automatically, we do not need to explicitly delete an element. Garbage collection only occurs during execution of the program. When no references to the object exist, that object is assumed to be no longer needed, and the memory occupied by the object can be reclaimed.",
      "options": [
        { "text": "delete", "correct": false },
        { "text": "free", "correct": false },
        { "text": "new", "correct": false },
        { "text": "none of the mentioned", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which function is used to  perform some action when the object is to be destroyed?",
      "explanation": "None.",
      "options": [
        { "text": "finalize()", "correct": true },
        { "text": "delete()", "correct": false },
        { "text": "main()", "correct": false },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class box \n    {\n        int width;\n        int height;\n        int length;\n        int volume;\n        box() \n        {\n            width = 5;\n            height = 5;\n            length = 6;\n        }\n        void volume() \n        {\n             volume = width*height*length;\n        } \n    }    \n    class constructor_output \n    {\n        public static void main(String args[])\n        {\n            box obj = new box();\n            obj.volume();\n            System.out.println(obj.volume);\n        }\n   }\n",
      "explanation": "None.\noutput:\n$ constructor_output.java\n$ constructor_output\n150\n",
      "options": [
        { "text": "100", "correct": false },
        { "text": "150", "correct": true },
        { "text": "200", "correct": false },
        { "text": "250", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\nclass San\n{\n     San()throws IOException\n     {\n \n     } \n \n}\nclass Foundry extends San\n{\n     Foundry()\n     {\n \n     }\n     public static void main(String[]args)\n     {\n \n     }\n}\n",
      "explanation": "If parent class constructor throws any checked exception, compulsory child class constructor should throw the same checked exception as its parent, otherwise code won’t compile.",
      "options": [
        { "text": "compile time error", "correct": true },
        { "text": "run time error", "correct": false },
        { "text": "compile and runs fine", "correct": false },
        {
          "text": "unreported exception java.io.IOException in default constructor",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class box \n    {\n        int width;\n        int height;\n        int length;\n        int volume;\n        void finalize() \n        {\n            volume = width*height*length;\n            System.out.println(volume);\n        }\n        protected void volume() \n       {\n            volume = width*height*length;\n            System.out.println(volume);\n       } \n    }    \n    class Output \n    { \n        public static void main(String args[])\n        {\n            box obj = new box();\n            obj.width=5;\n            obj.height=5;\n            obj.length=6;\n            obj.volume();\n        } \n    }\n",
      "explanation": "None.\noutput:\n$ javac Output.java\n$ java Output\n150\n",
      "options": [
        { "text": "150", "correct": true },
        { "text": "200", "correct": false },
        { "text": "Run time error", "correct": false },
        { "text": "Compilation error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following statements are incorrect?",
      "explanation": "finalize() method is called just prior to garbage collection. it is not called when object goes out of scope.",
      "options": [
        {
          "text": "default constructor is called at the time of object declaration",
          "correct": false
        },
        { "text": "constructor can be parameterized", "correct": false },
        {
          "text": "finalize() method is called when a object goes out of scope and is no longer needed",
          "correct": true
        },
        {
          "text": "finalize() method must be declared protected",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java code?\n\n    class area \n    {\n        int width;\n        int length;\n        int area;\n        void area(int width, int length) \n        {\n            this.width = width;\n            this.length = length;\n        }\n \n    }    \n    class Output \n    {\n        public static void main(String args[])\n        {\n            area obj = new area();\n            obj.area(5 , 6);\n            System.out.println(obj.length + \" \" + obj.width);        \n        } \n    }\n",
      "explanation": "this keyword can be used inside any method to refer to the current object. this is always a reference to the object on which the method was invoked.\noutput:\n$ javac Output.java\n$ java Output\n6 5\n",
      "options": [
        { "text": "0 0", "correct": false },
        { "text": "5 6", "correct": false },
        { "text": "6 5", "correct": true },
        { "text": "5 5", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is true about private constructor?",
      "explanation": "Object of private constructor can only be created within class. Private constructor is used in singleton pattern.",
      "options": [
        {
          "text": "Private constructor ensures only one instance of a class exist at any point of time",
          "correct": true
        },
        {
          "text": "Private constructor ensures multiple instances of a class exist at any point of time",
          "correct": false
        },
        {
          "text": "Private constructor eases the instantiation of a class",
          "correct": false
        },
        {
          "text": "Private constructor allows creating objects in other classes",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What would be the behaviour if this() and super() used in a method?",
      "explanation": "this() and super() cannot be used in a method. This throws compile time error.",
      "options": [
        { "text": "Runtime error", "correct": false },
        { "text": "Throws exception", "correct": false },
        { "text": "compile time error", "correct": true },
        { "text": "Runs successfully", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is false about constructor?",
      "explanation": "The constructor cannot have a return type. It should create and return new objects. Hence it would give a compilation error.",
      "options": [
        {
          "text": "Constructors cannot be synchronized in Java",
          "correct": false
        },
        {
          "text": "Java does not provide default copy constructor",
          "correct": false
        },
        { "text": "Constructor can have a return type", "correct": true },
        {
          "text": "“this” and “super” can be used in a constructor",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is true about Class.getInstance()?",
      "explanation": "Class class provides list of methods for use like getInstance().",
      "options": [
        { "text": "Class.getInstance calls the constructor", "correct": false },
        {
          "text": "Class.getInstance is same as new operator",
          "correct": false
        },
        {
          "text": "Class.getInstance needs to have matching constructor",
          "correct": false
        },
        {
          "text": "Class.getInstance creates object if class does not have any constructor",
          "correct": true
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is true about constructor?",
      "explanation": "Constructor returns a new object with variables defined as in the class. Instance variables are newly created and only one copy of static variables are created.",
      "options": [
        { "text": "It can contain return type", "correct": false },
        { "text": "It can take any number of parameters", "correct": true },
        { "text": "It can have any non access modifiers", "correct": false },
        { "text": "Constructor cannot throw an exception", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Abstract class cannot have a constructor.",
      "explanation": "No instance can be created of abstract class. Only pointer can hold instance of object.",
      "options": [
        { "text": "True", "correct": false },
        { "text": "False", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is true about protected constructor?",
      "explanation": "Protected access modifier means that constructor can be accessed by child classes of the parent class and classes in the same package.",
      "options": [
        {
          "text": "Protected constructor can be called directly",
          "correct": false
        },
        {
          "text": "Protected constructor can only be called using super()",
          "correct": true
        },
        {
          "text": "Protected constructor can be used outside package",
          "correct": false
        },
        {
          "text": "protected constructor can be instantiated even if child is in a different package",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is not the use of “this” keyword in Java?",
      "explanation": "“this” is an important keyword in java. It helps to distinguish between local variable and variables passed in the method as parameters.",
      "options": [
        { "text": "Passing itself to another method", "correct": false },
        {
          "text": "Calling another constructor in constructor chaining",
          "correct": false
        },
        {
          "text": "Referring to the instance variable when local variable has the same name",
          "correct": false
        },
        {
          "text": "Passing itself to method of the same class",
          "correct": true
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What would be the behaviour if one parameterized constructor is explicitly defined?",
      "explanation": "The class compiles successfully. But the object creation of that class gives a compilation error.",
      "options": [
        { "text": "Compilation error", "correct": false },
        { "text": "Compilation succeeds", "correct": false },
        { "text": "Runtime error", "correct": false },
        {
          "text": "Compilation succeeds but at the time of creating object using default constructor, it throws compilation error",
          "correct": true
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What would be behaviour if the constructor has a return type?",
      "explanation": "The constructor cannot have a return type. It should create and return new object. Hence it would give compilation error.",
      "options": [
        { "text": "Compilation error", "correct": true },
        { "text": "Runtime error", "correct": false },
        { "text": "Compilation and runs successfully", "correct": false },
        { "text": "Only String return type is allowed", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following has the highest memory requirement?",
      "explanation": "JVM is the super set which contains heap, stack, objects, pointers, etc.",
      "options": [
        { "text": "Heap", "correct": false },
        { "text": "Stack", "correct": false },
        { "text": "JVM", "correct": true },
        { "text": "Class", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Where is a new object allocated memory?",
      "explanation": "A new object is always created in young space. Once young space is full, a special young collection is run where objects which have lived long enough are moved to old space and memory is freed up in young space for new objects.",
      "options": [
        { "text": "Young space", "correct": true },
        { "text": "Old space", "correct": false },
        {
          "text": "Young or Old space depending on space availability",
          "correct": false
        },
        { "text": "JVM", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is a garbage collection technique?",
      "explanation": "A mark and sweep garbage collection consists of two phases, the mark phase and the sweep phase. I mark phase all the objects reachable by java threads, native handles and other root sources are marked alive and others are garbage. In sweep phase, the heap is traversed to find gaps between live objects and the gaps are marked free list used for allocating memory to new objects.",
      "options": [
        { "text": "Cleanup model", "correct": false },
        { "text": "Mark and sweep model", "correct": true },
        { "text": "Space management model", "correct": false },
        { "text": "Sweep model", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is -Xms and -Xmx while starting jvm?",
      "explanation": "JVM will be started with Xms amount of memory and will be able to use a maximum of Xmx amount of memory. java -Xmx2048m -Xms256m.",
      "options": [
        { "text": "Initial; Maximum memory", "correct": true },
        { "text": "Maximum; Initial memory", "correct": false },
        { "text": "Maximum memory", "correct": false },
        { "text": "Initial memory", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which exception is thrown when java is out of memory?",
      "explanation": "The Xms flag has no default value, and Xmx typically has a default value of 256MB. A common use for these flags is when you encounter a java.lang.OutOfMemoryError.",
      "options": [
        { "text": "MemoryFullException", "correct": false },
        { "text": "MemoryOutOfBoundsException", "correct": false },
        { "text": "OutOfMemoryError", "correct": true },
        { "text": "MemoryError", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "How to get prints of shared object memory maps or heap memory maps for a given process?",
      "explanation": "We can use jmap as jmap -J-d64 -heap pid.",
      "options": [
        { "text": "jmap", "correct": true },
        { "text": "memorymap", "correct": false },
        { "text": "memorypath", "correct": false },
        { "text": "jvmmap", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What happens to the thread when garbage collection kicks off?",
      "explanation": "The thread is paused when garbage collection runs which slows the application performance.",
      "options": [
        { "text": "The thread continues its operation", "correct": false },
        {
          "text": "Garbage collection cannot happen until the thread is running",
          "correct": false
        },
        {
          "text": "The thread is paused while garbage collection runs",
          "correct": true
        },
        {
          "text": "The thread and garbage collection do not interfere with each other",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the below is not a Java Profiler?",
      "explanation": "Memory leak is like holding a strong reference to an object although it would never be needed anymore. Objects that are reachable but not live are considered memory leaks. Various tools help us to identify memory leaks.",
      "options": [
        { "text": "JVM", "correct": true },
        { "text": "JConsole", "correct": false },
        { "text": "JProfiler", "correct": false },
        { "text": "Eclipse Profiler", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the below is not a memory leak solution?",
      "explanation": "Process restart is not a permanent fix to memory leak problem. The problem will resurge again.",
      "options": [
        { "text": "Code changes", "correct": false },
        { "text": "JVM parameter tuning", "correct": false },
        { "text": "Process restart", "correct": true },
        { "text": "GC parameter tuning", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " Garbage Collection can be controlled by a program?",
      "explanation": "Garbage Collection cannot be controlled by a program.",
      "options": [
        { "text": "True", "correct": false },
        { "text": "False", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the process of defining two or more methods within same class that have same name but different parameters declaration?",
      "explanation": "Two or more methods can have same name as long as their parameters declaration is different, the methods are said to be overloaded and process is called method overloading. Method overloading is a way by which Java implements polymorphism.",
      "options": [
        { "text": "method overloading", "correct": true },
        { "text": "method overriding", "correct": false },
        { "text": "method hiding", "correct": false },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these can be overloaded?",
      "explanation": "None.",
      "options": [
        { "text": "Methods", "correct": false },
        { "text": "Constructors", "correct": false },
        { "text": "All of the mentioned", "correct": true },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is correct about passing an argument by call-by-value process?",
      "explanation": "When we pass an argument by call-by-value a copy of argument is made into the formal parameter of the subroutine and changes made on parameters of subroutine have no effect on original argument, they remain the same.",
      "options": [
        {
          "text": "Copy of argument is made into the formal parameter of the subroutine",
          "correct": true
        },
        {
          "text": "Reference to original argument is passed to formal parameter of the subroutine",
          "correct": false
        },
        {
          "text": "Copy of argument is made into the formal parameter of the subroutine and changes made on parameters of subroutine have effect on original argument",
          "correct": false
        },
        {
          "text": "Reference to original argument is passed to formal parameter of the subroutine and changes made on parameters of subroutine have effect on original argument",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the process of defining a method in terms of itself, that is a method that calls itself?",
      "explanation": "None.",
      "options": [
        { "text": "Polymorphism", "correct": false },
        { "text": "Abstraction", "correct": false },
        { "text": "Encapsulation", "correct": false },
        { "text": "Recursion", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\nclass San\n{\n public void m1 (int i,float f)\n {\n  System.out.println(\" int float method\");\n }\n \n public void m1(float f,int i);\n  {\n  System.out.println(\"float int method\");\n  }\n \n  public static void main(String[]args)\n  {\n    San s=new San();\n        s.m1(20,20);\n  }\n}\n",
      "explanation": "While resolving overloaded method, compiler automatically promotes if exact match is not found. But in this case, which one to promote is an ambiguity.",
      "options": [
        { "text": "int float method", "correct": false },
        { "text": "float int method", "correct": false },
        { "text": "compile time error", "correct": true },
        { "text": "run time error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class overload \n    {\n        int x;\n \tint y;\n        void add(int a) \n        {\n            x =  a + 1;\n        }\n        void add(int a, int b)\n        {\n            x =  a + 2;\n        }        \n    }    \n    class Overload_methods \n    {\n        public static void main(String args[])\n        {\n            overload obj = new overload();   \n            int a = 0;\n            obj.add(6);\n            System.out.println(obj.x);     \n        }\n   }\n",
      "explanation": "None.\noutput:\n$ javac Overload_methods.java\n$ java Overload_methods\n7\n",
      "options": [
        { "text": "5", "correct": false },
        { "text": "6", "correct": false },
        { "text": "7", "correct": true },
        { "text": "8", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class overload \n    {\n        int x;\n \tint y;\n        void add(int a)\n        {\n            x =  a + 1;\n        }\n        void add(int a , int b)\n        {\n            x =  a + 2;\n        }        \n    }    \n    class Overload_methods \n    {\n        public static void main(String args[])\n        {\n            overload obj = new overload();   \n            int a = 0;\n            obj.add(6, 7);\n            System.out.println(obj.x);     \n        }\n    }\n",
      "explanation": "None.\noutput:\n$ javac Overload_methods.java\n$ java Overload_methods\n8\n",
      "options": [
        { "text": "6", "correct": false },
        { "text": "7", "correct": false },
        { "text": "8", "correct": true },
        { "text": "9", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n   class overload \n   {\n        int x;\n \tdouble y;\n        void add(int a , int b) \n        {\n            x = a + b;\n        }\n        void add(double c , double d)\n        {\n            y = c + d;\n        }\n        overload() \n        {\n            this.x = 0;\n            this.y = 0;\n        }        \n    }    \n    class Overload_methods \n    {\n        public static void main(String args[])\n        {\n            overload obj = new overload();   \n            int a = 2;\n            double b = 3.2;\n            obj.add(a, a);\n            obj.add(b, b);\n            System.out.println(obj.x + \" \" + obj.y);     \n        }\n   }\n",
      "explanation": " For obj.add(a,a); ,the function in line number 4 gets executed and value of x is 4. For the next function call, the function in line number 7 gets executed and value of y is 6.4\noutput:\n$ javac Overload_methods.java\n$ java Overload_methods \n4 6.4\n",
      "options": [
        { "text": "6 6", "correct": false },
        { "text": "6.4 6.4", "correct": false },
        { "text": "6.4 6", "correct": false },
        { "text": "4 6.4", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class test \n    {\n        int a;\n        int b;\n        void meth(int i , int j) \n        {\n            i *= 2;\n            j /= 2;\n        }          \n    }    \n    class Output \n    {\n        public static void main(String args[])\n        {\n            test obj = new test();\n\t    int a = 10;\n            int b = 20;             \n            obj.meth(a , b);\n            System.out.println(a + \" \" + b);        \n        } \n    }\n",
      "explanation": "Variables a & b are passed by value, copy of their values are made on formal parameters of function meth() that is i & j. Therefore changes done on i & j are not reflected back on original arguments. a & b remain 10 & 20 respectively.\noutput:\n$ javac Output.java\n$ java Output\n10 20\n",
      "options": [
        { "text": "10 20", "correct": true },
        { "text": "20 10", "correct": false },
        { "text": "20 40", "correct": false },
        { "text": "40 20", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java code?\n\n    class test \n    {\n        int a;\n        int b;\n        test(int i, int j) \n        {\n            a = i;\n            b = j;\n        }\n        void meth(test o) \n        {\n            o.a *= 2;\n            O.b /= 2;\n        }          \n    }    \n    class Output \n    {\n        public static void main(String args[])\n        {\n            test obj = new test(10 , 20);\n            obj.meth(obj);\n            System.out.println(obj.a + \" \" + obj.b);        \n        } \n    }\n",
      "explanation": "Class objects are always passed by reference, therefore changes done are reflected back on original arguments. obj.meth(obj) sends object obj as parameter whose variables a & b are multiplied and divided by 2 respectively by meth() function of class test. a & b becomes 20 & 10 respectively.\noutput:\n$ javac Output.java\n$ java Output\n20 10\n",
      "options": [
        { "text": "10 20", "correct": false },
        { "text": "20 10", "correct": true },
        { "text": "20 40", "correct": false },
        { "text": "40 20", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these access specifiers must be used for main() method?",
      "explanation": "main() method must be specified public as it called by Java run time system, outside of the program. If no access specifier is used then by default member is public within its own package & cannot be accessed by Java run time system.",
      "options": [
        { "text": "private", "correct": false },
        { "text": "public", "correct": true },
        { "text": "protected", "correct": false },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is used to access a member of class before object of that class is created?",
      "explanation": "None.",
      "options": [
        { "text": "public", "correct": false },
        { "text": "private", "correct": false },
        { "text": "static", "correct": true },
        { "text": "protected", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is used as a default for a member of a class if no access specifier is used for it?",
      "explanation": "When we pass an argument by call-by-value a copy of argument is made into the formal parameter of the subroutine and changes made on parameters of subroutine have no effect on original argument, they remain the same.",
      "options": [
        { "text": "private", "correct": true },
        { "text": "public", "correct": false },
        { "text": "public, within its own package", "correct": false },
        { "text": "protected", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the process by which we can control what parts of a program can access the members of a class?",
      "explanation": "None.",
      "options": [
        { "text": "Polymorphism", "correct": false },
        { "text": "Abstraction", "correct": false },
        { "text": "Encapsulation", "correct": true },
        { "text": "Recursion", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following statements are incorrect?",
      "explanation": "private members of a class can not be inherited by a subclass.",
      "options": [
        {
          "text": "public members of class can be accessed by any code in the program",
          "correct": false
        },
        {
          "text": "private members of class can only be accessed by other members of the class",
          "correct": false
        },
        {
          "text": "private members of class can be inherited by a subclass, and become protected members in subclass",
          "correct": true
        },
        {
          "text": "protected members of a class can be inherited by a subclass, and become private members of the subclass",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class access\n    {\n        public int x;\n \tprivate int y;\n        void cal(int a, int b)\n        {\n            x =  a + 1;\n            y =  b;\n        }        \n    }    \n    public class access_specifier \n    {\n        public static void main(String args[])\n        {\n            access obj = new access();   \n            obj.cal(2, 3);\n            System.out.println(obj.x + \" \" + obj.y);     \n        }\n   }\n",
      "explanation": "None.\noutput:\n$ javac access_specifier.java\nException in thread \"main\" java.lang.Error: Unresolved compilation problem: \n\tThe field access.y is not visible\n",
      "options": [
        { "text": "3 3", "correct": false },
        { "text": "2 3", "correct": false },
        { "text": "Runtime Error", "correct": true },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class access\n    {\n        public int x;\n \tprivate int y;\n        void cal(int a, int b)\n        {\n            x =  a + 1;\n            y =  b;\n        }   \n        void print() \n        {\n            System.out.println(\" \" + y);     \n        } \n    }   \n    public class access_specifier \n    {\n        public static void main(String args[])\n        {\n            access obj = new access();   \n            obj.cal(2, 3);\n            System.out.println(obj.x);\n            obj.print();     \n        }\n   }\n",
      "explanation": "None.\noutput:\n$ javac access_specifier.java\n$ java access_specifier \n3 3\n",
      "options": [
        { "text": "2 3", "correct": false },
        { "text": "3 3", "correct": true },
        { "text": "Runtime Error", "correct": false },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class static_out \n    {\n        static int x;\n \tstatic int y;\n        void add(int a, int b)\n        {\n            x = a + b;\n            y = x + b;\n        }\n    }    \n    public class static_use \n    {\n        public static void main(String args[])\n        {\n            static_out obj1 = new static_out();\n            static_out obj2 = new static_out();   \n            int a = 2;\n            obj1.add(a, a + 1);\n            obj2.add(5, a);\n            System.out.println(obj1.x + \" \" + obj2.y);     \n        }\n   }\n",
      "explanation": " None.\noutput:\n$ javac static_use.java\n$ java static_use\n7 9\n",
      "options": [
        { "text": "7 7.4", "correct": false },
        { "text": "6 6.4", "correct": false },
        { "text": "7 9", "correct": true },
        { "text": "9 7", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these access specifier must be used for class so that it can be inherited by another subclass?",
      "explanation": "None.",
      "options": [
        { "text": "public", "correct": true },
        { "text": "private", "correct": false },
        { "text": "protected", "correct": false },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which one of the following is not an access modifier?",
      "explanation": "Public, private, protected and default are the access modifiers.",
      "options": [
        { "text": "Public", "correct": false },
        { "text": "Private", "correct": false },
        { "text": "Protected", "correct": false },
        { "text": "Void", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "All the variables of class should be ideally declared as?",
      "explanation": "The variables should be private and should be accessed with get and set methods.",
      "options": [
        { "text": "private", "correct": true },
        { "text": "public", "correct": false },
        { "text": "protected", "correct": false },
        { "text": "default", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following modifier means a particular variable cannot be accessed within the package?",
      "explanation": "Private variables are accessible only within the class.",
      "options": [
        { "text": "private", "correct": true },
        { "text": "public", "correct": false },
        { "text": "protected", "correct": false },
        { "text": "default", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "How can a protected modifier be accessed?",
      "explanation": "The protected access modifier is accessible within package and outside the package but only through inheritance. The protected access modifier can be used with data member, method and constructor. It cannot be applied in the class.",
      "options": [
        { "text": "accessible only within the class", "correct": false },
        { "text": "accessible only within package", "correct": false },
        {
          "text": "accessible within package and outside the package but through inheritance only",
          "correct": true
        },
        { "text": "accessible by all", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What happens if constructor of class A is made private?",
      "explanation": "If we make any class constructor private, we cannot create the instance of that class from outside the class.",
      "options": [
        {
          "text": "Any class can instantiate objects of class A",
          "correct": false
        },
        {
          "text": "Objects of class A can be instantiated only within the class where it is declared",
          "correct": true
        },
        {
          "text": "Inherited class can instantiate objects of class A",
          "correct": false
        },
        {
          "text": "classes within the same package as class A can instantiate objects of class A",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "All the variables of interface should be?",
      "explanation": "Variables of an interface are public, static and final by default because the interfaces cannot be instantiated, final ensures the value assigned cannot be changed with the implementing class and public for it to be accessible by all the implementing classes.",
      "options": [
        { "text": "default and final", "correct": false },
        { "text": "default and static", "correct": false },
        { "text": "public, static and final", "correct": true },
        { "text": "protect, static and final", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is true of final class?",
      "explanation": "Final class cannot be inherited. This helps when we do not want classes to provide extension to these classes.",
      "options": [
        { "text": "Final class cause compilation failure", "correct": false },
        { "text": "Final class cannot be instantiated", "correct": false },
        { "text": "Final class cause runtime failure", "correct": false },
        { "text": "Final class cannot be inherited", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "How many copies of static and class variables are created when 10 objects are created of a class?",
      "explanation": "Only one copy of static variables are created when a class is loaded. Each object instantiated has its own copy of instance variables.",
      "options": [
        { "text": "1, 10", "correct": true },
        { "text": "10, 10", "correct": false },
        { "text": "10, 1", "correct": false },
        { "text": "1, 1", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Can a class be declared with a protected modifier.",
      "explanation": "Protected class member (method or variable) is like package-private (default visibility), except that it also can be accessed from subclasses. Since there is no such concept as ‘subpackage’ or ‘package-inheritance’ in Java, declaring class protected or package-private would be the same thing.",
      "options": [
        { "text": "True", "correct": false },
        { "text": "False", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " Which is the modifier when there is none mentioned explicitly?",
      "explanation": "Default is the access modifier when none is defined explicitly. It means the member (method or variable) can be accessed within the same package.",
      "options": [
        { "text": "protected", "correct": false },
        { "text": "private", "correct": false },
        { "text": "public", "correct": false },
        { "text": "default", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Arrays in Java are implemented as?",
      "explanation": "None.",
      "options": [
        { "text": "class", "correct": false },
        { "text": "object", "correct": true },
        { "text": "variable", "correct": false },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these keywords is used to prevent content of a variable from being modified?",
      "explanation": "A variable can be declared final, doing so prevents its content from being modified. Final variables must be initialized when it is declared.",
      "options": [
        { "text": "final", "correct": true },
        { "text": "last", "correct": false },
        { "text": "constant", "correct": false },
        { "text": "static", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these cannot be declared static?",
      "explanation": "static statements are run as soon as class containing then is loaded, prior to any object declaration.",
      "options": [
        { "text": "class", "correct": false },
        { "text": "object", "correct": true },
        { "text": "variable", "correct": false },
        { "text": "method", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following statements are incorrect?",
      "explanation": "All objects of class share same static variable, when object of a class are declared, all the objects share same copy of static members, no copy of static variables are made.",
      "options": [
        {
          "text": "static methods can call other static methods only",
          "correct": false
        },
        {
          "text": "static methods must only access static data",
          "correct": false
        },
        {
          "text": "static methods can not refer to this or super in any way",
          "correct": false
        },
        {
          "text": "when object of class is declared, each object contains its own copy of static variables",
          "correct": true
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following statements are incorrect?",
      "explanation": "None.",
      "options": [
        {
          "text": "Variables declared as final occupy memory",
          "correct": true
        },
        {
          "text": "final variable must be initialized at the time of declaration",
          "correct": false
        },
        {
          "text": "Arrays in java are implemented as an object",
          "correct": false
        },
        {
          "text": "All arrays contain an attribute-length which contains the number of elements stored in the array",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods must be made static?",
      "explanation": "main() method must be declared static, main() method is called by Java runtime system before any object of any class exists.",
      "options": [
        { "text": "main()", "correct": true },
        { "text": "delete()", "correct": false },
        { "text": "run()", "correct": false },
        { "text": "finalize()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\nclass access\n    {\n        public int x;\n \tstatic int y;\n        void cal(int a, int b)\n        {\n            x +=  a ;\n            y +=  b;\n        }        \n    }    \n    class static_specifier \n    {\n        public static void main(String args[])\n        {\n            access obj1 = new access();\n            access obj2 = new access();   \n            obj1.x = 0;\n            obj1.y = 0;\n            obj1.cal(1, 2);\n            obj2.x = 0;\n            obj2.cal(2, 3);\n            System.out.println(obj1.x + \" \" + obj2.y);     \n        }\n   }\n",
      "explanation": "None.\noutput:\n$ javac static_specifier.java\n$ java static_specifier\n1 5\n",
      "options": [
        { "text": "1 2", "correct": false },
        { "text": "2 3", "correct": false },
        { "text": "3 2", "correct": false },
        { "text": "1 5", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class access\n    {\n       static int x;\n       void increment()\n       {\n           x++;\n       }   \n     }   \n    class static_use \n    {\n        public static void main(String args[])\n        {\n            access obj1 = new access();\n            access obj2 = new access();\n            obj1.x = 0;   \n            obj1.increment();\n            obj2.increment();\n            System.out.println(obj1.x + \" \" + obj2.x);\n         }\n   }\n",
      "explanation": "All objects of class share same static variable, all the objects share same copy of static members, obj1.x and obj2.x refer to same element of class which has been incremented twice and its value is 2.\noutput:\n$ javac static_use.java\n$ java static_use \n2 2\n",
      "options": [
        { "text": "1 2", "correct": false },
        { "text": "1 1", "correct": false },
        { "text": "2 2", "correct": true },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class static_out \n    {\n        static int x;\n \tstatic int y;\n        void add(int a , int b)\n        {\n            x = a + b;\n            y = x + b;\n        }\n    }    \n    class static_use \n    {\n        public static void main(String args[])\n        {\n            static_out obj1 = new static_out();\n            static_out obj2 = new static_out();   \n            int a = 2;\n            obj1.add(a, a + 1);\n            obj2.add(5, a);\n            System.out.println(obj1.x + \" \" + obj2.y);     \n        }\n   }\n",
      "explanation": "None.\noutput:\n$ javac static_use.java\n$ java static_use\n7 9\n",
      "options": [
        { "text": "7 7", "correct": false },
        { "text": "6 6", "correct": false },
        { "text": "7 9", "correct": true },
        { "text": "9 7", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class Output \n    {\n        public static void main(String args[])\n        {\n            int arr[] = {1, 2, 3, 4, 5};\n            for ( int i = 0; i < arr.length - 2; ++i)\n                System.out.println(arr[i] + \" \");\n        } \n    }\n",
      "explanation": "arr.length() is 5, so the loop is executed for three times.\noutput:\n$ javac Output.java\n$ java Output\n1 2 3\n",
      "options": [
        { "text": "1 2", "correct": false },
        { "text": "1 2 3", "correct": true },
        { "text": "1 2 3 4", "correct": false },
        { "text": "1 2 3 4 5", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class Output \n    {\n        public static void main(String args[])\n        {\n            int a1[] = new int[10];\n            int a2[] = {1, 2, 3, 4, 5};\n            System.out.println(a1.length + \" \" + a2.length);\n        } \n    }\n",
      "explanation": "Arrays in java are implemented as objects, they contain an attribute that is length which contains the number of elements that can be stored in the array. Hence a1.length gives 10 and a2.length gives 5.\noutput:\n$ javac Output.java\n$ java Output\n10 5\n",
      "options": [
        { "text": "10 5", "correct": true },
        { "text": "5 10", "correct": false },
        { "text": "0 10", "correct": false },
        { "text": "0 5", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "String in Java is a?",
      "explanation": "None.",
      "options": [
        { "text": "class", "correct": true },
        { "text": "object", "correct": false },
        { "text": "variable", "correct": false },
        { "text": "character array", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method of String class is used to obtain character at specified index?",
      "explanation": "None.",
      "options": [
        { "text": "char()", "correct": false },
        { "text": "Charat()", "correct": false },
        { "text": "charat()", "correct": false },
        { "text": "charAt()", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these keywords is used to refer to member of base class from a subclass?",
      "explanation": "Whenever a subclass needs to refer to its immediate superclass, it can do so by use of the keyword super.",
      "options": [
        { "text": "upper", "correct": false },
        { "text": "super", "correct": true },
        { "text": "this", "correct": false },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method of String class can be used to test to strings for equality?",
      "explanation": "None.",
      "options": [
        { "text": "isequal()", "correct": false },
        { "text": "isequals()", "correct": false },
        { "text": "equal()", "correct": false },
        { "text": "equals()", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following statements are incorrect?",
      "explanation": "Strings in Java are immutable that is they can not be modified.",
      "options": [
        { "text": "String is a class", "correct": false },
        { "text": "Strings in java are mutable", "correct": true },
        {
          "text": "Every string is an object of class String",
          "correct": false
        },
        {
          "text": "Java defines a peer class of String, called StringBuffer, which allows string to be altered",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class string_demo \n    {\n        public static void main(String args[])\n        {\n            String obj = \"I\" + \"like\" + \"Java\";   \n            System.out.println(obj);     \n        }\n   }\n\n",
      "explanation": " Java defines an operator +, it is used to concatenate strings.\noutput:\n$ javac string_demo.java\n$ java string_demo\nIlikeJava\n",
      "options": [
        { "text": "I", "correct": false },
        { "text": "like", "correct": false },
        { "text": "Java", "correct": false },
        { "text": "IlikeJava", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class string_class \n    {\n        public static void main(String args[])\n        {\n            String obj = \"I LIKE JAVA\";   \n            System.out.println(obj.charAt(3));\n        } \n    }\n",
      "explanation": "charAt() is a method of class String which gives the character specified by the index. obj.charAt(3) gives 4th character i:e I.\noutput:\n$ javac string_class.java\n$ java string_class\nI\n",
      "options": [
        { "text": "I", "correct": true },
        { "text": "L", "correct": false },
        { "text": "K", "correct": false },
        { "text": "E", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class string_class \n    {\n        public static void main(String args[])\n        {\n            String obj = \"I LIKE JAVA\";   \n            System.out.println(obj.length());\n        }\n    }\n",
      "explanation": " None.\noutput:\n$ javac string_class.java\n$ java string_class \n11\n",
      "options": [
        { "text": "9", "correct": false },
        { "text": "10", "correct": false },
        { "text": "11", "correct": true },
        { "text": "12", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class string_class \n    {\n        public static void main(String args[])\n        {\n            String obj = \"hello\";\n            String obj1 = \"world\";   \n            String obj2 = obj;\n            obj2 = \" world\";\n            System.out.println(obj + \" \" + obj2);\n        }\n    }\n",
      "explanation": "None.\noutput:\n$ javac string_class.java\n$ java string_class\nhello world\n",
      "options": [
        { "text": "hello hello", "correct": false },
        { "text": "world world", "correct": false },
        { "text": "hello world", "correct": true },
        { "text": "world hello", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class string_class \n    {\n        public static void main(String args[])\n        {\n            String obj = \"hello\";\n            String obj1 = \"world\";   \n            String obj2 = \"hello\";\n            System.out.println(obj.equals(obj1) + \" \" + obj.equals(obj2));\n        }\n    }\n",
      "explanation": "equals() is method of class String, it is used to check equality of two String objects, if they are equal, true is retuned else false.\noutput:\n$ javac string_class.java\n$ java string_class\nfalse true\n",
      "options": [
        { "text": "false false", "correct": false },
        { "text": "true true", "correct": false },
        { "text": "true false", "correct": false },
        { "text": "false true", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is the method which is executed first before execution of any other thing takes place in a program?",
      "explanation": "If a static method is present in the program then it will be executed first, then main will be executed.",
      "options": [
        { "text": "main method", "correct": false },
        { "text": "finalize method", "correct": false },
        { "text": "static method", "correct": true },
        { "text": "private method", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the process of defining more than one method in a class differentiated by parameters?",
      "explanation": "Function overloading is a process of defining more than one method in a class with same name differentiated by function signature i:e return type or parameters type and number. Example –  int volume(int length, int width) & int volume(int length , int width , int height) can be used to calculate volume.",
      "options": [
        { "text": "Function overriding", "correct": false },
        { "text": "Function overloading", "correct": true },
        { "text": "Function doubling", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these can be used to differentiate two or more methods having the same name?",
      "explanation": "None.",
      "options": [
        { "text": "Parameters data type", "correct": false },
        { "text": "Number of parameters", "correct": false },
        { "text": "Return type of method", "correct": false },
        { "text": "All of the mentioned", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these data type can be used for a method having a return statement in it?",
      "explanation": "None.",
      "options": [
        { "text": "void", "correct": false },
        { "text": "int", "correct": false },
        { "text": "float", "correct": false },
        { "text": "both int and float", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these statement is incorrect?",
      "explanation": "Even if a method is returning a value, it is not necessary to store that value.",
      "options": [
        {
          "text": "Two or more methods with same name can be differentiated on the basis of their parameters data type",
          "correct": false
        },
        {
          "text": "Two or more method having same name can be differentiated on basis of number of parameters",
          "correct": false
        },
        {
          "text": "Any already defined method in java library can be defined again in the program with different data type of parameters",
          "correct": false
        },
        {
          "text": "If a method is returning a value the calling statement must have a variable to store that value",
          "correct": true
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class box \n    {\n        int width;\n        int height;\n        int length;\n        int volume;\n        void volume(int height, int length, int width) \n        {\n             volume = width * height * length;\n        } \n    }    \n    class Prameterized_method{\n        public static void main(String args[]) \n        {\n            box obj = new box();\n            obj.height = 1;\n            obj.length = 5;\n            obj.width = 5;\n            obj.volume(3, 2, 1);\n            System.out.println(obj.volume);        \n        } \n    }\n",
      "explanation": "None\noutput:\n\n$ Prameterized_method.java\n$ Prameterized_method\n6\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "6", "correct": true },
        { "text": "25", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class equality \n    {\n        int x;\n        int y;\n        boolean isequal()\n        {\n            return(x == y);  \n        } \n    }    \n    class Output \n    {\n        public static void main(String args[]) \n        {\n            equality obj = new equality();\n            obj.x = 5;\n            obj.y = 5;\n            System.out.println(obj.isequal);\n        } \n    }\n\n",
      "explanation": "None\noutput:\n$ javac Output.java\n$ java Output \ntrue\n",
      "options": [
        { "text": "false", "correct": false },
        { "text": "true", "correct": true },
        { "text": "0", "correct": false },
        { "text": "1", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class box \n    {\n        int width;\n        int height;\n        int length;\n        int volume;\n        void volume() \n        {\n            volume = width * height * length;\n        } \n        void volume(int x) \n        {\n            volume = x;\n        }\n    }    \n    class Output \n    { \n        public static void main(String args[]) \n        {\n            box obj = new box();\n            obj.height = 1;\n            obj.length = 5;\n            obj.width = 5;\n            obj.volume(5);\n            System.out.println(obj.volume);        \n        } \n    }\n",
      "explanation": "None.\noutput:\n$ javac Output.java\n$ java Output\n5\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "5", "correct": true },
        { "text": "25", "correct": false },
        { "text": "26", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output \n    {\n        static void main(String args[]) \n        {    \n             int x , y = 1;\n             x = 10;\n             if(x != 10 && x / 0 == 0)\n                 System.out.println(y);\n             else\n                 System.out.println(++y);\n        } \n    }\n",
      "explanation": "main() method must be made public. Without main() being public java run time system will not be able to access main() and will not be able to execute the code.\noutput:\n$ javac Output.java\nError: Main method not found in class Output, please define the main method as:\n   public static void main(String[] args)\n",
      "options": [
        { "text": "1", "correct": false },
        { "text": "2", "correct": false },
        { "text": "Runtime Error", "correct": false },
        { "text": "Compilation Error", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class area \n    {\n        int width;\n        int length;\n        int height;\n        area() \n        {\n        width = 5;\n        length = 6;\n        height = 1;\n        }\n        void volume() \n        {\n             volume = width * height * length;\n        } \n    }    \n    class cons_method \n    {\n        public static void main(String args[]) \n        {\n            area obj = new area();\n            obj.volume();\n            System.out.println(obj.volume);\n        } \n    }\n",
      "explanation": "None.\noutput:\n$ javac cons_method.java\n$ java cons_method\n30\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "25", "correct": false },
        { "text": "30", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of this method is given parameter via command line arguments?",
      "explanation": "Only main() method can be given parameters via using command line arguments.",
      "options": [
        { "text": "main()", "correct": true },
        { "text": "recursive() method", "correct": false },
        { "text": "Any method", "correct": false },
        { "text": "System defined methods", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these data types is used to store command line arguments?",
      "explanation": "None.",
      "options": [
        { "text": "Array", "correct": false },
        { "text": "Stack", "correct": false },
        { "text": "String", "correct": true },
        { "text": "Integer", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "How many arguments can be passed to main()?",
      "explanation": "None.",
      "options": [
        { "text": "Infinite", "correct": true },
        { "text": "Only 1", "correct": false },
        { "text": "System Dependent", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is a correct statement about args in the following line of code?\n\npublic static void main(String args[])\n",
      "explanation": "args in an array of String.",
      "options": [
        { "text": "args is a String", "correct": false },
        { "text": "args is a Character", "correct": false },
        { "text": "args is an array of String", "correct": true },
        { "text": "args in an array of Character", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Can command line arguments be converted into int automatically if required?",
      "explanation": "All command Line arguments are passed as a string. We must convert numerical value to their internal forms manually.",
      "options": [
        { "text": "Yes", "correct": false },
        { "text": "No", "correct": true },
        { "text": "Compiler Dependent", "correct": false },
        { "text": "Only ASCII characters can be converted", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program, Command line execution is done as – “java Output This is a command Line”?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            System.out.print(\"args[0]\");\n        }\n    }\n",
      "explanation": "None.\nOutput:\n$ javac Output.javac\njava Output This is a command Line\nThis\n",
      "options": [
        { "text": "java", "correct": false },
        { "text": "Output", "correct": false },
        { "text": "This", "correct": true },
        { "text": "is", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program, Command line exceution is done as – “java Output This is a command Line”?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            System.out.print(\"args[3]\");\n        }\n    }\n",
      "explanation": "None.\nOutput:\n$ javac Output.javac\njava Output This is a command Line\ncommand\n",
      "options": [
        { "text": "java", "correct": false },
        { "text": "is", "correct": false },
        { "text": "This", "correct": false },
        { "text": "command", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program, Command line execution is done as – “java Output This is a command Line”?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            System.out.print(\"args\");\n        }\n    }\n",
      "explanation": " None.\nOutput:\n$ javac Output.javac\njava Output This is a command Line\nThis is a command Line\n",
      "options": [
        { "text": "This", "correct": false },
        { "text": "java Output This is a command Line", "correct": false },
        { "text": "This is a command Line", "correct": true },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program, Command line execution is done as – “java Output command Line 10 A b 4 N”?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            System.out.print(\"(int)args[2] * 2\");\n        }\n    }\n",
      "explanation": "None.\nOutput:\n$ javac Output.javac\njava Output command Line 10 A b 4 N\n20\n",
      "options": [
        { "text": "java", "correct": false },
        { "text": "10", "correct": false },
        { "text": "20", "correct": true },
        { "text": "b", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program, Command line execution is done as – “java Output command Line 10 A b 4 N”?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            System.out.print(\"args[6]\");\n        }\n    }\n",
      "explanation": "None.\nOutput:\n$ javac Output.javac\njava Output command Line 10 A b 4 N\nN\n",
      "options": [
        { "text": "java", "correct": false },
        { "text": "10", "correct": false },
        { "text": "b", "correct": false },
        { "text": "N", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java snippet, if attempted to compile and run this code with command line argument “java abc Rakesh Sharma”?\n\npublic class abc\n{\n\tint a=2000;\n        public static void main(String argv[])\n        {\n\t    System.out.println(argv[1]+\" :-Please pay Rs.\"+a);\n        }\n}\n",
      "explanation": "Main method is static and cannot access non static variable a.",
      "options": [
        { "text": "Compile time error", "correct": true },
        { "text": "Compilation but runtime error", "correct": false },
        {
          "text": "Compilation and output Rakesh :-Please pay Rs.2000",
          "correct": false
        },
        {
          "text": "Compilation and output Sharma :-Please pay Rs.2000",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java snippet, if attempted to compile and execute?\n\nclass abc\n{\n    public static void main(String args[])\n    {\n        if(args.length>0)\n        System.out.println(args.length);\n    }\n}\n",
      "explanation": "As no argument is passed to the code, the length of args is 0. So the code will not print.",
      "options": [
        { "text": "The snippet compiles, runs and prints 0", "correct": false },
        { "text": "The snippet compiles, runs and prints 1", "correct": false },
        { "text": "The snippet does not compile", "correct": false },
        {
          "text": "The snippet compiles and runs but does not print anything",
          "correct": true
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java snippet, if compiled and executed with command line argument “java abc 1 2 3”?\n\npublic class abc\n{\n   static public void main(String [] xyz)\n   {\n       for(int n=1;n<xyz.length; n++)\n       {\n          System.out.println(xyz[n]+\"\");\n       }\n   }\n}\n",
      "explanation": "The index of array starts with 0. Since the loop is starting with 1 it will print 2 3.",
      "options": [
        { "text": "1 2", "correct": false },
        { "text": "2 3", "correct": true },
        { "text": "1 2 3", "correct": false },
        { "text": "Compilation error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code snippet running with “java demo I write java code”?\n\npublic class demo\n{\n   public static void main(String args[])\n   {\n        System.out.println(args[0]+\"\"+args[args.length-1]);\n   }\n}\n",
      "explanation": "The index of array starts with 0 till length – 1. Hence it would print “I code”.",
      "options": [
        {
          "text": "The snippet compiles, runs and prints “java demo”",
          "correct": false
        },
        {
          "text": "The snippet compiles, runs and prints “java code”",
          "correct": false
        },
        {
          "text": "The snippet compiles, runs and prints “demo code”",
          "correct": false
        },
        {
          "text": "The snippet compiles, runs and prints “I code”",
          "correct": true
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java snippet, if compiled and executed with command line “hello there”?\n\npublic class abc\n{\n    String[] xyz;\n \n    public static void main(String argv[])\n    {\n        xyz=argv;\n    }\n \n    public void runMethod()\n    {\n        System.out.println(argv[1]);\n    }\n}\n",
      "explanation": "Error would be “Cannot make static reference to a non static variable”. Even if main method was not static, the array argv is local to the main method and would not be visible within runMethod.",
      "options": [
        { "text": "Compile time error", "correct": true },
        { "text": "Output would be “hello”", "correct": false },
        { "text": "Output would be “there”", "correct": false },
        { "text": "Output would be “hello there”", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "How do we pass command line argument in Eclipse?",
      "explanation": "Arguments tab is used to pass command line argument in eclipse.",
      "options": [
        { "text": "Arguments tab", "correct": true },
        { "text": "Variable tab", "correct": false },
        {
          "text": "Cannot pass command line argument in eclipse",
          "correct": false
        },
        { "text": "Environment variable tab", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which class allows parsing of command line arguments?",
      "explanation": "JCommander is a very small Java framework that makes it trivial to parse command line parameters.",
      "options": [
        { "text": "Args", "correct": false },
        { "text": "JCommander", "correct": true },
        { "text": "Command Line", "correct": false },
        { "text": "Input", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which annotation is used to represent command line input and assigned to correct data type?",
      "explanation": " @Parameter, @Parameter(names = { “-log”, “-verbose” }, description = “Level of verbosity”), etc are various forms of using @Parameter",
      "options": [
        { "text": "@Input", "correct": false },
        { "text": "@Variable", "correct": false },
        { "text": "@Command Line", "correct": false },
        { "text": "@Parameter", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code snippet run as $ java Demo –length 512 –breadth 2 -h 3?\n\nclass Demo {\n    @Parameter(names={\"--length\"})\n    int length;\n \n    @Parameter(names={\"--breadth\"})\n    int breadth;\n \n    @Parameter(names={\"--height\",\"-h\"})\n    int height;\n \n    public static void main(String args[]) \n    {\n        Demo demo = new Demo();\n        new JCommander(demo, args);\n        demo.run();\n    }\n \n    public void run() \n    {\n        System.out.println(length+\" \"+ breadth+\" \"+height);\n    }\n}\n",
      "explanation": "JCommander helps easily pass command line arguments. @Parameter assigns input to desired parameter.",
      "options": [
        { "text": "2 512 3", "correct": false },
        { "text": "2 2 3", "correct": false },
        { "text": "512 2 3", "correct": true },
        { "text": "512 512 3", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What is the use of @syntax?",
      "explanation": "JCommander supports the @syntax, which allows us to put all our options into a file and pass this file as a parameter.\n/tmp/parameters\n-verbose\nfile1\nfile2\n$ java Main @/tmp/parameters\n",
      "options": [
        { "text": "Allows multiple parameters to be passed", "correct": false },
        {
          "text": "Allows one to put all your options into a file and pass this file as a parameter",
          "correct": true
        },
        { "text": "Allows one to pass only one parameter", "correct": false },
        {
          "text": "Allows one to pass one file containing only one parameter",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is Recursion in Java?",
      "explanation": "Recursion is the process of defining something in terms of itself. It allows us to define a method that calls itself.",
      "options": [
        { "text": "Recursion is a class", "correct": false },
        {
          "text": "Recursion is a process of defining a method that calls other methods repeatedly",
          "correct": true
        },
        {
          "text": "Recursion is a process of defining a method that calls itself repeatedly",
          "correct": false
        },
        {
          "text": "Recursion is a process of defining a method that calls other methods which in turn call again this method",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these data types is used by operating system to manage the Recursion in Java?",
      "explanation": "Recursions are always managed by using stack.",
      "options": [
        { "text": "Array", "correct": false },
        { "text": "Stack", "correct": true },
        { "text": "Queue", "correct": false },
        { "text": "Tree", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these will happen if recursive method does not have a base case?",
      "explanation": "If a recursive method does not have a base case then an infinite loop occurs which results in Stack Overflow.",
      "options": [
        { "text": "An infinite loop occurs", "correct": true },
        {
          "text": "System stops the program after some time",
          "correct": false
        },
        {
          "text": "After 1000000 calls it will be automatically stopped",
          "correct": false
        },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is not a correct statement?",
      "explanation": "Recursion is always managed by operating system.",
      "options": [
        {
          "text": "A recursive method must have a base case",
          "correct": false
        },
        { "text": "Recursion always uses stack", "correct": false },
        {
          "text": "Recursive methods are faster that programmers written loop to call the function repeatedly using a stack",
          "correct": false
        },
        {
          "text": "Recursion is managed by Java Runtime environment",
          "correct": true
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these packages contains the exception Stack Overflow in Java?",
      "explanation": "None.",
      "options": [
        { "text": "java.lang", "correct": true },
        { "text": "java.util", "correct": false },
        { "text": "java.io", "correct": false },
        { "text": "java.system", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class recursion \n    {\n        int func (int n) \n        {\n            int result;\n            result = func (n - 1);\n            return result;\n        }\n    } \n    class Output \n    {\n        public static void main(String args[]) \n        {\n            recursion obj = new recursion() ;\n            System.out.print(obj.func(12));\n        }\n    }\n",
      "explanation": "Since the base case of the recursive function func() is not defined hence infinite loop occurs and results in Stack Overflow.\nOutput:\n\n$ javac Output.javac\n$ java Output\nException in thread \"main\" java.lang.StackOverflowError\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "Compilation Error", "correct": false },
        { "text": "Runtime Error", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class recursion \n    {\n        int func (int n) \n        {\n            int result;\n            if (n == 1)\n                return 1;\n            result = func (n - 1);\n            return result;\n        }\n    } \n    class Output \n    {\n        public static void main(String args[]) \n        {\n            recursion obj = new recursion() ;\n            System.out.print(obj.func(5));\n        }\n    }\n",
      "explanation": "None.\nOutput:\n$ javac Output.javac\n$ java Output\n1\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": true },
        { "text": "120", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class recursion \n    {\n        int fact(int n) \n        {\n            int result;\n            if (n == 1)\n                return 1;\n            result = fact(n - 1) * n;\n            return result;\n        }\n    } \n    class Output \n    {\n        public static void main(String args[]) \n        {\n            recursion obj = new recursion() ;\n            System.out.print(obj.fact(5));\n        }\n    }\n",
      "explanation": "fact() method recursively calculates factorial of a number, when value of n reaches 1, base case is excuted and 1 is returned.\nOutput:\n$ javac Output.javac\n$ java Output\n120\n",
      "options": [
        { "text": "24", "correct": false },
        { "text": "30", "correct": false },
        { "text": "120", "correct": true },
        { "text": "720", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class recursion \n    {\n        int fact(int n) \n        {\n            int result;\n            if (n == 1)\n                return 1;\n            result = fact(n - 1) * n;\n            return result;\n        }\n    } \n    class Output \n    {\n        public static void main(String args[]) \n        {\n            recursion obj = new recursion() ;\n            System.out.print(obj.fact(1));\n        }\n    }\n",
      "explanation": " fact() method recursively calculates factorial of a number, when value of n reaches 1, base case is excuted and 1 is returned.\nOutput:\n$ javac Output.javac\n$ java Output\n1\n",
      "options": [
        { "text": "1", "correct": true },
        { "text": "30", "correct": false },
        { "text": "120", "correct": false },
        { "text": "Runtime Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class recursion \n    {\n        int fact(int n) \n        {\n            int result;\n            if (n == 1)\n                return 1;\n            result = fact(n - 1) * n;\n            return result;\n        }\n    } \n    class Output \n    {\n        public static void main(String args[]) \n        {\n            recursion obj = new recursion() ;\n            System.out.print(obj.fact(6));\n        }\n    }\n",
      "explanation": " None.\nOutput:\n$ javac Output.javac\n$ java Output\n720\n\n",
      "options": [
        { "text": "1", "correct": false },
        { "text": "30", "correct": false },
        { "text": "120", "correct": false },
        { "text": "720", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of this keyword can be used in a subclass to call the constructor of superclass?",
      "explanation": "None.",
      "options": [
        { "text": "super", "correct": true },
        { "text": "this", "correct": false },
        { "text": "extent", "correct": false },
        { "text": "extends", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the process of defining a method in a subclass having same name & type signature as a method in its superclass?",
      "explanation": "None.",
      "options": [
        { "text": "Method overloading", "correct": false },
        { "text": "Method overriding", "correct": true },
        { "text": "Method hiding", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these keywords can be used to prevent Method overriding?",
      "explanation": "To disallow a method from being overridden, specify final as a modifier at the start of its declaration. Methods declared as final cannot be overridden.",
      "options": [
        { "text": "static", "correct": false },
        { "text": "constant", "correct": false },
        { "text": "protected", "correct": false },
        { "text": "final", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is correct way of calling a constructor having no parameters, of superclass A by subclass B?",
      "explanation": "None.",
      "options": [
        { "text": "super(void);", "correct": false },
        { "text": "superclass.();", "correct": false },
        { "text": "super.A();", "correct": false },
        { "text": "super();", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "At line number 2 in the following code, choose 3 valid data-type attributes/qualifiers among “final, static, native, public, private, abstract, protected”\n\npublic interface Status\n   {\n        /* insert qualifier here */ int MY_VALUE = 10;\n   }\n",
      "explanation": "Every interface variable is implicitly public static and final.",
      "options": [
        { "text": "final, native, private", "correct": false },
        { "text": "final, static, protected", "correct": false },
        { "text": "final, private, abstract", "correct": false },
        { "text": "final, static, public", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is supported by method overriding in Java?",
      "explanation": "None.",
      "options": [
        { "text": "Abstraction", "correct": false },
        { "text": "Encapsulation", "correct": false },
        { "text": "Polymorphism", "correct": true },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n class Alligator \n {\n  public static void main(String[] args) \n   {\n   int []x[] = {{1,2}, {3,4,5}, {6,7,8,9}};\n   int [][]y = x;\n   System.out.println(y[2][1]);\n   }\n }\n",
      "explanation": "Both x,and y are pointing to the same array.",
      "options": [
        { "text": "2", "correct": false },
        { "text": "3", "correct": false },
        { "text": "7", "correct": true },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n   final class A \n    {\n         int i;\n    }    \n    class B extends A \n    {\n        int j;\n        System.out.println(j + \" \" + i);  \n    }    \n    class inheritance \n    {\n        public static void main(String args[])\n        {\n            B obj = new B();\n            obj.display();     \n        }\n   }\n",
      "explanation": "class A has been declared final hence it cannot be inherited by any other class. Hence class B does not have member i, giving compilation error.\noutput:\n$ javac inheritance.java\nException in thread \"main\" java.lang.Error: Unresolved compilation problem: \n\ti cannot be resolved or is not a field\n",
      "options": [
        { "text": "2 2", "correct": false },
        { "text": "3 3", "correct": false },
        { "text": "Runtime Error", "correct": false },
        { "text": "Compilation Error", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n  class Abc\n  {\n      public static void main(String[]args)\n      {\n          String[] elements = { \"for\", \"tea\", \"too\" };\n          String first = (elements.length > 0) ? elements[0]: null;\n      }\n  }\n",
      "explanation": "The value at the 0th position will be assigned to the variable first.",
      "options": [
        { "text": "Compilation error", "correct": false },
        { "text": "An exception is thrown at run time", "correct": false },
        { "text": "The variable first is set to null", "correct": false },
        { "text": "The variable first is set to elements[0] ", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class A \n    {\n        int i;\n        public void display() \n        {\n            System.out.println(i);\n        }    \n    }    \n    class B extends A \n   {\n        int j;\n        public void display() \n        {\n            System.out.println(j);\n        } \n    }    \n    class Dynamic_dispatch \n   {\n        public static void main(String args[])\n        {\n            B obj2 = new B();\n            obj2.i = 1;\n            obj2.j = 2;\n            A r;\n            r = obj2;\n            r.display();     \n        }\n   }\n",
      "explanation": "r is reference of type A, the program assigns a reference of object obj2 to r and uses that reference to call function display() of class B.\noutput:\n$ javac Dynamic_dispatch.java\n$ java Dynamic_dispatch \n2\n",
      "options": [
        { "text": "1", "correct": false },
        { "text": "2", "correct": true },
        { "text": "3", "correct": false },
        { "text": "4", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class is superclass of every class in Java?",
      "explanation": "Object class is superclass of every class in Java.",
      "options": [
        { "text": "String class", "correct": false },
        { "text": "Object class", "correct": true },
        { "text": "Abstract class", "correct": false },
        { "text": "ArrayList class", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method of Object class can clone an object?",
      "explanation": "None.",
      "options": [
        { "text": "Objectcopy()", "correct": false },
        { "text": "copy()", "correct": false },
        { "text": "Object clone()", "correct": true },
        { "text": "clone()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method of Object class is used to obtain class of an object at run time?",
      "explanation": "None.",
      "options": [
        { "text": "get()", "correct": false },
        { "text": "void getclass()", "correct": false },
        { "text": "Class getclass()", "correct": true },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these keywords can be used to prevent inheritance of a class?",
      "explanation": "Declaring a class final implicitly declared all of its methods final, and makes the class inheritable.",
      "options": [
        { "text": "super", "correct": false },
        { "text": "constant", "correct": false },
        { "text": "class", "correct": false },
        { "text": "final", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these keywords cannot be used for a class which has been declared final?",
      "explanation": "A abstract class is incomplete by itself and relies upon its subclasses to provide a complete implementation. If we declare a class final then no class can inherit that class, an abstract class needs its subclasses hence both final and abstract cannot be used for a same class.",
      "options": [
        { "text": "abstract", "correct": true },
        { "text": "extends", "correct": false },
        { "text": "abstract and extends", "correct": false },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class relies upon its subclasses for complete implementation of its methods?",
      "explanation": "None.",
      "options": [
        { "text": "Object class", "correct": false },
        { "text": "abstract class", "correct": true },
        { "text": "ArrayList class", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    abstract class A \n    {\n        int i;\n        abstract void display();\n    }    \n    class B extends A \n    {\n        int j;\n        void display() \n        {\n            System.out.println(j);\n        }\n    }    \n    class Abstract_demo \n    {\n        public static void main(String args[])\n        {\n            B obj = new B();\n            obj.j=2;\n            obj.display();    \n        }\n    }\n",
      "explanation": "class A is an abstract class, it contains a abstract function display(), the full implementation of display() method is given in its subclass B, Both the display functions are the same. Prototype of display() is defined in class A and its implementation is given in class B.\noutput:\n$ javac Abstract_demo.java\n$ java Abstract_demo \n2\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "2", "correct": true },
        { "text": "Runtime Error", "correct": false },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n   class A \n   {\n\tint i;\n\tint j;\n        A() \n        {\n            i = 1;\n            j = 2;\n        }\n   }\n   class Output \n   {\n        public static void main(String args[])\n        {\n             A obj1 = new A();\n             A obj2 = new A();\n\t     System.out.print(obj1.equals(obj2));\n        }\n   }\n",
      "explanation": "obj1 and obj2 are two different objects. equals() is a method of Object class, Since Object class is superclass of every class it is available to every object.\noutput:\n$ javac Output.java\n$ java Output\nfalse\n",
      "options": [
        { "text": "false", "correct": true },
        { "text": "true", "correct": false },
        { "text": "1", "correct": false },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class Output \n    {\n        public static void main(String args[])\n        {\n             Object obj = new Object();\n\t     System.out.print(obj.getclass());\n        }\n    }\n",
      "explanation": " None.\noutput:\n$ javac Output.java\n$ java Output\nclass java.lang.Object\n",
      "options": [
        { "text": "Object", "correct": false },
        { "text": "class Object", "correct": false },
        { "text": "class java.lang.Object", "correct": true },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java code?\n\n   class A \n   {\n        int i;\n\tint j;\n        A() \n        {\n            i = 1;\n            j = 2;\n        }\n   }\n   class Output \n   {\n        public static void main(String args[])\n        {\n             A obj1 = new A();\n\t     System.out.print(obj1.toString());\n        }\n   }\n",
      "explanation": "toString() is method of class Object, since it is superclass of every class, every object has this method. toString() returns the string associated with the calling object.\noutput:\n$ javac Output.java\n$ java Output \nA@1cd2e5f\n",
      "options": [
        { "text": "true", "correct": false },
        { "text": "false", "correct": false },
        { "text": "String associated with obj1", "correct": true },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these keywords are used to define an abstract class?",
      "explanation": "None.",
      "options": [
        { "text": "abst", "correct": false },
        { "text": "abstract", "correct": true },
        { "text": "Abstract", "correct": false },
        { "text": "abstract class", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is not abstract?",
      "explanation": "Thread is not an abstract class.",
      "options": [
        { "text": "Thread", "correct": true },
        { "text": "AbstractList", "correct": false },
        { "text": "List", "correct": false },
        { "text": "None of the Mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "If a class inheriting an abstract class does not define all of its function then it will be known as?",
      "explanation": "Any subclass of an abstract class must either implement all of the abstract method in the superclass or be itself declared abstract.",
      "options": [
        { "text": "Abstract", "correct": true },
        { "text": "A simple class", "correct": false },
        { "text": "Static class", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is not a correct statement?",
      "explanation": "Abstract class cannot be directly initiated with new operator, Since abstract class does not contain any definition of implementation it is not possible to create an abstract object.",
      "options": [
        {
          "text": "Every class containing abstract method must be declared abstract",
          "correct": false
        },
        {
          "text": "Abstract class defines only the structure of the class not its implementation",
          "correct": false
        },
        {
          "text": "Abstract class can be initiated by new operator",
          "correct": true
        },
        { "text": "Abstract class can be inherited", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these packages contains abstract keyword?",
      "explanation": "None.",
      "options": [
        { "text": "java.lang", "correct": true },
        { "text": "java.util", "correct": false },
        { "text": "java.io", "correct": false },
        { "text": "java.system", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class A \n    {\n        public int i;\n        private int j;\n    }    \n    class B extends A \n    {\n        void display() \n        {\n            super.j = super.i + 1;\n            System.out.println(super.i + \" \" + super.j);\n        }\n    }    \n    class inheritance \n   {\n        public static void main(String args[])\n        {\n            B obj = new B();\n            obj.i=1;\n            obj.j=2;   \n            obj.display();     \n        }\n   }\n",
      "explanation": "Class contains a private member variable j, this cannot be inherited by subclass B and does not have access to it.\noutput:\n$ javac inheritance.java\nException in thread \"main\" java.lang.Error: Unresolved compilation problem: \n\tThe field A.j is not visible\n",
      "options": [
        { "text": "2 2", "correct": false },
        { "text": "3 3", "correct": false },
        { "text": "Runtime Error", "correct": false },
        { "text": "Compilation Error", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class A \n    {\n        public int i;\n        public int j;\n        A() \n       {\n            i = 1;\n            j = 2;\n\t}\n    }    \n    class B extends A \n    {\n        int a;\n\tB() \n        {\n            super();\n        } \n    }    \n    class super_use \n    {\n        public static void main(String args[])\n        {\n            B obj = new B();\n            System.out.println(obj.i + \" \" + obj.j)     \n        }\n   }\n",
      "explanation": "Keyword super is used to call constructor of class A by constructor of class B. Constructor of a initializes i & j to 1 & 2 respectively.\noutput:\n$ javac super_use.java\n$ java super_use\n1 2\n",
      "options": [
        { "text": "1 2", "correct": true },
        { "text": "2 1", "correct": false },
        { "text": "Runtime Error", "correct": false },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class A \n    {\n        int i;\n        void display() \n        {\n            System.out.println(i);\n        }\n    }    \n    class B extends A \n    {\n        int j;\n        void display() \n        {\n            System.out.println(j);\n        }\n    }    \n    class method_overriding \n    {\n        public static void main(String args[])\n        {\n            B obj = new B();\n            obj.i=1;\n            obj.j=2;   \n            obj.display();     \n        }\n   }\n",
      "explanation": " class A & class B both contain display() method, class B inherits class A, when display() method is called by object of class B, display() method of class B is executed rather than that of Class A.\noutput:\n$ javac method_overriding.java\n$ java method_overriding\n2\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "2", "correct": true },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class A \n    {\n        public int i;\n        protected int j;\n    }    \n    class B extends A \n    {\n        int j;\n        void display() \n        {\n            super.j = 3;\n            System.out.println(i + \" \" + j);\n        }\n    }    \n    class Output \n    {\n        public static void main(String args[])\n        {\n            B obj = new B();\n            obj.i=1;\n            obj.j=2;   \n            obj.display();     \n        }\n   }\n",
      "explanation": "Both class A & B have member with same name that is j, member of class B will be called by default if no specifier is used. I contains 1 & j contains 2, printing 1 2.\noutput:\n$ javac Output.java\n$ java Output\n1 2\n",
      "options": [
        { "text": "1 2", "correct": true },
        { "text": "2 1", "correct": false },
        { "text": "1 3", "correct": false },
        { "text": "3 1", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of this keyword must be used to inherit a class?",
      "explanation": "None.",
      "options": [
        { "text": "super", "correct": false },
        { "text": "this", "correct": false },
        { "text": "extent", "correct": false },
        { "text": "extends", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "A class member declared protected becomes a member of subclass of which type?",
      "explanation": "A class member declared protected becomes a private member of subclass.",
      "options": [
        { "text": "public member", "correct": false },
        { "text": "private member", "correct": true },
        { "text": "protected member", "correct": false },
        { "text": "static member", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is correct way of inheriting class A by class B?",
      "explanation": "None.",
      "options": [
        { "text": "class B + class A {}", "correct": false },
        { "text": "class B inherits class A {}", "correct": false },
        { "text": "class B extends A {}", "correct": true },
        { "text": "class B extends class A {}", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which two classes use the Shape class correctly?\n\nA. public class Circle implements Shape \n   {\n    private int radius;\n   }\nB. public abstract class Circle extends Shape \n   {\n    private int radius;\n   }\nC. public class Circle extends Shape \n   {\n   private int radius;\n   public void draw();\n   }\nD. public abstract class Circle implements Shape \n   {\n    private int radius;\n    public void draw();\n   }\nE. public class Circle extends Shape \n   {\n    private int radius;\n    public void draw()\n    {\n     /* code here */\n    }\n   }\nF. public abstract class Circle implements Shape \n   {\n     private int radius;\n     public void draw() \n     { \n      /* code here */ \n     }\n   }\n",
      "explanation": "If one is extending any class, then they should use extends keyword not implements.",
      "options": [
        { "text": "B,E", "correct": true },
        { "text": "A,C", "correct": false },
        { "text": "C,E", "correct": false },
        { "text": "T,H", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class A \n    {\n        int i;\n        void display() \n        {\n            System.out.println(i);\n        }\n    }    \n    class B extends A \n    {\n        int j;\n        void display() \n        {\n            System.out.println(j);\n        }\n    }    \n    class inheritance_demo \n    {\n        public static void main(String args[])\n        {\n            B obj = new B();\n            obj.i=1;\n            obj.j=2;   \n            obj.display();     \n        }\n   }\n",
      "explanation": "Class A & class B both contain display() method, class B inherits class A, when display() method is called by object of class B, display() method of class B is executed rather than that of Class A.\noutput:\n$ javac inheritance_demo.java \n$ java inheritance_demo \n2\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "2", "correct": true },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class A \n    {\n        int i;\n    }    \n    class B extends A \n    {\n        int j;\n        void display() \n        {\n            super.i = j + 1;\n            System.out.println(j + \" \" + i);\n        }\n    }    \n    class inheritance \n    {\n        public static void main(String args[])\n        {\n            B obj = new B();\n            obj.i=1;\n            obj.j=2;   \n            obj.display();     \n        }\n   }\n",
      "explanation": " None\noutput:\n$ javac inheritance.java\n$ java inheritance\n2 3\n",
      "options": [
        { "text": "2 2", "correct": false },
        { "text": "3 3", "correct": false },
        { "text": "2 3", "correct": true },
        { "text": "3 2", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class A \n    {\n        public int i;\n        public int j;\n        A() \n        {\n            i = 1;\n            j = 2;\n\t}\n    }    \n    class B extends A \n    {\n        int a;\n        B() \n        {\n            super();\n        } \n    }    \n    class super_use \n    {\n        public static void main(String args[])\n        {\n            B obj = new B();\n            System.out.println(obj.i + \" \" + obj.j)     \n        }\n   }\n",
      "explanation": "Keyword super is used to call constructor of class A by constructor of class B. Constructor of a initializes i & j to 1 & 2 respectively.\noutput:\n$ javac super_use.java\n$ java super_use\n1 2\n",
      "options": [
        { "text": "1 2", "correct": true },
        { "text": "2 1", "correct": false },
        { "text": "Runtime Error", "correct": false },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is not type of inheritance?",
      "explanation": "Inheritance is way of acquiring attributes and methods of parent class. Java supports hierarchical inheritance directly.",
      "options": [
        { "text": "Single inheritance", "correct": false },
        { "text": "Double inheritance", "correct": true },
        { "text": "Hierarchical inheritance", "correct": false },
        { "text": "Multiple inheritance", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Using which of the following, multiple inheritance in Java can be implemented?",
      "explanation": "Multiple inheritance in java is implemented using interfaces. Multiple interfaces can be implemented by a class.",
      "options": [
        { "text": "Interfaces", "correct": true },
        { "text": "Multithreading", "correct": false },
        { "text": "Protected methods", "correct": false },
        { "text": "Private methods", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "All classes in Java are inherited from which class?",
      "explanation": "All classes in java are inherited from Object class. Interfaces are not inherited from Object Class.",
      "options": [
        { "text": "java.lang.class", "correct": false },
        { "text": "java.class.inherited", "correct": false },
        { "text": "java.class.object", "correct": false },
        { "text": "java.lang.Object", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "In order to restrict a variable of a class from inheriting to subclass, how variable should be declared?",
      "explanation": "By declaring variable private, the variable will not be available in inherited to subclass.",
      "options": [
        { "text": "Protected", "correct": false },
        { "text": "Private", "correct": true },
        { "text": "Public", "correct": false },
        { "text": "Static", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "If super class and subclass have same variable name, which keyword should be used to use super class?",
      "explanation": "Super keyword is used to access hidden super class variable in subclass.",
      "options": [
        { "text": "super", "correct": true },
        { "text": "this", "correct": false },
        { "text": "upper", "correct": false },
        { "text": "classname", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Static members are not inherited to subclass.",
      "explanation": "Static members are also inherited to subclasses.",
      "options": [
        { "text": "True", "correct": false },
        { "text": "False", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is used for implementing inheritance through an interface?",
      "explanation": "Interface is implemented using implements keyword. A concrete class must implement all the methods of an interface, else it must be declared abstract.",
      "options": [
        { "text": "inherited", "correct": false },
        { "text": "using", "correct": false },
        { "text": "extends", "correct": false },
        { "text": "implements", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is used for implementing inheritance through class?",
      "explanation": "Class can be extended using extends keyword. One class can extend only one class. A final class cannot be extended.",
      "options": [
        { "text": "inherited", "correct": false },
        { "text": "using", "correct": false },
        { "text": "extends", "correct": true },
        { "text": "implements", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What would be the result if a class extends two interfaces and both have a method with same name and signature? Lets assume that the class is not implementing that method.",
      "explanation": "In case of such conflict, compiler will not be able to link a method call due to ambiguity. It will throw compile time error.",
      "options": [
        { "text": "Runtime error", "correct": false },
        { "text": "Compile time error", "correct": true },
        { "text": "Code runs successfully", "correct": false },
        {
          "text": "First called method is executed successfully",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " Does Java support multiple level inheritance?",
      "explanation": "Java supports multiple level inheritance through implementing multiple interfaces.",
      "options": [
        { "text": "True", "correct": true },
        { "text": "False", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class is superclass of String and StringBuffer class?",
      "explanation": "None.",
      "options": [
        { "text": "java.util", "correct": false },
        { "text": "java.lang", "correct": true },
        { "text": "ArrayList", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these operators can be used to concatenate two or more String objects?",
      "explanation": "Operator + is used to concatenate strings, Example String s = “i ” + “like ” + “java”; String s contains “I like java”.",
      "options": [
        { "text": "+", "correct": true },
        { "text": "+=", "correct": false },
        { "text": "&", "correct": false },
        { "text": "||", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of this method of class String is used to obtain a length of String object?",
      "explanation": "Method length() of string class is used to get the length of the object which invoked method length().",
      "options": [
        { "text": "get()", "correct": false },
        { "text": "Sizeof()", "correct": false },
        { "text": "lengthof()", "correct": false },
        { "text": "length()", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method of class String is used to extract a single character from a String object?",
      "explanation": "None.",
      "options": [
        { "text": "CHARAT()", "correct": false },
        { "text": "chatat()", "correct": false },
        { "text": "charAt()", "correct": true },
        { "text": "ChatAt()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these constructors is used to create an empty String object?",
      "explanation": "None.",
      "options": [
        { "text": "String()", "correct": true },
        { "text": "String(void)", "correct": false },
        { "text": "String(0)", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is an incorrect statement?",
      "explanation": "StringBuffer class is used to create strings that can be modified after they are created.",
      "options": [
        {
          "text": "String objects are immutable, they cannot be changed",
          "correct": false
        },
        {
          "text": "String object can point to some other reference of String variable",
          "correct": false
        },
        {
          "text": "StringBuffer class is used to store string in a buffer for later use",
          "correct": true
        },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class String_demo \n    {\n        public static void main(String args[])\n        {\n            char chars[] = {'a', 'b', 'c'};\n            String s = new String(chars);\n            System.out.println(s);\n        }\n   }\n",
      "explanation": "String(chars) is a constructor of class string, it initializes string s with the values stored in character array chars, therefore s contains “abc”.\noutput:\n$ javac String_demo.java\n$ java String_demo \nabc\n",
      "options": [
        { "text": "a", "correct": false },
        { "text": "b", "correct": false },
        { "text": "c", "correct": false },
        { "text": "abc", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class String_demo \n    {\n        public static void main(String args[])\n        {\n            int ascii[] = { 65, 66, 67, 68};\n            String s = new String(ascii, 1, 3);\n            System.out.println(s);\n        }\n   }\n",
      "explanation": "ascii is an array of integers which contains ascii codes of Characters A, B, C, D. String(ascii, 1, 3) is an constructor which initializes s with Characters corresponding to ascii codes stored in array ascii, starting position being given by 1 & ending position by 3, Thus s stores BCD.\noutput:\n$ javac String_demo.java\n$ java String_demo \nBCD\n",
      "options": [
        { "text": "ABC", "correct": false },
        { "text": "BCD", "correct": true },
        { "text": "CDA", "correct": false },
        { "text": "ABCD", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class String_demo \n    {\n        public static void main(String args[])\n        {\n            char chars[] = {'a', 'b', 'c'};\n            String s = new String(chars);\n            String s1 = \"abcd\";\n            int len1 = s1.length();\n            int len2 = s.length();\n            System.out.println(len1 + \" \" + len2);\n        }\n   }\n",
      "explanation": "None.\noutput:\n$ javac String_demo.java\n$ java String_demo \n4 3\n",
      "options": [
        { "text": "3 0", "correct": false },
        { "text": "0 3", "correct": false },
        { "text": "3 4", "correct": false },
        { "text": "4 3", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method of class String is used to extract more than one character at a time a String object?",
      "explanation": "None.",
      "options": [
        { "text": "getchars()", "correct": false },
        { "text": "GetChars()", "correct": false },
        { "text": "Getchars()", "correct": false },
        { "text": "getChars()", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods is an alternative to getChars() that stores the characters in an array of bytes?",
      "explanation": "getBytes() stores the character in an array of bytes. It uses default character to byte conversions provided by the platform.",
      "options": [
        { "text": "getBytes()", "correct": true },
        { "text": "GetByte()", "correct": false },
        { "text": "giveByte()", "correct": false },
        { "text": "Give Bytes()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "In the following Java code, what can directly access and change the value of the variable name?\n\n package test;\n class Target \n {\n  public String name = \"hello\";\n }\n",
      "explanation": "Any class in the test package can access and change name.",
      "options": [
        { "text": "any class", "correct": false },
        { "text": "only the Target class", "correct": false },
        { "text": "any class in the test package", "correct": true },
        { "text": "any class that extends Target", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\npublic class Boxer1 \n{\n    Integer i;\n    int x;\n   public Boxer1(int y) \n   {\n        x = i+y;\n        System.out.println(x);\n   }\n   public static void main(String[] args) \n   {\n       new Boxer1 (new Integer(4));\n   }\n}\n",
      "explanation": "Because we are performing operation on reference variable which is null.",
      "options": [
        {
          "text": "The value “4” is printed at the command line",
          "correct": false
        },
        {
          "text": "Compilation fails because of an error in line",
          "correct": false
        },
        {
          "text": "A NullPointerException occurs at runtime",
          "correct": false
        },
        {
          "text": "An IllegalStateException occurs at runtime",
          "correct": true
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods can be used to convert all characters in a String into a character array?",
      "explanation": "charAt() return one character only not array of character.",
      "options": [
        { "text": "charAt()", "correct": false },
        { "text": "both getChars() & charAt()", "correct": false },
        { "text": "both toCharArray() & getChars()", "correct": true },
        { "text": "all of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class output \n    {\n        public static void main(String args[])\n        { \n           String c = \"Hello i love java\";\n           int start = 2;\n           int end = 9;\n           char s[]=new char[end-start];\n           c.getChars(start,end,s,0);\n           System.out.println(s);\n        }\n    }\n",
      "explanation": "getChars(start,end,s,0) returns an array from the string c, starting index of array is pointed by start and ending index is pointed by end. s is the target character array where the new string of letters is going to be stored and the new string will be stored from 0th position in s.\nOutput:\n$ javac output.java\n$ java output\nllo i l",
      "options": [
        { "text": "Hello, i love java", "correct": false },
        { "text": "i love ja", "correct": false },
        { "text": "lo i lo", "correct": false },
        { "text": "llo i l", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class output \n    {\n        public static void main(String args[])\n        {\n            String a = \"hello i love java\";\n            System.out.println(a.indexOf('i')+\" \"+a.indexOf('o') +\" \"+a.lastIndexOf('i')+\" \"+a.lastIndexOf('o'));\n        }\n    }\n",
      "explanation": " indexof(‘c’) and lastIndexof(‘c’) are pre defined function which are used to get the index of first and last occurrence of\nthe character pointed by c in the given array.\nOutput:\n$ javac output.java\n$ java output\n6 4 6 9\n",
      "options": [
        { "text": "6 4 6 9", "correct": true },
        { "text": "5 4 5 9", "correct": false },
        { "text": "7 8 8 9", "correct": false },
        { "text": "4 3 6 9", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class output \n    {\n        public static void main(String args[])\n        {\n            char c[]={'a', '1', 'b' ,' ' ,'A' , '0'};\n            for (int i = 0; i < 5; ++i)\n            {\n                   if(Character.isDigit(c[i]))\n                       System.out.println(c[i]+\" is a digit\");\n                   if(Character.isWhitespace(c[i]))\n                       System.out.println(c[i]+\" is a Whitespace character\");\n                   if(Character.isUpperCase(c[i]))\n                       System.out.println(c[i]+\" is an Upper case Letter\");\n                   if(Character.isLowerCase(c[i]))\n                       System.out.println(c[i]+\" is a lower case Letter\");\n               i=i+3;\n            }\n        }\n    }\n",
      "explanation": "Character.isDigit(c[i]),Character.isUpperCase(c[i]),Character.isWhitespace(c[i]) are the function of library java.lang. They are used to find weather the given character is of specified type or not. They return true or false i:e Boolean variable.\nOutput:\n$ javac output.java\n$ java output\na is a lower case Letter\nA is an Upper Case Letter\n",
      "options": [
        {
          "text": "\n    a is a lower case Letter\n      is White space character",
          "correct": false
        },
        {
          "text": "\n    b is a lower case Letter\n      is White space character",
          "correct": false
        },
        {
          "text": "\n    a is a lower case Letter\n    A is an upper case Letter",
          "correct": true
        },
        {
          "text": "\n    a is a lower case Letter\n    0 is a digit",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class output \n    {\n        public static void main(String args[])\n        {\n            char ch;\n            ch = \"hello\".charAt(1);\n            System.out.println(ch);\n        }\n   }",
      "explanation": "“hello” is a String literal, method charAt() returns the character specified at the index position. Character at index position 1 is e of hello, hence ch contains e.\noutput:\n$ javac output.java\n$ java output \ne\n",
      "options": [
        { "text": "h", "correct": false },
        { "text": "e", "correct": true },
        { "text": "l", "correct": false },
        { "text": "o", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method of class String is used to compare two String objects for their equality?",
      "explanation": "None.",
      "options": [
        { "text": "equals()", "correct": true },
        { "text": "Equals()", "correct": false },
        { "text": "isequal()", "correct": false },
        { "text": "Isequal()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods is used to compare a specific region inside a string with another specific region in another string?",
      "explanation": "None.",
      "options": [
        { "text": "regionMatch()", "correct": false },
        { "text": "match()", "correct": false },
        { "text": "RegionMatches()", "correct": false },
        { "text": "regionMatches()", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods of class String is used to check whether a given object starts with a particular string literal?",
      "explanation": "Method startsWith() of string class is used to check whether the String in question starts with a specified string. It is a specialized form of method regionMatches().",
      "options": [
        { "text": "startsWith()", "correct": true },
        { "text": "endsWith()", "correct": false },
        { "text": "Starts()", "correct": false },
        { "text": "ends()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the value returned by function compareTo() if the invoking string is less than the string compared?",
      "explanation": "compareTo() function returns zero when both the strings are equal, it returns a value less than zero if the invoking string is less than the other string being compared and value greater than zero when invoking string is greater than the string compared to.",
      "options": [
        { "text": "zero", "correct": false },
        { "text": "value less than zero", "correct": true },
        { "text": "value greater than zero", "correct": false },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these data type value is returned by equals() method of String class?",
      "explanation": "equals() method of string class returns boolean value true if both the string are equal and false if they are unequal.",
      "options": [
        { "text": "char", "correct": false },
        { "text": "int", "correct": false },
        { "text": "boolean", "correct": true },
        { "text": "all of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class output \n    {\n        public static void main(String args[])\n        { \n           String c = \"Hello i love java\";\n           boolean var;\n           var = c.startsWith(\"hello\");\n           System.out.println(var);\n        }\n    }",
      "explanation": "startsWith() method is case sensitive “hello” and “Hello” are treated differently, hence false is stored in var.\nOutput:\n$ javac output.java\n$ java output\nfalse",
      "options": [
        { "text": "true", "correct": false },
        { "text": "false", "correct": true },
        { "text": "0", "correct": false },
        { "text": "1", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class output \n    {\n        public static void main(String args[])\n        { \n           String s1 = \"Hello i love java\";\n           String s2 = new String(s1);\n           System.out.println((s1 == s2) + \" \" + s1.equals(s2));\n        }\n    }",
      "explanation": "The == operator compares two object references to see whether they refer to the same instance, where as equals() compares the content of the two objects.\nOutput:\n$ javac output.java\n$ java output\nfalse true",
      "options": [
        { "text": "true true", "correct": false },
        { "text": "false false", "correct": false },
        { "text": "true false", "correct": false },
        { "text": "false true", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class output \n    {\n        public static void main(String args[])\n        { \n           String s1 = \"Hello\";\n           String s2 = new String(s1);\n           String s3 = \"HELLO\";\n           System.out.println(s1.equals(s2) + \" \" + s2.equals(s3));\n        }\n    }",
      "explanation": "None.\nOutput:\n$ javac output.java\n$ java output\ntrue false",
      "options": [
        { "text": "true true", "correct": false },
        { "text": "false false", "correct": false },
        { "text": "true false", "correct": true },
        { "text": "false true", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "In the following Java code, which code fragment should be inserted at line 3 so that the output will be: “123abc 123abc”?\n\n 1. StringBuilder sb1 = new StringBuilder(\"123\");\n 2. String s1 = \"123\";\n 3.  // insert code here\n 4. System.out.println(sb1 + \" \" + s1);",
      "explanation": " append() is stringbuffer method and concat is String class method.\nappend() is stringbuffer method and concat is String class method.",
      "options": [
        { "text": "sb1.append(“abc”); s1.append(“abc”);", "correct": false },
        { "text": "sb1.append(“abc”); s1.concat(“abc”);", "correct": false },
        { "text": "sb1.concat(“abc”); s1.append(“abc”);", "correct": false },
        { "text": "sb1.append(“abc”); s1 = s1.concat(“abc”);", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java code?\n\n    class output \n    {\n        public static void main(String args[])\n        {\n             String chars[] = {\"a\", \"b\", \"c\", \"a\", \"c\"};\n             for (int i = 0; i < chars.length; ++i)\n                 for (int j = i + 1; j < chars.length; ++j)\n                     if(chars[i].compareTo(chars[j]) == 0)\n                         System.out.print(chars[j]); \n        }\n   }",
      "explanation": "compareTo() function returns zero when both the strings are equal, it returns a value less than zero if the invoking string is less than the other string being compared and value greater than zero when invoking string is greater than the string compared to.\noutput:\n$ javac output.java\n$ java output  \nac",
      "options": [
        { "text": "ab", "correct": false },
        { "text": "bc", "correct": false },
        { "text": "ca", "correct": false },
        { "text": "ac", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of this method of class String is used to extract a substring from a String object?",
      "explanation": "None.",
      "options": [
        { "text": "substring()", "correct": true },
        { "text": "Substring()", "correct": false },
        { "text": "SubString()", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will s2 contain after following lines of Java code?\n\n String s1 = \"one\";\nString s2 = s1.concat(\"two\")",
      "explanation": "Two strings can be concatenated by using concat() method.",
      "options": [
        { "text": "one", "correct": false },
        { "text": "two", "correct": false },
        { "text": "onetwo", "correct": true },
        { "text": "twoone", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method of class String is used to remove leading and trailing whitespaces?",
      "explanation": "None.",
      "options": [
        { "text": "startsWith()", "correct": false },
        { "text": "trim()", "correct": true },
        { "text": "Trim()", "correct": false },
        { "text": "doTrim()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the value returned by function compareTo() if the invoking string is greater than the string compared?",
      "explanation": "if (s1 == s2) then 0, if(s1 &gt; s2) &gt; 0, if (s1 &lt; s2) then &lt; 0.",
      "options": [
        { "text": "zero", "correct": false },
        { "text": "value less than zero", "correct": false },
        { "text": "value greater than zero", "correct": true },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following statement is correct?",
      "explanation": "replace() method replaces all occurrences of one character in invoking string with another character.",
      "options": [
        {
          "text": "replace() method replaces all occurrences of one character in invoking string with another character",
          "correct": true
        },
        {
          "text": "replace() method replaces only first occurrences of a character in invoking string with another character",
          "correct": false
        },
        {
          "text": "replace() method replaces all the characters in invoking string with another character",
          "correct": false
        },
        {
          "text": "replace() replace() method replaces last occurrence of a character in invoking string with another character",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class output \n    {\n        public static void main(String args[])\n        { \n           String c = \"  Hello World  \";\n           String s = c.trim();\n           System.out.println(\"\"\"+s+\"\"\");\n        }\n    }",
      "explanation": "trim() method is used to remove leading and trailing whitespaces in a string.\nOutput:\n$ javac output.java\n$ java output\n\"Hello World\"",
      "options": [
        { "text": "“”Hello World””", "correct": false },
        { "text": "“”Hello World”", "correct": false },
        { "text": "“Hello World”", "correct": true },
        { "text": "Hello world", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class output \n    {\n        public static void main(String args[])\n        { \n           String s1 = \"one\";\n           String s2 = s1 + \" two\";\n           System.out.println(s2);\n        }\n    }",
      "explanation": " None.\nOutput:\n$ javac output.java\n$ java output\none two",
      "options": [
        { "text": "one", "correct": false },
        { "text": "two", "correct": false },
        { "text": "one two", "correct": true },
        { "text": "compilation error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class output \n    {\n        public static void main(String args[])\n        { \n           String s1 = \"Hello\";\n           String s2 = s1.replace('l','w');\n           System.out.println(s2);\n        }\n    }",
      "explanation": "replace() method replaces all occurrences of one character in invoking string with another character. s1.replace(‘l’,’w’) replaces every occurrence of ‘l’ in hello by ‘w’, giving hewwo.\nOutput:\n$ javac output.java\n$ java output\nhewwo",
      "options": [
        { "text": "hello", "correct": false },
        { "text": "helwo", "correct": false },
        { "text": "hewlo", "correct": false },
        { "text": "hewwo", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class output \n    {\n        public static void main(String args[])\n        {\n           String s1 = \"Hello World\";\n           String s2 = s1.substring(0 , 4);\n           System.out.println(s2);\n        }\n   }",
      "explanation": "substring(0,4) returns the character from 0 th position to 3 rd position.\noutput:\n$ javac output.java\n$ java output \nHell",
      "options": [
        { "text": "Hell", "correct": true },
        { "text": "Hello", "correct": false },
        { "text": "Worl", "correct": false },
        { "text": "World", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class output \n    {\n        public static void main(String args[])\n        {             String s = \"Hello World\";\n             int i = s.indexOf('o');\n             int j = s.lastIndexOf('l');\n             System.out.print(i + \" \" + j);\n \n        }\n   }",
      "explanation": "indexOf() method returns the index of first occurrence of the character where as lastIndexOf() returns the index of last occurrence of the character.\noutput:\n$ javac output.java\n$ java output  \n4 9",
      "options": [
        { "text": "4 8", "correct": false },
        { "text": "5 9", "correct": false },
        { "text": "4 9", "correct": true },
        { "text": "5 8", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class is used to create an object whose character sequence is mutable?",
      "explanation": "StringBuffer represents growable and writable character sequence.",
      "options": [
        { "text": "String()", "correct": false },
        { "text": "StringBuffer()", "correct": true },
        { "text": "String() & StringBuffer()", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of this method of class StringBuffer is used to concatenate the string representation to the end of invoking string?",
      "explanation": "None.",
      "options": [
        { "text": "concat()", "correct": false },
        { "text": "append()", "correct": true },
        { "text": "join()", "correct": false },
        { "text": "concatenate()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method of class StringBuffer is used to find the length of current character sequence?",
      "explanation": "None.",
      "options": [
        { "text": "length()", "correct": true },
        { "text": "Length()", "correct": false },
        { "text": "capacity()", "correct": false },
        { "text": "Capacity()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the string contained in s after following lines of Java code?\n\nStringBuffer s new StringBuffer(\"Hello\");\ns.deleteCharAt(0);",
      "explanation": "deleteCharAt() method deletes the character at the specified index location and returns the resulting StringBuffer object.",
      "options": [
        { "text": "Hell", "correct": false },
        { "text": "ello", "correct": true },
        { "text": "Hel", "correct": false },
        { "text": "llo", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following statement is correct?",
      "explanation": "reverse() method reverses all characters. It returns the reversed object on which it was called.",
      "options": [
        { "text": "reverse() method reverses all characters", "correct": true },
        {
          "text": "reverseall() method reverses all characters",
          "correct": false
        },
        {
          "text": "replace() method replaces first occurrence of a character in invoking string with another character",
          "correct": false
        },
        {
          "text": "replace() method replaces last occurrence of a character in invoking string with another character",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class output \n    {\n        public static void main(String args[])\n        {\n            String a = \"hello i love java\";\n            System.out.println(a.indexOf('e')+\" \"+a.indexOf('a')+\" \"+a.lastIndexOf('l')+\" \"+a.lastIndexOf('v'));\n        }\n    }",
      "explanation": "indexof(‘c’) and lastIndexof(‘c’) are pre defined function which are used to get the index of first and last occurrence of\nthe character pointed by c in the given array.\nOutput:\n$ javac output.java\n$ java output\n1 14 8 15",
      "options": [
        { "text": "6 4 6 9", "correct": false },
        { "text": "5 4 5 9", "correct": false },
        { "text": "7 8 8 9", "correct": false },
        { "text": "1 14 8 15", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class output \n    {\n        public static void main(String args[])\n        { \n             StringBuffer c = new StringBuffer(\"Hello\");\n             c.delete(0,2);\n             System.out.println(c);\n        }\n    }",
      "explanation": "delete(0,2) is used to delete the characters from 0 th position to 1 st position.\nOutput:\n$ javac output.java\n$ java output\nllo",
      "options": [
        { "text": "He", "correct": false },
        { "text": "Hel", "correct": false },
        { "text": "lo", "correct": false },
        { "text": "llo", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class output \n    {\n        public static void main(String args[])\n        { \n             StringBuffer c = new StringBuffer(\"Hello\");\n             StringBuffer c1 = new StringBuffer(\" World\");\n             c.append(c1);\n             System.out.println(c);\n        }\n    }",
      "explanation": "append() method of class StringBuffer is used to concatenate the string representation to the end of invoking string.\nOutput:\n$ javac output.java\n$ java output\nHello World",
      "options": [
        { "text": "Hello", "correct": false },
        { "text": "World", "correct": false },
        { "text": "Helloworld", "correct": false },
        { "text": "Hello World", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class output \n    {\n        public static void main(String args[])\n        { \n           StringBuffer s1 = new StringBuffer(\"Hello\");\n           StringBuffer s2 = s1.reverse();\n           System.out.println(s2);\n        }\n    }",
      "explanation": "reverse() method reverses all characters. It returns the reversed object on which it was called.\nOutput:\n$ javac output.java\n$ java output\nolleH",
      "options": [
        { "text": "Hello", "correct": false },
        { "text": "olleH", "correct": true },
        { "text": "HelloolleH", "correct": false },
        { "text": "olleHHello", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class output \n    {\n       class output \n       {\n         public static void main(String args[])\n         {\n            char c[]={'A', '1', 'b' ,' ' ,'a' , '0'};\n            for (int i = 0; i < 5; ++i)\n            {\n                   i++; \n                   if(Character.isDigit(c[i]))\n                       System.out.println(c[i]+\" is a digit\");\n                   if(Character.isWhitespace(c[i]))\n                       System.out.println(c[i]+\" is a Whitespace character\");\n                   if(Character.isUpperCase(c[i]))\n                       System.out.println(c[i]+\" is an Upper case Letter\");\n                   if(Character.isLowerCase(c[i]))\n                       System.out.println(c[i]+\" is a lower case Letter\");\n                   i++;\n            }\n        }\n    }",
      "explanation": "Character.isDigit(c[i]), Character.isUpperCase(c[i]), Character.isWhitespace(c[i]) are the function of library java.lang they are used to find whether the given character is of specified type or not. They return true or false i:e Boolean variable.\nOutput:\n$ javac output.java\n$ java output  \n1 is a digit\na is a lower case Letter",
      "options": [
        {
          "text": "\n   a is a lower case Letter\n     is White space character",
          "correct": false
        },
        {
          "text": "\n   b is a lower case Letter\n     is White space character",
          "correct": false
        },
        {
          "text": "\n   1 is a digit\n   a is a lower case Letter",
          "correct": true
        },
        {
          "text": "\n   a is a lower case Letter\n   0 is a digit",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods of class StringBuffer is used to extract a substring from a String object?",
      "explanation": "None.",
      "options": [
        { "text": "substring()", "correct": true },
        { "text": "Substring()", "correct": false },
        { "text": "SubString()", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will s2 contain after following lines of Java code?\n\n StringBuffer s1 = \"one\";\nStringBuffer s2 = s1.append(\"two\")",
      "explanation": "Two strings can be concatenated by using append() method.",
      "options": [
        { "text": "one", "correct": false },
        { "text": "two", "correct": false },
        { "text": "onetwo", "correct": true },
        { "text": "twoone", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of this method of class StringBuffer is used to reverse sequence of characters?",
      "explanation": "reverse() method reverses all characters. It returns the reversed object on which it was called.",
      "options": [
        { "text": "reverse()", "correct": true },
        { "text": "reverseall()", "correct": false },
        { "text": "Reverse()", "correct": false },
        { "text": "reverseAll()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of this method of class StringBuffer is used to get the length of the sequence of characters?",
      "explanation": "length()- returns the length of String the StringBuffer would create whereas capacity() returns a total number of characters that can be supported before it is grown.",
      "options": [
        { "text": "length()", "correct": true },
        { "text": "capacity()", "correct": false },
        { "text": "Length()", "correct": false },
        { "text": "Capacity()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following are incorrect form of StringBuffer class constructor?",
      "explanation": "None.",
      "options": [
        { "text": "StringBuffer()", "correct": false },
        { "text": "StringBuffer(int size)", "correct": false },
        { "text": "StringBuffer(String str)", "correct": false },
        { "text": "StringBuffer(int size , String str)", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class output \n    {\n        public static void main(String args[])\n        { \n             StringBuffer c = new StringBuffer(\"Hello\");\n             System.out.println(c.length());\n        }\n    }",
      "explanation": " length() method is used to obtain length of StringBuffer object, length of “Hello” is 5.\nOutput:\n$ javac output.java\n$ java output\n5",
      "options": [
        { "text": "4", "correct": false },
        { "text": "5", "correct": true },
        { "text": "6", "correct": false },
        { "text": "7", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n  class output \n  {  \n      public static void main(String args[]) \n      {  \n          StringBuffer sb=new StringBuffer(\"Hello\");  \n          sb.replace(1,3,\"Java\");  \n          System.out.println(sb);\n      }  \n  }",
      "explanation": "The replace() method replaces the given string from the specified beginIndex and endIndex.\n$ javac output.java\n$ java output\nHJavalo",
      "options": [
        { "text": "Hello java", "correct": false },
        { "text": "Hellojava", "correct": false },
        { "text": "HJavalo", "correct": true },
        { "text": "Hjava", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class output \n    {\n        public static void main(String args[])\n        { \n           StringBuffer s1 = new StringBuffer(\"Hello\");\n           s1.setCharAt(1,'x');\n           System.out.println(s1);\n        }\n    }",
      "explanation": "None.\nOutput:\n$ javac output.java\n$ java output\nHxllo",
      "options": [
        { "text": "xello", "correct": false },
        { "text": "xxxxx", "correct": false },
        { "text": "Hxllo", "correct": true },
        { "text": "Hexlo", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class output \n    {\n        public static void main(String args[])\n        {\n           StringBuffer s1 = new StringBuffer(\"Hello World\");\n           s1.insert(6 , \"Good \");\n           System.out.println(s1);\n        }\n   }",
      "explanation": "The insert() method inserts one string into another. It is overloaded to accept values of all simple types, plus String and Objects. Sting is inserted into invoking object at specified position. “Good ” is inserted in “Hello World” T index 6 giving “Hello Good World”.\noutput:\n$ javac output.java\n$ java output \nHello Good World",
      "options": [
        { "text": "HelloGoodWorld", "correct": false },
        { "text": "HellGoodoWorld", "correct": false },
        { "text": "HellGood oWorld", "correct": false },
        { "text": "Hello Good World", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java code?\n\n    class output \n    {\n        public static void main(String args[])\n        { \n           StringBuffer s1 = new StringBuffer(\"Hello\");\n           s1.insert(1,\"Java\");\n           System.out.println(s1);\n        }\n    }",
      "explanation": "Insert method will insert string at a specified position\nOutput:\n$ javac output.java\n$ java output\nHJavaello",
      "options": [
        { "text": "hello", "correct": false },
        { "text": "java", "correct": false },
        { "text": "Hello Java", "correct": false },
        { "text": "HJavaello", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these classes is not included in java.lang?",
      "explanation": "Array class is a member of java.util.",
      "options": [
        { "text": "Byte", "correct": false },
        { "text": "Integer", "correct": false },
        { "text": "Array", "correct": true },
        { "text": "Class", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is a process of converting a simple data type into a class?",
      "explanation": "None.",
      "options": [
        { "text": "type wrapping", "correct": true },
        { "text": "type conversion", "correct": false },
        { "text": "type casting", "correct": false },
        { "text": "none of the Mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is a super class of wrappers Double & Integer?",
      "explanation": "Number is an abstract class containing subclasses Double, Float, Byte, Short, Integer and Long.",
      "options": [
        { "text": "Long", "correct": false },
        { "text": "Digits", "correct": false },
        { "text": "Float", "correct": false },
        { "text": "Number", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is a wrapper for simple data type float?",
      "explanation": "None.",
      "options": [
        { "text": "float", "correct": false },
        { "text": "double", "correct": false },
        { "text": "Float", "correct": true },
        { "text": "Double", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is a method of wrapper Float for converting the value of an object into byte?",
      "explanation": "None.",
      "options": [
        { "text": "bytevalue()", "correct": false },
        { "text": "byte byteValue()", "correct": true },
        { "text": "Bytevalue()", "correct": false },
        { "text": "Byte Bytevalue()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods is used to check for infinitely large and small values?",
      "explanation": "isinfinite() method returns true is the value being tested is infinitely large or small in magnitude.",
      "options": [
        { "text": "isInfinite()", "correct": true },
        { "text": "isNaN()", "correct": false },
        { "text": "Isinfinite()", "correct": false },
        { "text": "IsNaN()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following package stores all the simple data types in java?",
      "explanation": "None.",
      "options": [
        { "text": "lang", "correct": true },
        { "text": "java", "correct": false },
        { "text": "util", "correct": false },
        { "text": "java.packages", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class isinfinite_output \n    {\n        public static void main(String args[]) \n        {\n            Double d = new Double(1 / 0.);  \n            boolean x = d.isInfinite();\n            System.out.print(x);\n        }\n    }",
      "explanation": "isInfinite() method returns true is the value being tested is infinitely large or small in magnitude. 1/0. is infinitely large in magnitude hence true is stored in x.\nOutput:\n$ javac isinfinite_output.java\n$ java isinfinite_output\ntrue",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "true", "correct": true },
        { "text": "false", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class isNaN_output \n    {\n        public static void main(String args[]) \n        {\n            Double d = new Double(1 / 0.);  \n            boolean x = d.isNaN();\n            System.out.print(x);\n        }\n    }",
      "explanation": "isisNaN() method returns true is the value being tested is a number. 1/0. is infinitely large in magnitude, which cannot be defined as a number hence false is stored in x.\nOutput:\n$ javac isNaN_output.java\n$ java isNaN_output\nfalse",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "true", "correct": false },
        { "text": "false", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java code?\n\n    class binary \n    {\n         public static void main(String args[]) \n         {\n             int num = 17;\n             System.out.print(Integer.toBinaryString(num));\n         }\n    }",
      "explanation": "None.\noutput:\n$ javac binary.java\n$ java binary \n10001",
      "options": [
        { "text": "1001", "correct": false },
        { "text": "10011", "correct": false },
        { "text": "11011", "correct": false },
        { "text": "10001", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is a wrapper for data type int?",
      "explanation": "None.",
      "options": [
        { "text": "Integer", "correct": true },
        { "text": "Long", "correct": false },
        { "text": "Byte", "correct": false },
        { "text": "Double", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following methods is a method of wrapper Integer for obtaining hash code for the invoking object?",
      "explanation": "None.",
      "options": [
        { "text": "int hash()", "correct": false },
        { "text": "int hashcode()", "correct": false },
        { "text": "int hashCode()", "correct": true },
        { "text": "Integer hashcode()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is a super class of wrappers Long, Character & Integer?",
      "explanation": "Number is an abstract class containing subclasses Double, Float, Byte, Short, Integer and Long.",
      "options": [
        { "text": "Long", "correct": false },
        { "text": "Digits", "correct": false },
        { "text": "Float", "correct": false },
        { "text": "Number", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is a wrapper for simple data type char?",
      "explanation": "None.",
      "options": [
        { "text": "Float", "correct": false },
        { "text": "Character", "correct": true },
        { "text": "String", "correct": false },
        { "text": "Integer", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is method of wrapper Integer for converting the value of an object into int?",
      "explanation": "None.",
      "options": [
        { "text": "bytevalue()", "correct": false },
        { "text": "int intValue();", "correct": true },
        { "text": "Bytevalue()", "correct": false },
        { "text": "Byte Bytevalue()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods is used to obtain value of invoking object as a long?",
      "explanation": "long longValue() is used to obtain value of invoking object as a long.",
      "options": [
        { "text": "long value()", "correct": false },
        { "text": "long longValue()", "correct": true },
        { "text": "Long longvalue()", "correct": false },
        { "text": "Long Longvalue()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            char a[] = {'a', '5', 'A', ' '};   \n            System.out.print(Character.isDigit(a[0]) + \" \");\n            System.out.print(Character.isWhitespace(a[3]) + \" \");\n            System.out.print(Character.isUpperCase(a[2]));\n        }\n    }\n",
      "explanation": "Character.isDigit(a[0]) checks for a[0], whether it is a digit or not, since a[0] i:e ‘a’ is a character false is returned. a[3] is a whitespace hence Character.isWhitespace(a[3]) returns a true. a[2] is an uppercase letter i:e ‘A’ hence Character.isUpperCase(a[2]) returns true.\nOutput:\n$ javac Output.java\n$ java Output\nfalse true true\n",
      "options": [
        { "text": "true false true", "correct": false },
        { "text": "false true true", "correct": true },
        { "text": "true true false", "correct": false },
        { "text": "false false false", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            Integer i = new Integer(257);  \n            byte x = i.byteValue();\n            System.out.print(x);\n        }\n    }\n",
      "explanation": "i.byteValue() method returns the value of wrapper i as a byte value. i is 257, range of byte is 256 therefore i value exceeds byte range by 1 hence 1 is returned and stored in x.\nOutput:\n$ javac Output.java\n$ java Output\n1\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": true },
        { "text": "256", "correct": false },
        { "text": "257", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            Integer i = new Integer(257);  \n            float x = i.floatValue();\n            System.out.print(x);\n        }\n    }\n",
      "explanation": "None.\nOutput:\n$ javac Output.java\n$ java Output\n257.0\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "257", "correct": false },
        { "text": "257.0", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            Long i = new Long(256);  \n            System.out.print(i.hashCode());\n        }\n    }\n",
      "explanation": "None.\nOutput:\n$ javac Output.java\n$ java Output\n256\n",
      "options": [
        { "text": "256", "correct": true },
        { "text": "256.0", "correct": false },
        { "text": "256.00", "correct": false },
        { "text": "257.00", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class have only one field ‘TYPE’?",
      "explanation": "The Void class has one field, TYPE, which holds a reference to the Class object for the type void.",
      "options": [
        { "text": "Void", "correct": true },
        { "text": "Process", "correct": false },
        { "text": "System", "correct": false },
        { "text": "Runtime", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following method of Process class can terminate a process?",
      "explanation": "Kills the subprocess. The subprocess represented by this Process object is forcibly terminated.",
      "options": [
        { "text": "void kill()", "correct": false },
        { "text": "void destroy()", "correct": true },
        { "text": "void terminate()", "correct": false },
        { "text": "void exit()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Standard output variable ‘out’ is defined in which class?",
      "explanation": "Standard output variable ‘out’ is defined in System class. out is usually used in print statement i:e System.out.print().",
      "options": [
        { "text": "Void", "correct": false },
        { "text": "Process", "correct": false },
        { "text": "Runtime", "correct": false },
        { "text": "System", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class can encapsulate an entire executing program?",
      "explanation": "None.",
      "options": [
        { "text": "Void", "correct": false },
        { "text": "Process", "correct": true },
        { "text": "Runtime", "correct": false },
        { "text": "System", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is method of System class is used to find how long a program takes to execute?",
      "explanation": "None.",
      "options": [
        { "text": "currenttime()", "correct": false },
        { "text": "currentTime()", "correct": false },
        { "text": "currentTimeMillis()", "correct": true },
        { "text": "currenttimeMillis()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class holds a collection of static methods and variables?",
      "explanation": "System class holds a collection of static methods and variables. The standard input, output and error output of java runtime is stored in the in, out and err variables of System class.",
      "options": [
        { "text": "Void", "correct": false },
        { "text": "Process", "correct": false },
        { "text": "Runtime", "correct": false },
        { "text": "System", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            long start, end;   \n            start = System.currentTimeMillis();\n            for (int i = 0; i < 10000000; i++);\n            end = System.currentTimeMillis();\n            System.out.print(end - start);\n        }\n    }\n",
      "explanation": "end time is the time taken by loop to execute it can be any non zero value depending on the System.\nOutput:\n$ javac Output.java\n$ java Output\n78\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "1000", "correct": false },
        { "text": "System Dependent", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            byte a[] = { 65, 66, 67, 68, 69, 70 };\n            byte b[] = { 71, 72, 73, 74, 75, 76 };  \n            System.arraycopy(a , 0, b, 0, a.length);\n            System.out.print(new String(a) + \" \" + new String(b));\n        }\n    }\n",
      "explanation": "System.arraycopy() is a method of class System which is used to copy a string into another string.\nOutput:\n$ javac Output.java\n$ java Output\nABCDEF ABCDEF\n",
      "options": [
        { "text": "ABCDEF ABCDEF", "correct": true },
        { "text": "ABCDEF GHIJKL", "correct": false },
        { "text": "GHIJKL ABCDEF", "correct": false },
        { "text": "GHIJKL GHIJKL", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            byte a[] = { 65, 66, 67, 68, 69, 70 };\n            byte b[] = { 71, 72, 73, 74, 75, 76 };  \n            System.arraycopy(a, 2, b, 1, a.length-2);\n            System.out.print(new String(a) + \" \" + new String(b));\n        }\n    }\n",
      "explanation": " None.\nOutput:\n$ javac Output.java\n$ java Output\nABCDEF GCDEFL\n",
      "options": [
        { "text": "ABCDEF GHIJKL", "correct": false },
        { "text": "ABCDEF GCDEFL", "correct": true },
        { "text": "GHIJKL ABCDEF", "correct": false },
        { "text": "GCDEFL GHIJKL", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java code?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            byte a[] = { 65, 66, 67, 68, 69, 70 };\n            byte b[] = { 71, 72, 73, 74, 75, 76 };  \n            System.arraycopy(a, 1, b, 3, 0);\n            System.out.print(new String(a) + \" \" + new String(b));\n        }\n    }\n",
      "explanation": "Since last parameter of System.arraycopy(a,1,b,3,0) is 0 nothing is copied from array a to array b, hence b remains as it is.\nOutput:\n$ javac Output.java\n$ java Output\nABCDEF GHIJKL\n",
      "options": [
        { "text": "ABCDEF GHIJKL", "correct": true },
        { "text": "ABCDEF GCDEFL", "correct": false },
        { "text": "GHIJKL ABCDEF", "correct": false },
        { "text": "GCDEFL GHIJKL", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class is a superclass of all other classes?",
      "explanation": "The object class class is a superclass of all other classes.",
      "options": [
        { "text": "Math", "correct": false },
        { "text": "Process", "correct": false },
        { "text": "System", "correct": false },
        { "text": "Object", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method of Object class can generate duplicate copy of the object on which it is called?",
      "explanation": "None.",
      "options": [
        { "text": "clone()", "correct": true },
        { "text": "copy()", "correct": false },
        { "text": "duplicate()", "correct": false },
        { "text": "dito()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the value of double consonant ‘E’ defined in Math class?",
      "explanation": "None.",
      "options": [
        { "text": "approximately 3", "correct": false },
        { "text": "approximately 3.14", "correct": false },
        { "text": "approximately 2.72", "correct": true },
        { "text": "approximately 0", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method is a rounding function of Math class?",
      "explanation": "max(), min() and abs() are all rounding functions.",
      "options": [
        { "text": "max()", "correct": false },
        { "text": "min()", "correct": false },
        { "text": "abs()", "correct": false },
        { "text": "all of the mentioned", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class contains only floating point functions?",
      "explanation": "Math class contains all the floating point functions that are used for geometry, trigonometry, as well as several general purpose methods. Example : sin(), cos(), exp(), sqrt() etc.",
      "options": [
        { "text": "Math", "correct": true },
        { "text": "Process", "correct": false },
        { "text": "System", "correct": false },
        { "text": "Object", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class encapsulate the runtime state of an object or an interface?",
      "explanation": "None.",
      "options": [
        { "text": "Class", "correct": true },
        { "text": "Object", "correct": false },
        { "text": "Runtime", "correct": false },
        { "text": "System", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the value of “d” in the following Java code snippet?\n\n   double d = Math.round ( 2.5 + Math.random() );\n",
      "explanation": "The Math.random() method returns a number greater than or equal to 0 and less than 1.  so 2.5 will be greater than or equal to 2.5 and less than 3.5, we can be sure that Math.round() will round that number to 3.",
      "options": [
        { "text": "2", "correct": false },
        { "text": "3", "correct": true },
        { "text": "4", "correct": false },
        { "text": "2.5", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output \n    {\n         public static void main(String args[]) \n         {\n             int x = 3.14;  \n             int y = (int) Math.abs(x);\n             System.out.print(y);\n         }\n    }\n\n",
      "explanation": "None.\nOutput:\n$ javac Output.java\n$ java Output\n3\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "3", "correct": true },
        { "text": "3.0", "correct": false },
        { "text": "3.1", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output \n    {\n         public static void main(String args[]) \n        {\n            double x = 3.1;  \n            double y = 4.5;\n            double z = Math.max( x, y );\n            System.out.print(z);\n        }\n    }\n",
      "explanation": "None.\nOutput:\n$ javac Output.java\n$ java Output\n4.5\n",
      "options": [
        { "text": "true", "correct": false },
        { "text": "flase", "correct": false },
        { "text": "3.1", "correct": false },
        { "text": "4.5", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class Output \n    {\n         public static void main(String args[]) \n        {\n            double x = 2.0;  \n            double y = 3.0;\n            double z = Math.pow( x, y );\n            System.out.print(z);\n        }\n    }\n",
      "explanation": "Math.pow(x, y) methods returns value of y to the power x, i:e x ^ y, 2.0 ^ 3.0 = 8.0.\nOutput:\n$ javac Output.java\n$ java Output\n8.0\n",
      "options": [
        { "text": "2.0", "correct": false },
        { "text": "4.0", "correct": false },
        { "text": "8.0", "correct": true },
        { "text": "9.0", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these exceptions is thrown by methods of System class?",
      "explanation": "System class methods throw SecurityException.",
      "options": [
        { "text": "IOException", "correct": false },
        { "text": "SystemException", "correct": false },
        { "text": "SecurityException", "correct": true },
        { "text": "InputOutputException", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods initiates garbage collection?",
      "explanation": "None.",
      "options": [
        { "text": "gc()", "correct": true },
        { "text": "garbage()", "correct": false },
        { "text": "garbagecollection()", "correct": false },
        { "text": "Systemgarbagecollection()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods loads the specified dynamic library?",
      "explanation": "load() methods loads the dynamic library whose name is specified.",
      "options": [
        { "text": "load()", "correct": true },
        { "text": "library()", "correct": false },
        { "text": "loadlib()", "correct": false },
        { "text": "loadlibrary()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method can set the out stream to OutputStream?",
      "explanation": "None.",
      "options": [
        { "text": "setStream()", "correct": false },
        { "text": "setosteam()", "correct": false },
        { "text": "setOut()", "correct": true },
        { "text": "streamtoOstream()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these values are returns under the case of normal termination of a program?",
      "explanation": "None.",
      "options": [
        { "text": "0", "correct": true },
        { "text": "1", "correct": false },
        { "text": "2", "correct": false },
        { "text": "3", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    import java.lang.System;\n    class Output\n    {\n         public static void main(String args[])\n         {\n             long start, end;   \n             start = System.currentTimeMillis();\n             for (int i = 0; i < 10000000; i++);\n             end = System.currentTimeMillis();\n             System.out.print(end - start);\n         }\n    }\n",
      "explanation": "End time is the time taken by loop to execute it can be any non zero value depending on the System.\nOutput:\n$ javac Output.java\n$ java Output\n78\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "1000", "correct": false },
        { "text": "System Dependent", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    import java.lang.System;\n    class Output \n    {\n        public static void main(String args[])\n        {\n            byte a[] = { 65, 66, 67, 68, 69, 70 };\n            byte b[] = { 71, 72, 73, 74, 75, 76 };  \n            System.arraycopy(a, 0, b, 0, a.length);\n            System.out.print(new String(a) + \" \" + new String(b));\n        }\n    }\n",
      "explanation": "System.arraycopy() is a method of class System which is used to copy a string into another string.\nOutput:\n$ javac Output.java\n$ java Output\nABCDEF ABCDEF\n",
      "options": [
        { "text": "ABCDEF ABCDEF", "correct": true },
        { "text": "ABCDEF GHIJKL", "correct": false },
        { "text": "GHIJKL ABCDEF", "correct": false },
        { "text": "GHIJKL GHIJKL", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    import java.lang.System;\n    class Output \n    {\n        public static void main(String args[])\n        {\n            byte a[] = { 65, 66, 67, 68, 69, 70 };\n            byte b[] = { 71, 72, 73, 74, 75, 76 };  \n            System.arraycopy(a, 0, b, 3, a.length - 3);\n            System.out.print(new String(a) + \" \" + new String(b));\n        }\n    }\n",
      "explanation": "System.arraycopy() is a method of class System which is used to copy a string into another string.\nOutput:\n$ javac Output.java\n$ java Output\nABCDEF GHIABC\n",
      "options": [
        { "text": "ABCDEF ABCDEF", "correct": false },
        { "text": "ABCDEF GHIJKL", "correct": false },
        { "text": "ABCDEF GHIABC", "correct": true },
        { "text": "GHIJKL GHIJKL", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    import java.lang.System;\n    class Output\n    {\n        public static void main(String args[])\n        {\n            byte a[] = { 65, 66, 67, 68, 69, 70 };\n            byte b[] = { 71, 72, 73, 74, 75, 76 };  \n            System.arraycopy(a, 2, b, 3, a.length - 4);\n            System.out.print(new String(a) + \" \" + new String(b));\n        }\n    }\n",
      "explanation": "System.arraycopy() is a method of class System which is used to copy a string into another string.\nOutput:\n$ javac Output.java\n$ java Output\nABCDEF GHICDL\n",
      "options": [
        { "text": "ABCDEF ABCDEF", "correct": false },
        { "text": "ABCDEF GHIJKL", "correct": false },
        { "text": "ABCDEF GHIABC", "correct": false },
        { "text": "ABCDEF GHICDL", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    import java.lang.System;\n    class Output \n    {\n        public static void main(String args[])\n        {\n            System.exit(5);\n        }\n    }\n",
      "explanation": "None.",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "4", "correct": false },
        { "text": "5", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is a super class of wrappers Double and Float?",
      "explanation": "Number is an abstract class containing subclasses Double, Float, Byte, Short, Integer and Long.",
      "options": [
        { "text": "Long", "correct": false },
        { "text": "Digits", "correct": false },
        { "text": "Float", "correct": false },
        { "text": "Number", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following methods return the value as a double?",
      "explanation": "None.",
      "options": [
        { "text": "doubleValue()", "correct": true },
        { "text": "converDouble()", "correct": false },
        { "text": "getDouble()", "correct": false },
        { "text": "getDoubleValue()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods can be used to check whether the given value is a number or not?",
      "explanation": "isNaN() methods returns true if num specified is not a number, otherwise it returns false.",
      "options": [
        { "text": "isNaN()", "correct": true },
        { "text": "isNumber()", "correct": false },
        { "text": "checkNaN()", "correct": false },
        { "text": "checkNumber()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method of Double wrapper can be used to check whether a given value is infinite or not?",
      "explanation": "isInfinite() methods returns true if the specified value is an infinite value otherwise it returns false.",
      "options": [
        { "text": "Infinite()", "correct": false },
        { "text": "isInfinite()", "correct": true },
        { "text": "checkInfinite()", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these exceptions is thrown by compareTo() method defined in a double wrapper?",
      "explanation": "compareTo() methods compare the specified object to be double, if it is not then ClassCastException is thrown.",
      "options": [
        { "text": "IOException", "correct": false },
        { "text": "SystemException", "correct": false },
        { "text": "CastException", "correct": false },
        { "text": "ClassCastException", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class Output \n    {\n        public static void main(String args[])\n        {\n            Double i = new Double(257.5);  \n            boolean x = i.isNaN();\n            System.out.print(x);\n        }\n    }\n",
      "explanation": "i.isNaN() method returns returns true if i is not a number and false when i is a number. Here false is returned because i is a number i:e 257.5.\nOutput:\n$ javac Output.java\n$ java Output\nfalse\n",
      "options": [
        { "text": "true", "correct": false },
        { "text": "false", "correct": true },
        { "text": "0", "correct": false },
        { "text": "1", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class Output\n    {\n        public static void main(String args[])\n        {\n            Double i = new Double(257.578);  \n            int x = i.intValue();\n            System.out.print(x);\n        }\n    }\n",
      "explanation": " i.intValue() method returns the value of wrapper i as a Integer. i is 257.578 is double number when converted to an integer data type its value is 257.\nOutput:\n$ javac Output.java\n$ java Output\n257\n\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "256", "correct": false },
        { "text": "257", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class Output\n    {\n        public static void main(String args[])\n        {\n\t    Double i = new Double(257.578123456789);  \n            float x = i.floatValue();\n            System.out.print(x);\n        }\n    }\n",
      "explanation": " floatValue() converts the value of wrapper i into float, since float can measure till 5 places after decimal hence 257.57812 is stored in floating point variable x.\nOutput:\n$ javac Output.java\n$ java Output\n257.57812\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "257.0", "correct": false },
        { "text": "257.57812", "correct": true },
        { "text": "257.578123456789", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class Output\n    {\n        public static void main(String args[])\n        {\n            Double y = new Double(257.57812);\n\t    Double i = new Double(257.578123456789);  \n            try\n            {\n\t        int x = i.compareTo(y);\n                System.out.print(x);\n            }\n            catch(ClassCastException e)\n            {\n                System.out.print(\"Exception\");\n            }\n\t}\n    }\n",
      "explanation": " i.compareTo() methods two double values, if they are equal then 0 is returned and if not equal then 1 is returned, here 257.57812 and 257.578123456789 are not equal hence 1 is returned and stored in x.\nOutput:\n$ javac Output.java\n$ java Output\n1\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": true },
        { "text": "Exception", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these packages contain classes and interfaces used for input & output operations of a program?",
      "explanation": "java.io provides support for input and output operations.",
      "options": [
        { "text": "java.util", "correct": false },
        { "text": "java.lang", "correct": false },
        { "text": "java.io", "correct": true },
        { "text": "all of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class is not a member class of java.io package?",
      "explanation": "None.",
      "options": [
        { "text": "String", "correct": true },
        { "text": "StringReader", "correct": false },
        { "text": "Writer", "correct": false },
        { "text": "File", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these interface is not a member of java.io package?",
      "explanation": "None.",
      "options": [
        { "text": "DataInput", "correct": false },
        { "text": "ObjectInput", "correct": false },
        { "text": "ObjectFilter", "correct": true },
        { "text": "FileFilter", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class is not related to input and output stream in terms of functioning?",
      "explanation": "A File describes properties of a file, a File object is used to obtain or manipulate the information associated with a disk file, such as the permissions, time date, and directories path, and to navigate subdirectories.",
      "options": [
        { "text": "File", "correct": true },
        { "text": "Writer", "correct": false },
        { "text": "InputStream", "correct": false },
        { "text": "Reader", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is specified by a File object?",
      "explanation": "None.",
      "options": [
        { "text": "a file in disk", "correct": false },
        { "text": "directory path", "correct": false },
        { "text": "directory in disk", "correct": true },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is method for testing whether the specified element is a file or a directory?",
      "explanation": "isFile() returns true if called on a file and returns false when called on a directory.",
      "options": [
        { "text": "IsFile()", "correct": false },
        { "text": "isFile()", "correct": true },
        { "text": "Isfile()", "correct": false },
        { "text": "isfile()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    import java.io.*;\n    class files \n    {\n        public static void main(String args[]) \n        {\n            File obj = new File(\"/java/system\");\n            System.out.print(obj.getName());\n        }\n    }\n",
      "explanation": "obj.getName() returns the name of the file.\nOutput:\n$ javac files.java\n$ java files\nsystem\n",
      "options": [
        { "text": "java", "correct": false },
        { "text": "system", "correct": true },
        { "text": "java/system", "correct": false },
        { "text": "/java/system", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program? (Note: file is made in c drive.)\n\n    import java.io.*;\n    class files \n    {\n        public static void main(String args[]) \n        {\n            File obj = new File(\"/java/system\");\n            System.out.print(obj.getAbsolutePath());\n        }\n    }\n",
      "explanation": "None.\nOutput:\n$ javac files.java\n$ java files\njavasystem\n",
      "options": [
        { "text": "java", "correct": false },
        { "text": "system", "correct": false },
        { "text": "java/system", "correct": false },
        { "text": "\\java\\system", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program? (Note: file is made in c drive.)\n\n    import java.io.*;\n    class files \n    {\n        public static void main(String args[]) \n        {\n            File obj = new File(\"/java/system\");\n            System.out.print(obj.canWrite());\n            System.out.print(\" \" + obj.canRead());\n        }\n    }\n\n",
      "explanation": "None.\nOutput:\n$ javac files.java\n$ java files\nfalse false\n",
      "options": [
        { "text": "true false", "correct": false },
        { "text": "false true", "correct": false },
        { "text": "true true", "correct": false },
        { "text": "false false", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program? (Note: file is made in c drive.)\n\n    import java.io.*;\n    class files \n    {\n        public static void main(String args[]) \n        {\n            File obj = new File(\"/java/system\");\n            System.out.print(obj.getParent());\n            System.out.print(\" \" + obj.isFile());\n        }\n    }\n",
      "explanation": "getparent() giver the parent directory of the file and isfile() checks weather the present file is a directory or a file in the disk.\nOutput:\n$ javac files.java\n$ java files\njava false\n",
      "options": [
        { "text": "java true", "correct": false },
        { "text": "java false", "correct": false },
        { "text": "\\java false", "correct": true },
        { "text": "\\java true", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these classes is used for input and output operation when working with bytes?",
      "explanation": "InputStream & OutputStream are designed for byte stream. Reader and writer are designed for character stream.",
      "options": [
        { "text": "InputStream", "correct": true },
        { "text": "Reader", "correct": false },
        { "text": "Writer", "correct": false },
        { "text": "All of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class is used to read and write bytes in a file?",
      "explanation": "None.",
      "options": [
        { "text": "FileReader", "correct": false },
        { "text": "FileWriter", "correct": false },
        { "text": "FileInputStream", "correct": true },
        { "text": "InputStreamReader", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method of InputStream is used to read integer representation of next available byte input?",
      "explanation": "None.",
      "options": [
        { "text": "read()", "correct": true },
        { "text": "scanf()", "correct": false },
        { "text": "get()", "correct": false },
        { "text": "getInteger()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these data type is returned by every method of OutputStream?",
      "explanation": "Every method of OutputStream returns void and throws an IOExeption in case of errors.",
      "options": [
        { "text": "int", "correct": false },
        { "text": "float", "correct": false },
        { "text": "byte", "correct": false },
        { "text": "none of the mentioned", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is a method to clear all the data present in output buffers?",
      "explanation": "None.",
      "options": [
        { "text": "clear()", "correct": false },
        { "text": "flush()", "correct": true },
        { "text": "fflush()", "correct": false },
        { "text": "close()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method(s) is/are used for writing bytes to an outputstream?",
      "explanation": "write() and print() are the two methods of OutputStream that are used for printing the byte data.",
      "options": [
        { "text": "put()", "correct": false },
        { "text": "print() and write()", "correct": true },
        { "text": "printf()", "correct": false },
        { "text": "write() and read()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program? (Note: inputoutput.java is stored in the disk.)\n\n    import java.io.*;\n    class filesinputoutput \n    {\n        public static void main(String args[]) \n        {\n            InputStream obj = new FileInputStream(\"inputoutput.java\");\n            System.out.print(obj.available());\n        }\n    }\n",
      "explanation": "obj.available() returns the number of bytes.\nOutput:\n$ javac filesinputoutput.java\n$ java filesinputoutput\n1422\n",
      "options": [
        { "text": "true", "correct": false },
        { "text": "false", "correct": false },
        { "text": "prints number of bytes in file", "correct": true },
        { "text": "prints number of characters in the file", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    import java.io.*;\n    public class filesinputoutput \n    {\n    \tpublic static void main(String[] args) \n        {\n \t   String obj  = \"abc\";\n           byte b[] = obj.getBytes();\n           ByteArrayInputStream obj1 = new ByteArrayInputStream(b);\n           for (int i = 0; i < 2; ++ i) \n           {\n               int c;\n               while ((c = obj1.read()) != -1) \n               {\n            \t   if(i == 0) \n                   {\n            \t       System.out.print((char)c); \n            \t   }\n               }\n           }\n        }\n    }\n",
      "explanation": "None.\nOutput:\n$ javac filesinputoutput.java\n$ java filesinputoutput\nabc\n",
      "options": [
        { "text": "abc", "correct": true },
        { "text": "ABC", "correct": false },
        { "text": "ab", "correct": false },
        { "text": "AB", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    import java.io.*;\n    public class filesinputoutput \n    {\n    \tpublic static void main(String[] args) \n        {\n \t   String obj  = \"abc\";\n           byte b[] = obj.getBytes();\n           ByteArrayInputStream obj1 = new ByteArrayInputStream(b);\n           for (int i = 0; i < 2; ++ i) \n           {\n               int c;\n               while ((c = obj1.read()) != -1) \n               {\n            \t   if (i == 0) \n                   {\n                       System.out.print(Character.toUpperCase((char)c)); \n            \t   }\n               }\n           }\n        }\n    }\n",
      "explanation": "None.\nOutput:\n$ javac filesinputoutput.java\n$ java filesinputoutput\nABC\n",
      "options": [
        { "text": "abc", "correct": false },
        { "text": "ABC", "correct": true },
        { "text": "ab", "correct": false },
        { "text": "AB", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    import java.io.*;\n    public class filesinputoutput \n    {\n    \tpublic static void main(String[] args) \n        {\n \t   String obj  = \"abc\";\n           byte b[] = obj.getBytes();\n           ByteArrayInputStream obj1 = new ByteArrayInputStream(b);\n           for (int i = 0; i < 2; ++ i) \n           {\n               int c;\n               while ((c = obj1.read()) != -1) \n               {\n            \t   if (i == 0) \n                   {\n                       System.out.print(Character.toUpperCase((char)c));\n                       obj2.write(1); \n            \t   }\n               }\n               System.out.print(obj2);\n           }\n        }\n    }\n",
      "explanation": "None.\nOutput:\n$ javac filesinputoutput.java\n$ java filesinputoutput\nAaBaaCaaa\n",
      "options": [
        { "text": "AaBaCa", "correct": false },
        { "text": "ABCaaa", "correct": false },
        { "text": "AaaBaaCaa", "correct": false },
        { "text": "AaBaaCaaa", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these stream contains the classes which can work on character stream?",
      "explanation": "InputStream & OutputStream classes under byte stream they are not streams. Character Stream contains all the classes which can work with Unicode.",
      "options": [
        { "text": "InputStream", "correct": false },
        { "text": "OutputStream", "correct": false },
        { "text": "Character Stream", "correct": true },
        { "text": "All of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class is used to read characters in a file?",
      "explanation": "None.",
      "options": [
        { "text": "FileReader", "correct": true },
        { "text": "FileWriter", "correct": false },
        { "text": "FileInputStream", "correct": false },
        { "text": "InputStreamReader", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method of FileReader class is used to read characters from a file?",
      "explanation": "None.",
      "options": [
        { "text": "read()", "correct": true },
        { "text": "scanf()", "correct": false },
        { "text": "get()", "correct": false },
        { "text": "getInteger()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class can be used to implement the input stream that uses a character array as the source?",
      "explanation": "CharArrayReader is an implementation of an input stream that uses character array as a source. Here array is the input source.",
      "options": [
        { "text": "BufferedReader", "correct": false },
        { "text": "FileReader", "correct": false },
        { "text": "CharArrayReader", "correct": true },
        { "text": "FileArrayReader", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these classes can return more than one character to be returned to input stream?",
      "explanation": "PushbackReader  class allows one or more characters to be returned to the input stream. This allows looking ahead in input stream and performing action accordingly.",
      "options": [
        { "text": "BufferedReader", "correct": false },
        { "text": "Bufferedwriter", "correct": false },
        { "text": "PushbachReader", "correct": true },
        { "text": "CharArrayReader", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    import java.io.*;\n    class Chararrayinput \n    {\n        public static void main(String[] args) \n        {\n\t    String obj  = \"abcdef\";\n            int length = obj.length();\n            char c[] = new char[length];\n            obj.getChars(0,length,c,0);\n            CharArrayReader input1 = new CharArrayReader(c);\n            CharArrayReader input2 = new CharArrayReader(c, 0, 3);\n            int i;\n            try \n            {\n\t\twhile ((i = input1.read()) != -1) \n                {\n                    System.out.print((char)i);\n                }\n       \t    } \n            catch (IOException e) \n            {\n\t        // TODO Auto-generated catch block\n                e.printStackTrace();\n\t    }\n\t}\n    }\n\n",
      "explanation": "None.\nOutput:\n$ javac Chararrayinput.java\n$ java Chararrayinput\nabcdef\n",
      "options": [
        { "text": "abc", "correct": false },
        { "text": "abcd", "correct": false },
        { "text": "abcde", "correct": false },
        { "text": "abcdef", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    import java.io.*;\n    class Chararrayinput \n    {\n        public static void main(String[] args) \n        {\n\t    String obj  = \"abcdef\";\n            int length = obj.length();\n            char c[] = new char[length];\n            obj.getChars(0, length, c, 0);\n            CharArrayReader input1 = new CharArrayReader(c);\n            CharArrayReader input2 = new CharArrayReader(c, 0, 3);\n            int i;\n            try \n            {\n\t\twhile ((i = input2.read()) != -1) \n                {\n                    System.out.print((char)i);\n                }\n       \t    } \n            catch (IOException e) \n            {\n\t        // TODO Auto-generated catch block\n                e.printStackTrace();\n\t    }\n\t}\n    }\n",
      "explanation": "None.\nOutput:\n$ javac Chararrayinput.java\n$ java Chararrayinput\nabc\n",
      "options": [
        { "text": "abc", "correct": true },
        { "text": "abcd", "correct": false },
        { "text": "abcde", "correct": false },
        { "text": "abcdef", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    import java.io.*;\n    class Chararrayinput \n    {\n        public static void main(String[] args) \n        {\n\t    String obj  = \"abcdefgh\";\n            int length = obj.length();\n            char c[] = new char[length];\n            obj.getChars(0, length, c, 0);\n            CharArrayReader input1 = new CharArrayReader(c);\n            CharArrayReader input2 = new CharArrayReader(c, 1, 4);\n            int i;\n            int j;\n            try \n            {\n\t\twhile ((i = input1.read()) == (j = input2.read())) \n                {\n                    System.out.print((char)i);\n                }\n       \t    } \n            catch (IOException e) \n            {\n\t        // TODO Auto-generated catch block\n                e.printStackTrace();\n\t    }\n\t}\n    }\n",
      "explanation": "No output is printed. CharArrayReader object input1 contains string “abcdefgh” whereas object input2 contains string “bcde”, when while((i=input1.read())==(j=input2.read())) is executed the starting character of each object is compared since they are unequal control comes out of loop and nothing is printed on the screen.\nOutput:\n$ javac Chararrayinput.java\n$ java Chararrayinput\n",
      "options": [
        { "text": "abc", "correct": false },
        { "text": "abcd", "correct": false },
        { "text": "abcde", "correct": false },
        { "text": "none of the mentioned", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is not a segment of memory in java?",
      "explanation": "There are only 3 types of memory segment. Stack Segment, Heap Segment and Code Segment.",
      "options": [
        { "text": "Stack Segment", "correct": false },
        { "text": "Heap Segment", "correct": false },
        { "text": "Code Segment", "correct": false },
        { "text": "Register Segment", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Does code Segment loads the java code?",
      "explanation": "Code Segment loads compiled java bytecode. Bytecode is platform independent.",
      "options": [
        { "text": "True", "correct": true },
        { "text": "False", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is JVM?",
      "explanation": "JVM is Interpreter. It reads .class files which is the byte code generated by compiler line by line and converts it into native OS code.",
      "options": [
        { "text": "Bootstrap", "correct": false },
        { "text": "Interpreter", "correct": true },
        { "text": "Extension", "correct": false },
        { "text": "Compiler", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which one of the following is a class loader?",
      "explanation": "Bootstrap is a class loader. It loads the classes into memory.",
      "options": [
        { "text": "Bootstrap", "correct": true },
        { "text": "Compiler", "correct": false },
        { "text": "Heap", "correct": false },
        { "text": "Interpreter", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which class loader loads jar files from JDK directory?",
      "explanation": "Extension loads jar files from lib/ext directory of the JRE. This gives the basic functionality available.",
      "options": [
        { "text": "Bootstrap", "correct": false },
        { "text": "Extension", "correct": true },
        { "text": "System", "correct": false },
        { "text": "Heap", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is not a memory classification in java?",
      "explanation": "Young generation is further classified into Eden space and Survivor space. Old generation is also the tenured space. The permanent generation is the non heap space.",
      "options": [
        { "text": "Young", "correct": false },
        { "text": "Old", "correct": false },
        { "text": "Permanent", "correct": false },
        { "text": "Temporary", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is the Java 8 update of PermGen?",
      "explanation": "Metaspace is the replacement of PermGen in Java 8. It is very similar to PermGen except that it resizes itself dynamically. Thus, it is unbounded.",
      "options": [
        { "text": "Code Cache", "correct": false },
        { "text": "Tenured Space", "correct": false },
        { "text": "Metaspace", "correct": true },
        { "text": "Eden space", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Classes and Methods are stored in which space?",
      "explanation": "The permanent generation holds objects which JVM finds convenient to have the garbage collector. Objects describing classes and methods, as well as the classes and methods themselves,  are a part of Permanent generation.",
      "options": [
        { "text": "Eden space", "correct": false },
        { "text": "Survivor space", "correct": false },
        { "text": "Tenured space", "correct": false },
        { "text": "Permanent space", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Where is String Pool stored?",
      "explanation": "When a string is created; if the string already exists in the pool, the reference of the existing string will be returned, else a new object is created and its reference is returned.",
      "options": [
        { "text": "Java Stack", "correct": false },
        { "text": "Java Heap", "correct": true },
        { "text": "Permanent Generation", "correct": false },
        { "text": "Metaspace", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " The same import package/class be called twice in java?",
      "explanation": "We can import the same package or same class multiple times. Neither compiler nor JVM complains will complain about it. JVM will internally load the class only once no matter how many times we import the same class or package.",
      "options": [
        { "text": "True", "correct": true },
        { "text": "False", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these exceptions handles the situations when an illegal argument is used to invoke a method?",
      "explanation": "None.",
      "options": [
        { "text": "IllegalException", "correct": false },
        { "text": "Argument Exception", "correct": false },
        { "text": "IllegalArgumentException", "correct": true },
        { "text": "IllegalMethodArgumentExcepetion", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these exceptions will be thrown if we declare an array with negative size?",
      "explanation": "Array size must always be positive if we declare an array with negative size then built in exception “NegativeArraySizeException” is thrown by the java’s run time system.",
      "options": [
        { "text": "IllegalArrayException", "correct": false },
        { "text": "IllegalArraySizeExeption", "correct": false },
        { "text": "NegativeArrayException", "correct": false },
        { "text": "NegativeArraySizeExeption", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these packages contain all the Java’s built in exceptions?",
      "explanation": "None.",
      "options": [
        { "text": "java.io", "correct": false },
        { "text": "java.util", "correct": false },
        { "text": "java.lang", "correct": true },
        { "text": "java.net", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these exceptions will be thrown if we use null reference for an arithmetic operation?",
      "explanation": "If we use null reference anywhere in the code where the value stored in that reference is used then NullPointerException occurs.",
      "options": [
        { "text": "ArithmeticException", "correct": false },
        { "text": "NullPointerException", "correct": true },
        { "text": "IllegalAccessException", "correct": false },
        { "text": "IllegalOperationException", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class is used to create user defined exception?",
      "explanation": "Exception class contains all the methods necessary for defining an exception. The class contains the Throwable class.",
      "options": [
        { "text": "java.lang", "correct": false },
        { "text": "Exception", "correct": true },
        { "text": "RunTime", "correct": false },
        { "text": "System", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class exception_handling \n    {\n        public static void main(String args[]) \n        {\n            try \n            {\n                int a[] = {1, 2,3 , 4, 5};\n                for (int i = 0; i < 7; ++i) \n                    System.out.print(a[i]);\n            }\n            catch(ArrayIndexOutOfBoundsException e) \n            {\n        \tSystem.out.print(\"0\");        \t\n            }\n        }\n    }\n",
      "explanation": "When array index goes out of bound then ArrayIndexOutOfBoundsException exception is thrown by the system.\nOutput:\n\n$ javac exception_handling.java\n$ java exception_handling\n123450\n",
      "options": [
        { "text": "12345", "correct": false },
        { "text": "123450", "correct": true },
        { "text": "1234500", "correct": false },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class exception_handling \n    {\n        public static void main(String args[]) \n        {\n            try \n            {\n                int a[] = {1, 2,3 , 4, 5};\n                for (int i = 0; i < 5; ++i) \n                    System.out.print(a[i]);\n                int x = 1/0;\n            }\n            catch(ArrayIndexOutOfBoundsException e) \n            {\n        \tSystem.out.print(\"A\");        \t\n            }\n            catch(ArithmeticException e) \n            {     \t\n                System.out.print(\"B\");\n            }\n        }\n    }\n",
      "explanation": "There can be more than one catch of a single try block. Here Arithmetic exception occurs instead of Array index out of bound exception hence B is printed after 12345\nOutput:\n$ javac exception_handling.java\n$ java exception_handling\n12345B\n",
      "options": [
        { "text": "12345", "correct": false },
        { "text": "12345A", "correct": false },
        { "text": "12345B", "correct": true },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class exception_handling \n    {\n            static void throwexception() throws ArithmeticException \n            {        \n                System.out.print(\"0\");\n                throw new ArithmeticException (\"Exception\");\n            }\n            public static void main(String args[]) \n            {\n            try \n            {\n                throwexception();\n            }\n            catch (ArithmeticException e) \n            {\n                    System.out.println(\"A\");\n            }\n        }\n    }\n",
      "explanation": " None.\nOutput:\n$ javac exception_handling.java\n$ java exception_handling\n0A\n",
      "options": [
        { "text": "A", "correct": false },
        { "text": "0", "correct": false },
        { "text": "0A", "correct": true },
        { "text": "Exception", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class exception_handling \n    {\n        public static void main(String args[]) \n        {\n            try \n             {\n                int a = 1;\n                int b = 10 / a;\n                try \n                {\n                     if (a == 1)\n                         a = a / a - a;\n                     if (a == 2) \n                     {\n                         int c[] = {1};\n                         c[8] = 9;\n                     }\n                finally \n                {\n                    System.out.print(\"A\");\n                }\n \n            }\n            catch (NullPointerException e) \n            {\n                    System.out.println(\"B\");\n            }\n        }\n    }\n",
      "explanation": "The inner try block does not have a catch which can tackle ArrayIndexOutOfBoundException hence finally is executed which prints ‘A’ the outer try block does have catch for NullPointerException exception but no such exception occurs in it hence its catch is never executed and only ‘A’ is printed.\nOutput:\n$ javac exception_handling.java\n$ java exception_handling\nA\n",
      "options": [
        { "text": "A", "correct": true },
        { "text": "B", "correct": false },
        { "text": "AB", "correct": false },
        { "text": "BA", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class exception_handling \n    {\n        public static void main(String args[]) \n        {\n            try \n            {\n                int a = args.length;\n                int b = 10 / a;\n                System.out.print(a);\n                try \n                {\n                     if (a == 1)\n                         a = a / a - a;\n                     if (a == 2) \n                     {\n                         int c = {1};\n                         c[8] = 9;\n                     }\n                }\n                catch (ArrayIndexOutOfBoundException e) \n                {\n                    System.out.println(\"TypeA\");\n                }\n                catch (ArithmeticException e) \n                {\n                    System.out.println(\"TypeB\");\n                }\n        }\n    }\nNote: Execution command line: $ java exception_handling one two\n",
      "explanation": " Execution command line is “$ java exception_ handling one two” hence there are two input making args.length = 2, hence “c[8] = 9” in second try block is executing which throws ArrayIndexOutOfBoundException which is caught by catch of nested try block. Hence 0TypeB is printed.\nOutput:\n$ javac exception_handling.java\n$ java exception_handling\n0TypeB\n",
      "options": [
        { "text": "TypeA", "correct": false },
        { "text": "TypeB", "correct": false },
        { "text": "0TypeA", "correct": false },
        { "text": "0TypeB", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class provides various types of rounding functions?",
      "explanation": "None.",
      "options": [
        { "text": "Math", "correct": true },
        { "text": "Process", "correct": false },
        { "text": "System", "correct": false },
        { "text": "Object", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods return a smallest whole number greater than or equal to variable X?",
      "explanation": "ceil(double X) returns the smallest whole number greater than or equal to variable X.",
      "options": [
        { "text": "double ceil(double X)", "correct": true },
        { "text": "double floor(double X)", "correct": false },
        { "text": "double max(double X)", "correct": false },
        { "text": "double min(double X)", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method returns a largest whole number less than or equal to variable X?",
      "explanation": "double floor(double X) returns a largest whole number less than or equal to variable X.",
      "options": [
        { "text": "double ceil(double X)", "correct": false },
        { "text": "double floor(double X)", "correct": true },
        { "text": "double max(double X)", "correct": false },
        { "text": "double min(double X)", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of function return absolute value of a variable?",
      "explanation": "abs() returns the absolute value of a variable.",
      "options": [
        { "text": "abs()", "correct": true },
        { "text": "absolute()", "correct": false },
        { "text": "absolutevariable()", "correct": false },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\nadvertisement\n\n    class A \n    {\n         int x;\n         int y;\n         void display() \n         {\n              System.out.print(x + \" \" + y);\n         }\n    }\n    class Output \n    {\n         public static void main(String args[]) \n         {\n             A obj1 = new A();\n             A obj2 = new A();\n             obj1.x = 1;\n             obj1.y = 2;\n             obj2 = obj1.clone();\n             obj1.display();\n             obj2.display();\n         }\n    }\n",
      "explanation": " clone() method of object class is used to generate duplicate copy of the object on which it is called. Copy of obj1 is generated and stored in obj2.\nOutput:\n$ javac Output.java\n$ java Output\n1 2 1 2\n",
      "options": [
        { "text": "1 2 0 0", "correct": false },
        { "text": "1 2 1 2", "correct": true },
        { "text": "0 0 0 0", "correct": false },
        { "text": "System Dependent", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class Output \n    {\n         public static void main(String args[]) \n         {\n             double x = 3.14;  \n             int y = (int) Math.abs(x);\n             System.out.print(y);\n         }\n    }\n",
      "explanation": " None.\nOutput:\n$ javac Output.java\n$ java Output\n3\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "3", "correct": true },
        { "text": "3.0", "correct": false },
        { "text": "3.1", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class Output \n    {\n         public static void main(String args[]) \n         {\n             double x = 3.14;  \n             int y = (int) Math.ceil(x);\n             System.out.print(y);\n         }\n    }\n\n",
      "explanation": " ceil(double X) returns the smallest whole number greater than or equal to variable x.\nOutput:\n$ javac Output.java\n$ java Output\n4\n\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "3", "correct": false },
        { "text": "3.0", "correct": false },
        { "text": "4", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class Output \n    {\n         public static void main(String args[]) \n         {\n             double x = 3.14;  \n             int y = (int) Math.floor(x);\n             System.out.print(y);\n         }\n    }\n",
      "explanation": "double floor(double X) returns a largest whole number less than or equal to variable X. Here the smallest whole number less than 3.14 is 3.\nOutput:\n$ javac Output.java\n$ java Output\n3\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "3", "correct": true },
        { "text": "3.0", "correct": false },
        { "text": "4", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods of Byte wrapper can be used to obtain Byte object from a string?",
      "explanation": "decode() methods returns a Byte object that contains the value specified by string.",
      "options": [
        { "text": "toString()", "correct": false },
        { "text": "getString()", "correct": false },
        { "text": "decode()", "correct": true },
        { "text": "encode()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following methods Byte wrapper return the value as a double?",
      "explanation": "doubleValue() returns the value of invoking object as double.",
      "options": [
        { "text": "doubleValue()", "correct": true },
        { "text": "converDouble()", "correct": false },
        { "text": "getDouble()", "correct": false },
        { "text": "getDoubleValue()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is a super class of wrappers Byte and short wrappers?",
      "explanation": "Number is an abstract class containing subclasses Double, Float, Byte, Short, Integer and Long.",
      "options": [
        { "text": "Long", "correct": false },
        { "text": "Digits", "correct": false },
        { "text": "Float", "correct": false },
        { "text": "Number", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods is not defined in both Byte and Short wrappers?",
      "explanation": "isInfinite() methods is defined in Integer and Long Wrappers, returns true if specified value is an infinite value otherwise it returns false.",
      "options": [
        { "text": "intValue()", "correct": false },
        { "text": "isInfinite()", "correct": true },
        { "text": "toString()", "correct": false },
        { "text": "hashCode()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java code?\n\n    class Output \n    {\n        public static void main(String args[])\n        {\n            Double i = new Double(257.5);  \n            Double x = i.MAX_VALUE;\n            System.out.print(x);\n        }\n    }\n",
      "explanation": "The super class of Double class defines a constant MAX_VALUE above which a number is considered to be infinity. MAX_VALUE is 1.7976931348623157E308.\nOutput:\n$ javac Output.java\n$ java Output\n1.7976931348623157E308\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1.7976931348623157E308", "correct": true },
        { "text": "1.7976931348623157E30", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output\n    {\n        public static void main(String args[])\n        {\n            Double i = new Double(257.5);  \n            Double x = i.MIN_VALUE;\n            System.out.print(x);\n        }\n    }\n",
      "explanation": " The super class of Byte class defines a constant MIN_VALUE below which a number is considered to be negative infinity. MIN_VALUE is 4.9E-324.\nOutput:\n$ javac Output.java\n$ java Output\n4.9E-324\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "4.9E-324", "correct": true },
        { "text": "1.7976931348623157E308", "correct": false },
        { "text": "None of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output \n    {\n        public static void main(String args[])\n        {\n\t    Double i = new Double(257.578123456789);  \n            float x = i.floatValue();\n            System.out.print(x);\n        }\n    }\n",
      "explanation": "floatValue() converts the value of wrapper i into float, since float can measure till 5 places after decimal hence 257.57812 is stored in floating point variable x.\nOutput:\n$ javac Output.java\n$ java Output\n257.57812\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "257.0", "correct": false },
        { "text": "257.57812", "correct": true },
        { "text": "257.578123456789", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods of Character wrapper can be used to obtain the char value contained in Character object.",
      "explanation": "To obtain the char value contained in a Character object, we use charValue() method.",
      "options": [
        { "text": "get()", "correct": false },
        { "text": "getVhar()", "correct": false },
        { "text": "charValue()", "correct": true },
        { "text": "getCharacter()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following constant are defined in Character wrapper?",
      "explanation": "Character wrapper defines 5 constants – MAX_RADIX, MIN_RADIX, MAX_VALUE, MIN_VALUE & TYPE.",
      "options": [
        { "text": "MAX_RADIX", "correct": false },
        { "text": "MAX_VALUE", "correct": false },
        { "text": "TYPE", "correct": false },
        { "text": "All of the mentioned", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these is a super class of Character wrapper?",
      "explanation": "Number is an abstract class containing subclasses Double, Float, Byte, Short, Character, Integer and Long.",
      "options": [
        { "text": "Long", "correct": false },
        { "text": "Digits", "correct": false },
        { "text": "Float", "correct": false },
        { "text": "Number", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods is used to know whether a given Character object is part of Java’s Identifiers?",
      "explanation": "None.",
      "options": [
        { "text": "isIdentifier()", "correct": false },
        { "text": "isJavaIdentifier()", "correct": false },
        { "text": "isJavaIdentifierPart()", "correct": true },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these coding techniques is used by method isDefined()?",
      "explanation": "isDefined() returns true if ch is defined by Unicode. Otherwise, it returns false.",
      "options": [
        { "text": "Latin", "correct": false },
        { "text": "ASCII", "correct": false },
        { "text": "ANSI", "correct": false },
        { "text": "UNICODE", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            int a = Character.MAX_VALUE;\n            System.out.print((char)a);\n        }\n    }\n",
      "explanation": "Character.MAX_VALUE returns the largest character value, which is of character ‘?’.\nOutput:\n\n$ javac Output.java\n$ java Output\n?\n",
      "options": [
        { "text": "<", "correct": false },
        { "text": ">", "correct": false },
        { "text": "?", "correct": true },
        { "text": "$", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output\n    {\n        public static void main(String args[])\n        {\n            int a = Character.MIN_VALUE;\n            System.out.print((char)a);\n        }\n    }\n",
      "explanation": " Character.MIN_VALUE returns the smallest character value, which is of space character ‘ ‘.\nOutput:\n$ javac Output.java\n$ java Output\n",
      "options": [
        { "text": "<", "correct": false },
        { "text": "!", "correct": false },
        { "text": "@", "correct": false },
        { "text": "Space", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output \n    {\n         public static void main(String args[])\n         {\n             char a[] = {'a', '5', 'A', ' '};   \n             System.out.print(Character.isDigit(a[0])+ \" \");\n             System.out.print(Character.isWhitespace(a[3])+ \" \");\n             System.out.print(Character.isUpperCase(a[2]));\n        }\n    }\n",
      "explanation": "Character.isDigit(a[0]) checks for a[0], whether it is a digit or not, since a[0] i:e ‘a’ is a character false is returned. a[3] is a whitespace hence Character.isWhitespace(a[3]) returns a true. a[2] is an uppercase letter i:e ‘A’ hence Character.isUpperCase(a[2]) returns true.\nOutput:\n$ javac Output.java\n$ java Output\nfalse true true\n",
      "options": [
        { "text": "true false true", "correct": false },
        { "text": "false true true", "correct": true },
        { "text": "true true false", "correct": false },
        { "text": "false false false", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output\n    {\n        public static void main(String args[])\n        {\n\t    char a = (char) 98;\n            a = Character.toUpperCase(a);\n            System.out.print(a);\n        }\n    }\n",
      "explanation": "None.\nOutput:\n$ javac Output.java\n$ java Output\nB\n",
      "options": [
        { "text": "b", "correct": false },
        { "text": "c", "correct": false },
        { "text": "B", "correct": true },
        { "text": "C", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class Output\n    {\n        public static void main(String args[])\n        {\n\t    char a = '@';\n            boolean x = Character.isLetter(a);\n            System.out.print(x);\n        }\n    }\n",
      "explanation": "None.\nOutput:\n$ javac Output.java\n$ java Output\nfalse\n",
      "options": [
        { "text": "true", "correct": false },
        { "text": "false", "correct": true },
        { "text": "@", "correct": false },
        { "text": "B", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods of Boolean wrapper returns boolean equivalent of an object.",
      "explanation": "None.",
      "options": [
        { "text": "getBool()", "correct": false },
        { "text": "booleanValue()", "correct": true },
        { "text": "getbooleanValue()", "correct": false },
        { "text": "getboolValue()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following constant are defined in Boolean wrapper?",
      "explanation": "Boolean wrapper defines 3 constants – TRUE, FALSE & TYPE.",
      "options": [
        { "text": "TRUE", "correct": false },
        { "text": "FALSE", "correct": false },
        { "text": "TYPE", "correct": false },
        { "text": "All of the mentioned", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods return string equivalent of Boolean object?",
      "explanation": "None.",
      "options": [
        { "text": "getString()", "correct": false },
        { "text": "toString()", "correct": true },
        { "text": "converString()", "correct": false },
        { "text": "getStringObject()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods is used to know whether a string contains “true”?",
      "explanation": "valueOf() returns true if the specified string contains “true” in lower or uppercase and false otherwise.",
      "options": [
        { "text": "valueOf()", "correct": true },
        { "text": "valueOfString()", "correct": false },
        { "text": "getString()", "correct": false },
        { "text": "none of the mentioned", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class have only one field?",
      "explanation": "Void class has only one field – TYPE, which holds a reference to the Class object for type void. We do not create an instance of this class.",
      "options": [
        { "text": "Character", "correct": false },
        { "text": "Boolean", "correct": false },
        { "text": "Byte", "correct": false },
        { "text": "void", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output\n    {\n        public static void main(String args[])\n        {\n            String str = \"true\";\n            boolean x = Boolean.valueOf(str);\n            System.out.print(x);\n        }\n    }\n",
      "explanation": "valueOf() returns true if the specified string contains “true” in lower or uppercase and false otherwise.\nOutput:\n\n$ javac Output.java\n$ java Output\ntrue\n",
      "options": [
        { "text": "True", "correct": true },
        { "text": "False", "correct": false },
        { "text": "Compilation Error", "correct": false },
        { "text": "Runtime Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output\n    {\n        public static void main(String args[])\n        {\n            String str = \"true false true\";\n            boolean x = Boolean.valueOf(str);\n            System.out.print(x);\n        }\n    }\n",
      "explanation": "valueOf() returns true if the specified string contains “true” in lower or uppercase and false otherwise.\nOutput:\n$ javac Output.java\n$ java Output\nfalse\n",
      "options": [
        { "text": "True", "correct": false },
        { "text": "False", "correct": true },
        { "text": "Compilation Error", "correct": false },
        { "text": "Runtime Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output\n    {\n        public static void main(String args[])\n        {\n            String str = \"TRUE\";\n            boolean x = Boolean.valueOf(str);\n            System.out.print(x);\n        }\n    }\n",
      "explanation": "valueOf() returns a Boolean instance representing the specified boolean value. If the specified boolean value is true, this method returns Boolean.TRUE; if it is false, this method returns Boolean.FALSE. If a new Boolean instance is not required, this method should generally be used in preference to the constructor Boolean(boolean), as this method is likely to yield significantly better space and time.\nOutput:\n$ javac Output.java\n$ java Output\ntrue",
      "options": [
        { "text": "True", "correct": true },
        { "text": "False", "correct": false },
        { "text": "Compilation Error", "correct": false },
        { "text": "Runtime Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output \n    {\n        public static void main(String args[])\n        {\n\t    String str = \"true false\";\n            boolean x = Boolean.parseBoolean(str);\n            System.out.print(x);\n        }\n    }\n",
      "explanation": " parseBoolean() Parses the string argument as a boolean. The boolean returned represents the value true if the string argument is not null and is equal, ignoring case, to the string “true”.\nExample: Boolean.parseBoolean(“True”) returns true.\nExample: Boolean.parseBoolean(“yes”) returns false.\nOutput:\n$ javac Output.java\n$ java Output\nfalse\n",
      "options": [
        { "text": "True", "correct": false },
        { "text": "False", "correct": true },
        { "text": "System Dependent", "correct": false },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " What will be the output of the following Java program?\n\n    class Output\n    {\n        public static void main(String args[]) \n        {\n\t   String x = Boolean.toString(false);\n        }\n    }\n",
      "explanation": "toString() Returns a String object representing the specified boolean. If the specified boolean is true, then the string “true” will be returned, otherwise the string “false” will be returned.\nOutput:\n$ javac Output.java\n$ java Output\nfalse\n",
      "options": [
        { "text": "True", "correct": false },
        { "text": "False", "correct": true },
        { "text": "System Dependent", "correct": false },
        { "text": "Compilation Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class contains all the methods present in Math class?",
      "explanation": "SystemMath class defines a complete set of mathematical methods that are parallel those in Math class. The difference is that the StrictMath version is guaranteed to generate precisely identical results across all Java implementations.",
      "options": [
        { "text": "SystemMath", "correct": false },
        { "text": "StrictMath", "correct": true },
        { "text": "Compiler", "correct": false },
        { "text": "ClassLoader", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method return a pseudorandom number?",
      "explanation": "None.",
      "options": [
        { "text": "rand()", "correct": false },
        { "text": "random()", "correct": true },
        { "text": "randomNumber()", "correct": false },
        { "text": "randGenerator()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method returns the remainder of dividend / divisor?",
      "explanation": "IEEEremainder() returns the remainder of dividend / divisor.",
      "options": [
        { "text": "remainder()", "correct": false },
        { "text": "getRemainder()", "correct": false },
        { "text": "CSIremainder()", "correct": false },
        { "text": "IEEEremainder()", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method converts radians to degrees?",
      "explanation": "None.",
      "options": [
        { "text": "toRadian()", "correct": false },
        { "text": "toDegree()", "correct": true },
        { "text": "convertRadian()", "correct": false },
        { "text": "converDegree()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "toRadian() and toDegree() methods were added by which version of Java?",
      "explanation": "toRadian() and toDegree() methods were added by Java 2.0 before that there was no method which could directly convert degree into radians and vice versa.",
      "options": [
        { "text": "Java 1.0", "correct": false },
        { "text": "Java 1.5", "correct": false },
        { "text": "Java 2.0", "correct": true },
        { "text": "Java 3.0", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these method returns a smallest whole number greater than or equal to variable X?",
      "explanation": "ciel(double X) returns the smallest whole number greater than or equal to variable X.",
      "options": [
        { "text": "double ciel(double X)", "correct": true },
        { "text": "double floor(double X)", "correct": false },
        { "text": "double max(double X)", "correct": false },
        { "text": "double min(double X)", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            double x = 3.14;  \n            int y = (int) Math.toDegrees(x);\n            System.out.print(y);\n        }\n    }\n",
      "explanation": "3.14 in degree 179.9087. We usually take it to be 180. Buts here we have type casted it to integer data type hence 179.\nOutput:\n$ javac Output.java\n$ java Output\n179\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "179", "correct": true },
        { "text": "180", "correct": false },
        { "text": "360", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            double x = 3.14;  \n            int y = (int) Math.toRadians(x);\n            System.out.print(y);\n        }\n    }\n\n",
      "explanation": "None.\nOutput:\n$ javac Output.java\n$ java Output\n0\n",
      "options": [
        { "text": "0", "correct": true },
        { "text": "3", "correct": false },
        { "text": "3.0", "correct": false },
        { "text": "3.1", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            double x = 102;\n            double y = 5;\n            double z = Math.IEEEremainder(x, y);\n            System.out.print(z);}\n         }\n    }\n",
      "explanation": "IEEEremainder() returns the remainder of dividend / divisor. Here dividend is 102 and divisor is 5 therefore remainder is 2. It is similar to modulus – ‘%’ operator of C/C++ language.\nOutput:\n$ javac Output.java\n$ java Output\n2\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "2", "correct": true },
        { "text": "3", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " Will this Java program generate same output is executed again?\n\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            int y = double z = Math.random();\n            System.out.print(y);\n        }\n    }\n\n",
      "explanation": "There is no relation between random numbers generated previously in Java.",
      "options": [
        { "text": "Yes", "correct": false },
        { "text": "No", "correct": true },
        { "text": "Compiler Dependent", "correct": false },
        { "text": "Operating System Dependent", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these classes encapsulate runtime environment?",
      "explanation": "None.",
      "options": [
        { "text": "Class", "correct": false },
        { "text": "System", "correct": false },
        { "text": "Runtime", "correct": true },
        { "text": "ClassLoader", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following exceptions is thrown by every method of Runtime class?",
      "explanation": "Every method of Runtime class throws SecurityException.",
      "options": [
        { "text": "IOException", "correct": false },
        { "text": "SystemException", "correct": false },
        { "text": "SecurityException", "correct": true },
        { "text": "RuntimeException", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods returns the total number of bytes of memory available to the program?",
      "explanation": "TotalMemory() returns the total number of bytes available to the program.",
      "options": [
        { "text": "getMemory()", "correct": false },
        { "text": "TotalMemory()", "correct": true },
        { "text": "SystemMemory()", "correct": false },
        { "text": "getProcessMemory()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these Exceptions is thrown by loadClass() method of ClassLoader class?",
      "explanation": "None.",
      "options": [
        { "text": "IOException", "correct": false },
        { "text": "SystemException", "correct": false },
        { "text": "ClassFormatError", "correct": false },
        { "text": "ClassNotFoundException", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class X \n    {\n        int a;\n        double b;\n    }\n    class Y extends X \n    {\n\tint c;\n    }\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            X a = new X();\n            Y b = new Y();\n            Class obj;\n            obj = b.getClass();\n            System.out.print(obj.getSuperclass());\n        }\n    }\n",
      "explanation": "getSuperClass() returns the super class of an object. b is an object of class Y which extends class X , Hence Super class of b is X. therefore class X is printed.\nOutput:\n$ javac Output.java\n$ java Output\nclass X\n\n",
      "options": [
        { "text": "X", "correct": false },
        { "text": "Y", "correct": false },
        { "text": "class X", "correct": true },
        { "text": "class Y", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class X \n    {\n        int a;\n        double b;\n    }\n    class Y extends X \n    {\n\tint c;\n    }\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            X a = new X();\n            Y b = new Y();\n            Class obj;\n            obj = b.getClass();\n            System.out.print(b.equals(a));\n        }\n    }\n",
      "explanation": "None.\nOutput:\n$ javac Output.java\n$ java Output\nfalse\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "true", "correct": false },
        { "text": "false", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class X \n    {\n        int a;\n        double b;\n    }\n    class Y extends X \n    {\n\tint c;\n    }\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            X a = new X();\n            Y b = new Y();\n            Class obj;\n            obj = b.getClass();\n            System.out.print(obj.isInstance(a));\n        }\n    }\n",
      "explanation": "Although class Y extends class X but still a is not considered related to Y. hence isInstance() returns false.\nOutput:\n$ javac Output.java\n$ java Output\nfalse\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "true", "correct": false },
        { "text": "false", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these classes encapsulate runtime state of an object?",
      "explanation": "None.",
      "options": [
        { "text": "Class", "correct": true },
        { "text": "System", "correct": false },
        { "text": "Runtime", "correct": false },
        { "text": "Cache", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods returns the class of an object?",
      "explanation": "None.",
      "options": [
        { "text": "getClass()", "correct": true },
        { "text": "Class()", "correct": false },
        { "text": "WhoseClass()", "correct": false },
        { "text": "WhoseObject()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods return a class object given its name?",
      "explanation": "findSystemClass() returns  a class object given its name.",
      "options": [
        { "text": "getClass()", "correct": false },
        { "text": "findClass()", "correct": false },
        { "text": "getSystemClass()", "correct": false },
        { "text": "findSystemClass()", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class defines how the classes are loaded?",
      "explanation": "None.",
      "options": [
        { "text": "Class", "correct": false },
        { "text": "System", "correct": false },
        { "text": "Runtime", "correct": false },
        { "text": "ClassLoader", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class X \n    {\n        int a;\n        double b;\n    }\n    class Y extends X \n    {\n\tint c;\n    }\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            X a = new X();\n            Y b = new Y();\n            Class obj;\n            obj = a.getClass();\n            System.out.print(obj.getName());\n        }\n    }\n",
      "explanation": " getClass() is used to obtain the class of an object, here ‘a’ is an object of class ‘X’. hence a.getClass() returns ‘X’ which is stored in class Class object obj.\nOutput:\n$ javac Output.java\n$ java Output\nX\n",
      "options": [
        { "text": "X", "correct": true },
        { "text": "Y", "correct": false },
        { "text": "a", "correct": false },
        { "text": "b", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class X\n    {\n        int a;\n        double b;\n    }\n    class Y extends X \n    {\n\tint c;\n    }\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            X a = new X();\n            Y b = new Y();\n            Class obj;\n            obj = b.getClass();\n            System.out.print(obj.getSuperclass());\n        }\n    }\n",
      "explanation": "getSuperClass() returns the super class of an object. b is an object of class Y which extends class X, Hence Super class of b is X. therefore class X is printed.\nOutput:\n$ javac Output.java\n$ java Output\nclass X\n",
      "options": [
        { "text": "X", "correct": false },
        { "text": "Y", "correct": false },
        { "text": "class X", "correct": true },
        { "text": "class Y", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class X \n    {\n        int a;\n        double b;\n    }\n    class Y extends X \n    {\n\tint c;\n    }\n    class Output \n    {\n        public static void main(String args[]) \n        {\n            X a = new X();\n            Y b = new Y();\n            Class obj;\n            obj = b.getClass();\n            System.out.print(obj.isLocalClass());\n        }\n    }\n\n",
      "explanation": "None.\nOutput:\n$ javac Output.java\n$ java Output\nfalse\n",
      "options": [
        { "text": "0", "correct": false },
        { "text": "1", "correct": false },
        { "text": "true", "correct": false },
        { "text": "false", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the interface contains all the methods used for handling thread related operations in Java?",
      "explanation": "Runnable interface defines all the methods for handling thread operations in Java.",
      "options": [
        { "text": "Runnable interface", "correct": true },
        { "text": "Math interface", "correct": false },
        { "text": "System interface", "correct": false },
        { "text": "ThreadHandling interface", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these class is used to make a thread?",
      "explanation": "Thread class is used to make threads in java, Thread encapsulates a thread of execution. To create a new thread the program will either extend Thread or implement the Runnable interface.",
      "options": [
        { "text": "String", "correct": false },
        { "text": "System", "correct": false },
        { "text": "Thread", "correct": true },
        { "text": "Runnable", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of this interface is implemented by Thread class?",
      "explanation": "None.",
      "options": [
        { "text": "Runnable", "correct": true },
        { "text": "Connections", "correct": false },
        { "text": "Set", "correct": false },
        { "text": "MapConnections", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of these methods of a Thread class is used to suspend a thread for a period of time?",
      "explanation": "None.",
      "options": [
        { "text": "sleep()", "correct": true },
        { "text": "terminate()", "correct": false },
        { "text": "suspend()", "correct": false },
        { "text": "stop()", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class newthread implements Runnable \n    {\n\tThread t1,t2;\n        newthread() \n        {\n            t1 = new Thread(this,\"Thread_1\");\n            t2 = new Thread(this,\"Thread_2\");\n            t1.start();\n            t2.start();\n\t}\n\tpublic void run() \n        {\n            t2.setPriority(Thread.MAX_PRIORITY);\t\n\t    System.out.print(t1.equals(t2));\n        }    \n    }\n    class multithreaded_programing \n    {\n        public static void main(String args[]) \n        {\n            new newthread();        \n        }\n    }\n",
      "explanation": "Threads t1 & t2 are created by class newthread that is implementing runnable interface, hence both the threads are provided their own run() method specifying the actions to be taken. When constructor of newthread class is called first the run() method of t1 executes than the run method of t2 printing 2 times “false” as both the threads are not equal one is having different priority than other, hence falsefalse is printed.\nOutput:\n\n$ javac multithreaded_programing.java\n$ java multithreaded_programing\nfalsefalse\n\n",
      "options": [
        { "text": "true", "correct": false },
        { "text": "false", "correct": false },
        { "text": "truetrue", "correct": false },
        { "text": "falsefalse", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class newthread implements Runnable \n    {\n\tThread t;\n        newthread() \n        {\n            t = new Thread(this,\"New Thread\");\n            t.start();\n\t}\n\tpublic void run()\n        {\n            t.setPriority(Thread.MAX_PRIORITY);\t\n            System.out.println(t);\n\t}\n    }\n    class multithreaded_programing \n    {\n        public static void main(String args[]) \n        {\n            new newthread();        \n        }\n    }\n",
      "explanation": "Thread t has been made with default priority value 5 but in run method the priority has been explicitly changed to MAX_PRIORITY of class thread, that is 10 by code ‘t.setPriority(Thread.MAX_PRIORITY);’ using the setPriority function of thread t.\nOutput:\n$ javac multithreaded_programing.java\n$ java multithreaded_programing\nThread[New Thread,10,main]\n",
      "options": [
        { "text": "Thread[New Thread,0,main] ", "correct": false },
        { "text": "Thread[New Thread,1,main] ", "correct": false },
        { "text": "Thread[New Thread,5,main] ", "correct": false },
        { "text": "Thread[New Thread,10,main] ", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class newthread implements Runnable \n    {\n\tThread t;\n        newthread() \n        {\n            t = new Thread(this,\"My Thread\");\n            t.start();\n\t}\n    }\n    class multithreaded_programing \n    {\n        public static void main(String args[]) \n        {\n            new newthread();        \n        }\n    }\n",
      "explanation": "Thread t has been made by using Runnable interface, hence it is necessary to use inherited abstract method run() method to specify instructions to be implemented on the thread, since no run() method is used it gives a compilation error.\nOutput:\n$ javac multithreaded_programing.java\nThe type newthread must implement the inherited abstract method Runnable.run()\n",
      "options": [
        { "text": "My Thread", "correct": false },
        { "text": "Thread[My Thread,5,main] ", "correct": false },
        { "text": "Compilation Error", "correct": true },
        { "text": "Runtime Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class newthread implements Runnable \n    {\n\tThread t;\n        newthread() \n        {\n            t = new Thread(this,\"My Thread\");\n            t.start();\n\t}\n\tpublic void run() \n        {\n\t    System.out.println(t.getName());\n\t}\n    }\n    class multithreaded_programing \n    {\n        public static void main(String args[]) \n        {\n            new newthread();        \n        }\n    }\n",
      "explanation": "None.\nOutput:\n$ javac multithreaded_programing.java\n$ java multithreaded_programing\nMy Thread\n",
      "options": [
        { "text": "My Thread", "correct": true },
        { "text": "Thread[My Thread,5,main] ", "correct": false },
        { "text": "Compilation Error", "correct": false },
        { "text": "Runtime Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What will be the output of the following Java program?\n\n    class newthread implements Runnable \n    {\n\tThread t;\n        newthread() \n        {\n            t = new Thread(this,\"My Thread\");\n            t.start();\n\t}\n\tpublic void run() \n        {\n\t    System.out.println(t);\n\t}\n    }\n    class multithreaded_programing \n    {\n        public static void main(String args[]) \n        {\n            new newthread();        \n        }\n    }\n",
      "explanation": "None.\nOutput:\n$ javac multithreaded_programing.java\n$ java multithreaded_programing\nThread[My Thread,5,main]\n",
      "options": [
        { "text": "My Thread", "correct": false },
        { "text": "Thread[My Thread,5,main] ", "correct": true },
        { "text": "Compilation Error", "correct": false },
        { "text": "Runtime Error", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which object Java application uses to create a new process?",
      "explanation": "Java application uses ProcessBuilder object to create a new process. By default, same set of environment variables passed which are set in application’s virtual machine process.",
      "options": [
        { "text": "Process", "correct": false },
        { "text": "Builder", "correct": false },
        { "text": "ProcessBuilder", "correct": true },
        { "text": "CreateBuilder", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which of the following is true about Java system properties?",
      "explanation": "Java system properties are only used and accessible by the processes they are added.",
      "options": [
        {
          "text": "Java system properties are accessible by any process",
          "correct": false
        },
        {
          "text": "Java system properties are accessible by processes they are added to",
          "correct": true
        },
        {
          "text": "Java system properties are retrieved by System.getenv()",
          "correct": false
        },
        {
          "text": "Java system properties are set by System.setenv()",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Java system properties can be set at runtime.",
      "explanation": "Java system properties can be set at runtime using System.setProperty(name, value) or using System.getProperties().load() methods.",
      "options": [
        { "text": "True", "correct": true },
        { "text": "False", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which system property stores installation directory of JRE?",
      "explanation": "java.home is the installation directory of Java Runtime Environment.",
      "options": [
        { "text": "user.home", "correct": false },
        { "text": "java.class.path", "correct": false },
        { "text": "java.home", "correct": true },
        { "text": "user.dir", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What does System.getProperty(“variable”) return?",
      "explanation": "System.getProperty(“variable”) returns null value. Because, variable is not a property and if property does not exist, this method returns null value.",
      "options": [
        { "text": "compilation error", "correct": false },
        { "text": "value stored in variable", "correct": false },
        { "text": "runtime error", "correct": false },
        { "text": "null", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "What is true about the setProperties method?",
      "explanation": "The changes made by the setProperties method are not persistent. Hence, it does not affect future invocation.",
      "options": [
        {
          "text": "setProperties method changes the set of Java Properties which are persistent",
          "correct": false
        },
        {
          "text": "Changing the system properties within an application will affect future invocations",
          "correct": false
        },
        {
          "text": "setProperties method changes the set of Java Properties which are not persistent",
          "correct": true
        },
        {
          "text": "setProperties writes the values directly into the file which stores all the properties",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "How to use environment properties in the class?",
      "explanation": "             @Autowired\n\t     private Environment env;\nThis is how environment variables are injected in the class where they can be used.\n\n\n",
      "options": [
        { "text": "@Environment", "correct": false },
        { "text": "@Variable", "correct": false },
        { "text": "@Property", "correct": false },
        { "text": "@Autowired", "correct": true }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": "Which environment variable is used to set java path?",
      "explanation": "JAVA_HOME is used to store a path to the java installation.",
      "options": [
        { "text": "JAVA", "correct": false },
        { "text": "JAVA_HOME", "correct": true },
        { "text": "CLASSPATH", "correct": false },
        { "text": "MAVEN_HOME", "correct": false }
      ],
      "source": "https://www.sanfoundry.com"
    },
    {
      "type": "MCQ",
      "statement": " How to read a classpath file?",
      "explanation": "This method can be used to load files using relative path to the package of the class.",
      "options": [
        {
          "text": "InputStream in = this.getClass().getResource(“SomeTextFile.txt”);",
          "correct": false
        },
        {
          "text": "InputStream in = this.getClass().getResourceClasspath(“SomeTextFile.txt”);",
          "correct": false
        },
        {
          "text": "InputStream in = this.getClass().getResourceAsStream(“SomeTextFile.txt”);",
          "correct": true
        },
        {
          "text": "InputStream in = this.getClass().getResource(“classpath:/SomeTextFile.txt”);",
          "correct": false
        }
      ],
      "source": "https://www.sanfoundry.com"
    }
  ]
}
