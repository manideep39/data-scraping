{
  "questions": [
    {
      "statement": "Which is a valid JavaScript type for numerical data?",
      "explanation": "Unlike many coding languages, JavaScript has only one primitve numerical type: \\`number\\`. This is used for both integers and floating point values.",
      "type": "MCQ",
      "options": [
        { "text": "int", "correct": false },
        { "text": "short", "correct": false },
        { "text": "number", "correct": true },
        { "text": "float", "correct": false },
        { "text": "long", "correct": false }
      ]
    },
    {
      "statement": "What is the output of \\`console.log(typeof \\[\\])\\`?",
      "explanation": "In JavaScript, arrays are a type of \\`object\\`. There is no \"array\" type.",
      "type": "MCQ",
      "options": [
        { "text": "undefined", "correct": false },
        { "text": "object", "correct": true },
        { "text": "list", "correct": false },
        { "text": "array", "correct": false }
      ]
    },
    {
      "statement": "What will be logged to the console when the following code is executed: \\`\\`\\`js var a = null; console.log(!a && typeof a === \"object\"); \\`\\`\\`",
      "explanation": "It would have been nice if \\`typeof null\\` returned \"null\", but this original bug in JS has persisted for nearly two decades, and will likely never be fixed because there's too much existing web content that relies on its buggy behavior that \"fixing\" the bug would create more \"bugs\" and break a lot of web software.",
      "type": "MCQ",
      "options": [
        { "text": "\\`true\\`", "correct": true },
        { "text": "\\`false\\`", "correct": false },
        { "text": "\\`undefined\\`", "correct": false },
        { "text": "\\`TypeError\\`", "correct": false }
      ]
    },
    {
      "statement": "What will be logged to the console when the following code is executed: \\`\\`\\`js function a(b, c) { var d = 5 return d + 1 }; console.log(a.length); \\`\\`\\`",
      "explanation": "The function object has a length property set to the number of formal parameters it is declared with.",
      "type": "MCQ",
      "options": [
        { "text": "\\`undefined\\`", "correct": false },
        { "text": "\\`TypeError\\`", "correct": false },
        { "text": "\\`1\\`", "correct": false },
        { "text": "\\`2\\`", "correct": true }
      ]
    },
    {
      "statement": "What is a good way to safely check if a variable has been declared?",
      "explanation": "All of the other options will throw an error if \\`a\\` has not been declared.",
      "type": "MCQ",
      "options": [
        { "text": "\\`if (a)...\\`", "correct": false },
        { "text": "\\`if(typeof a !== \"undefined\")...\\`", "correct": true },
        { "text": "\\`if(a !== undefined)...\\`", "correct": false },
        { "text": "\\`if(a.isDefined())...\\`", "correct": false }
      ]
    },
    {
      "statement": "Once an array is assigned data of a particular type, it can only hold data of that type.",
      "explanation": "In JS, arrays are simple containers that can hold any combination of types, including all primitive types, objects, other arrays, and even functions.",
      "type": "TF",
      "correct": false
    },
    {
      "statement": "What is the output of \\`console.log(typeof NaN)\\`?",
      "explanation": "An oddity of JavaScript, the property \\`NaN\\` (\"not a number\") is actually of type \"number\".",
      "type": "MCQ",
      "options": [
        { "text": "\\`\"number\"\\`", "correct": true },
        { "text": "\\`NaN\\`", "correct": false },
        { "text": "\\`undefined\\`", "correct": false },
        { "text": "\\`null\\`", "correct": false }
      ]
    },
    {
      "statement": "What is \\`0.1 + 0.2 === 0.3\\`?",
      "explanation": "The most (in)famous side effect of using binary floating-point numbers (which, remember, is true of all languages that use IEEE 754 -- not just JavaScript as many assume/pretend) is that representations of decimals are not exact.",
      "type": "MCQ",
      "options": [
        { "text": "\\`true\\`", "correct": false },
        { "text": "\\`false\\`", "correct": true }
      ]
    },
    {
      "statement": "JavaScript \\`string\\`s are immutable",
      "explanation": "You might have thought of string methods as mutating the original string. However, all of the string methods that alter its contents must create and return new strings.",
      "type": "TF",
      "correct": true
    },
    {
      "statement": "What is \\`1 / 0\\` in JavaScript?",
      "explanation": "In JS, this operation is well-defined and results in the value Infinity (aka Number.POSITIVE\\_INFINITY).",
      "type": "MCQ",
      "options": [
        { "text": "\\`Infinity\\`", "correct": true },
        { "text": "\\`TypeError\\`", "correct": false },
        { "text": "\\`undefined\\`", "correct": false },
        { "text": "\\`1\\`", "correct": false }
      ]
    },
    {
      "statement": "What is logged to the console after the following code is executed: \\`\\`\\`js var a = new String( \"abc\" ); console.log(typeof a) \\`\\`\\`",
      "explanation": "The result of the constructor form of value creation \\`(new String(\"abc\"))\\` is an object wrapper around the primitive (\\`\"abc\"\\`) value. Importantly, \\`typeof\\` shows that these objects are not their own special types, but more appropriately they are subtypes of the \\`object\\` type.",
      "type": "MCQ",
      "options": [
        { "text": "\\`\"object\"\\`", "correct": true },
        { "text": "\\`\"string\"\\`", "correct": false },
        { "text": "\\`\"function\"\\`", "correct": false },
        { "text": "\\`\"class\"\\`", "correct": false }
      ]
    },
    {
      "statement": "Which native was added in ES6?",
      "explanation": "\\`Symbol()\\` was added in ES6",
      "type": "MCQ",
      "options": [
        { "text": "\\`Symbol()\\`", "correct": true },
        { "text": "\\`RegExp()\\`", "correct": false },
        { "text": "\\`Date()\\`", "correct": false },
        { "text": "\\`Error()\\`", "correct": false }
      ]
    },
    {
      "statement": "What purpose do boxing wrappers serve?",
      "explanation": "Ever wondered why you can call \\`str.length\\` or \\`str.toUpperCase()\\`? Or maybe you just accepted it as fact and didn't think much about it. Primitive types such as \\`string\\` or \\`number\\` get automatically wrapped by boxing wrappers as needed which have methods such as \\`length\\` and \\`toUpperCase\\`.",
      "type": "MCQ",
      "options": [
        {
          "text": "They allow you to call methods on primitives that aren't objects",
          "correct": true
        },
        {
          "text": "They give JavaScript objects all of their functionality",
          "correct": false
        },
        {
          "text": "They are a mechanism for JavaScript engines to improve performance",
          "correct": false
        },
        { "text": "They allow for the use of ES6 classes", "correct": false }
      ]
    },
    {
      "statement": "What is \"boxing\" and \"unboxing\"?",
      "explanation": "Boxing is wrapping a primitive value, and unboxing is extracting the primitive value from a wrapper. Boxing/Unboxing can be done explicitly or implicitly.",
      "type": "MCQ",
      "options": [
        {
          "text": "Boxing is converting from primitive to object wrapper, and unboxing is converting from object wrapper to primitive.",
          "correct": true
        },
        {
          "text": "Boxing is converting from object wrapper to primitive, and unboxing is converting from primitive to object wrapper.",
          "correct": false
        },
        {
          "text": "Boxing is temporarily coercing one primitive type to another, unboxing is coercing it back to its original type",
          "correct": false
        },
        {
          "text": "Boxing is merging of your JavaScript files into one, and unboxing is using source maps to undo the merging",
          "correct": false
        }
      ]
    },
    {
      "statement": "\\`var a = new String( \"abc\" );\\` is more performant than \\`var a = \"abc\";\\`",
      "explanation": "You might think that it would be more performant to use the object wrapper form, so that the engine doesn't have to wrap the primitive. However, engines have been optimizing based on the assumption that almost everyone constructs using primitives, thus they are actually more performant.",
      "type": "TF",
      "correct": false
    },
    {
      "statement": "Everyone has more or less agreed that implicit coercion is a good feature in JavaScript",
      "explanation": "There are rules for linters to disallow implicit coercion because it can happen unexpectedly if the developer isn't careful. Implicit coercion is a valuable tool once you fully understand how it works.",
      "type": "TF",
      "correct": false
    },
    {
      "statement": "What is logged to the console when the following code is executed: \\`\\`\\`js var a = '4'; var b = '2'; console.log(a + b); \\`\\`\\`",
      "explanation": "\\`+\\` means concatenation when any of the operands are strings",
      "type": "MCQ",
      "options": [
        { "text": "\\`\"42\"\\`", "correct": true },
        { "text": "\\`6\\`", "correct": false },
        { "text": "\\`\"6\"\\`", "correct": false },
        { "text": "\\`42\\`", "correct": false }
      ]
    },
    {
      "statement": "What is logged to the console when the following code is executed: \\`\\`\\`js var a = {}; if (a) { console.log(a); } \\`\\`\\`",
      "explanation": "There is no such thing as a falsy object in JavaScript",
      "type": "MCQ",
      "options": [
        {
          "text": "Nothing is actually logged to the console",
          "correct": false
        },
        { "text": "\\`{}\\`", "correct": true }
      ]
    },
    {
      "statement": "What is logged to the console when the following code is executed: \\`\\`\\`js console.log(40 + 0 + '5') \\`\\`\\`",
      "explanation": "\\`+\\` means concatenation when any of the operands are strings",
      "type": "MCQ",
      "options": [
        { "text": "\\`45\\`", "correct": false },
        { "text": "\\`\"405\"\\`", "correct": true },
        { "text": "\\`\"45\"\\`", "correct": false },
        { "text": "\\`405\\`", "correct": false }
      ]
    },
    {
      "statement": "What is logged to the console when the following code is executed: \\`\\`\\`js var a = \\[5,2,6,0,9\\] a.forEach(num => { if (num) { // ...do stuff } else { console.log(num) } }) \\`\\`\\`",
      "explanation": "\\`0\\` is actually falsy which can be unexpected. If you have a list of values and you want to make sure none of them are \\`undefined\\` or \\`null\\` you can't just check if they are truthy.",
      "type": "MCQ",
      "options": [
        { "text": "Nothing is logged to the console", "correct": false },
        { "text": "\\`0\\`", "correct": true },
        { "text": "\\`5\\` \\`2\\` \\`6\\` \\`0\\` \\`9\\`", "correct": false }
      ]
    },
    {
      "statement": "What best describes the code, \\`var a = 3 \\* 6;\\`",
      "explanation": "Statements are to English sentences as expressions are to English phrases",
      "type": "MCQ",
      "options": [
        {
          "text": "It is a statement containing multiple expressions",
          "correct": true
        },
        {
          "text": "It is an expression containing multiple statements",
          "correct": false
        }
      ]
    },
    {
      "statement": "What is logged to the console when the following code is executed: \\`\\`\\`js var a = 42; var b = a++; console.log(a + b); \\`\\`\\`",
      "explanation": "\\`a++\\` increments \\`a\\` by 1, but the return value of \\`a++\\` is the previous value of \\`a\\`. So when we get to line 3, \\`a\\` has a value of \\`43\\` and \\`b\\` has a value of \\`42\\`.",
      "type": "MCQ",
      "options": [
        { "text": "\\`85\\`", "correct": true },
        { "text": "\\`84\\`", "correct": false },
        { "text": "\\`undefined\\`", "correct": false },
        { "text": "\\`43\\`", "correct": false }
      ]
    },
    {
      "statement": "What is logged to the console when the following code is executed: \\`\\`\\`js var obj = { a: { b: \"c\" } } console.log(obj.a && obj.a.b) \\`\\`\\`",
      "explanation": "The \\`&&\\` operator doesn't actually return \\`true\\` if both operands are truthy. It returns the last value. Ever get an error when you try to access \\`a.length\\` when \\`a\\` is undefined? You could instead try \\`a && a.length\\`.",
      "type": "MCQ",
      "options": [
        { "text": "\\`\"c\"\\`", "correct": true },
        { "text": "\\`true\\`", "correct": false },
        { "text": "\\`false\\`", "correct": false },
        { "text": "\\`TypeError\\`", "correct": false }
      ]
    },
    {
      "statement": "What is Automatic Semicolon Insertion (ASI) in JavaScript?",
      "explanation": "There are many opinions on whether semicolons should be used in JavaScript. Per the spec, ASI is an error fixing mechanism which suggests that developers should use semicolons.",
      "type": "MCQ",
      "options": [
        {
          "text": "ASI is an \"error correction\" routine that inserts semicolons to fix parser errors",
          "correct": true
        },
        {
          "text": "Mechanism that automatically inserts semicolons in the middle of a line if it notices two statements on one line.",
          "correct": false
        },
        {
          "text": "A deprecated system that used to replace commas with semicolons as needed",
          "correct": false
        }
      ]
    },
    {
      "statement": "What is logged to the console when the following code is executed: \\`\\`\\`js var a = b = 1; var c = 2; var d = \"\"; if (a === b || a === b && b === c) { d += 'Expression 1 is true. '; } if ((a === b || a === b) && b === c) { d += 'Expression 2 is true.'; } console.log(d); \\`\\`\\`",
      "explanation": "You might expect JavaScript expressions to work left to right with the exception that everything in parentheses gets executed first. That is not the case. You might know that, in math, the \"\\*\" operator executes before \"+\". So, 1 + 1 \\* 5 = 6, not 7. Similarly, in JavaScript, the \\`&&\\` operator executes before \\`||\\`.",
      "type": "MCQ",
      "options": [
        { "text": "\\`\"Expression 1 is true. \"\\`", "correct": true },
        { "text": "\\`\"Expression 2 is true.\"\\`", "correct": false },
        {
          "text": "\\`\"Expression 1 is true. Expression 2 is true.\"\\`",
          "correct": false
        },
        { "text": "\\`\"\"\\`", "correct": false }
      ]
    }
  ]
}
